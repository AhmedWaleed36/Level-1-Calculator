
CALC_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  000040fc  00004190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080019c  0080019c  000042cc  2**0
                  ALLOC
  3 .stab         000032f4  00000000  00000000  000042cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f20  00000000  00000000  000075c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000084e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022c  00000000  00000000  000086c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000290a  00000000  00000000  000088ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000162b  00000000  00000000  0000b1f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137e  00000000  00000000  0000c821  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000dba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000303  00000000  00000000  0000dda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a46  00000000  00000000  0000e0a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 31 19 	call	0x3262	; 0x3262 <main>
      8a:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 20 	jmp	0x408a	; 0x408a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e8       	ldi	r26, 0x84	; 132
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 20 	jmp	0x408a	; 0x408a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4d 20 	jmp	0x409a	; 0x409a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e8       	ldi	r22, 0x84	; 132
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 03 07 	call	0xe06	; 0xe06 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__epilogue_restores__+0x18>

000007ea <__nesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__nesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__nesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 03 07 	call	0xe06	; 0xe06 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__nesf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__epilogue_restores__+0x18>

0000084a <__gtsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__gtsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__gtsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 03 07 	call	0xe06	; 0xe06 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__gtsf2+0x58>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__epilogue_restores__+0x18>

000008aa <__gesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__gesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__gesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 03 07 	call	0xe06	; 0xe06 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__gesf2+0x58>
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__epilogue_restores__+0x18>

0000090a <__ltsf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__ltsf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__ltsf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 03 07 	call	0xe06	; 0xe06 <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__ltsf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__epilogue_restores__+0x18>

0000096a <__floatsisf>:
     96a:	a8 e0       	ldi	r26, 0x08	; 8
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__prologue_saves__+0x12>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	da 01       	movw	r26, r20
     980:	c9 01       	movw	r24, r18
     982:	88 27       	eor	r24, r24
     984:	b7 fd       	sbrc	r27, 7
     986:	83 95       	inc	r24
     988:	99 27       	eor	r25, r25
     98a:	aa 27       	eor	r26, r26
     98c:	bb 27       	eor	r27, r27
     98e:	b8 2e       	mov	r11, r24
     990:	21 15       	cp	r18, r1
     992:	31 05       	cpc	r19, r1
     994:	41 05       	cpc	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	19 f4       	brne	.+6      	; 0x9a0 <__floatsisf+0x36>
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	3a c0       	rjmp	.+116    	; 0xa14 <__floatsisf+0xaa>
     9a0:	88 23       	and	r24, r24
     9a2:	a9 f0       	breq	.+42     	; 0x9ce <__floatsisf+0x64>
     9a4:	20 30       	cpi	r18, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	38 07       	cpc	r19, r24
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	48 07       	cpc	r20, r24
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	58 07       	cpc	r21, r24
     9b2:	29 f4       	brne	.+10     	; 0x9be <__floatsisf+0x54>
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	9f ec       	ldi	r25, 0xCF	; 207
     9bc:	30 c0       	rjmp	.+96     	; 0xa1e <__floatsisf+0xb4>
     9be:	ee 24       	eor	r14, r14
     9c0:	ff 24       	eor	r15, r15
     9c2:	87 01       	movw	r16, r14
     9c4:	e2 1a       	sub	r14, r18
     9c6:	f3 0a       	sbc	r15, r19
     9c8:	04 0b       	sbc	r16, r20
     9ca:	15 0b       	sbc	r17, r21
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__floatsisf+0x68>
     9ce:	79 01       	movw	r14, r18
     9d0:	8a 01       	movw	r16, r20
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 67 05 	call	0xace	; 0xace <__clzsi2>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	18 16       	cp	r1, r24
     9f0:	19 06       	cpc	r1, r25
     9f2:	84 f4       	brge	.+32     	; 0xa14 <__floatsisf+0xaa>
     9f4:	08 2e       	mov	r0, r24
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__floatsisf+0x96>
     9f8:	ee 0c       	add	r14, r14
     9fa:	ff 1c       	adc	r15, r15
     9fc:	00 1f       	adc	r16, r16
     9fe:	11 1f       	adc	r17, r17
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__floatsisf+0x8e>
     a04:	ed 82       	std	Y+5, r14	; 0x05
     a06:	fe 82       	std	Y+6, r15	; 0x06
     a08:	0f 83       	std	Y+7, r16	; 0x07
     a0a:	18 87       	std	Y+8, r17	; 0x08
     a0c:	c8 1a       	sub	r12, r24
     a0e:	d9 0a       	sbc	r13, r25
     a10:	dc 82       	std	Y+4, r13	; 0x04
     a12:	cb 82       	std	Y+3, r12	; 0x03
     a14:	ba 82       	std	Y+2, r11	; 0x02
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__pack_f>
     a1e:	28 96       	adiw	r28, 0x08	; 8
     a20:	e9 e0       	ldi	r30, 0x09	; 9
     a22:	0c 94 6a 20 	jmp	0x40d4	; 0x40d4 <__epilogue_restores__+0x12>

00000a26 <__fixsfsi>:
     a26:	ac e0       	ldi	r26, 0x0C	; 12
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e9 e1       	ldi	r30, 0x19	; 25
     a2c:	f5 e0       	ldi	r31, 0x05	; 5
     a2e:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <__prologue_saves__+0x20>
     a32:	69 83       	std	Y+1, r22	; 0x01
     a34:	7a 83       	std	Y+2, r23	; 0x02
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	be 01       	movw	r22, r28
     a40:	6b 5f       	subi	r22, 0xFB	; 251
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	61 f1       	breq	.+88     	; 0xaa6 <__fixsfsi+0x80>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	50 f1       	brcs	.+84     	; 0xaa6 <__fixsfsi+0x80>
     a52:	84 30       	cpi	r24, 0x04	; 4
     a54:	21 f4       	brne	.+8      	; 0xa5e <__fixsfsi+0x38>
     a56:	8e 81       	ldd	r24, Y+6	; 0x06
     a58:	88 23       	and	r24, r24
     a5a:	51 f1       	breq	.+84     	; 0xab0 <__fixsfsi+0x8a>
     a5c:	2e c0       	rjmp	.+92     	; 0xaba <__fixsfsi+0x94>
     a5e:	2f 81       	ldd	r18, Y+7	; 0x07
     a60:	38 85       	ldd	r19, Y+8	; 0x08
     a62:	37 fd       	sbrc	r19, 7
     a64:	20 c0       	rjmp	.+64     	; 0xaa6 <__fixsfsi+0x80>
     a66:	6e 81       	ldd	r22, Y+6	; 0x06
     a68:	2f 31       	cpi	r18, 0x1F	; 31
     a6a:	31 05       	cpc	r19, r1
     a6c:	1c f0       	brlt	.+6      	; 0xa74 <__fixsfsi+0x4e>
     a6e:	66 23       	and	r22, r22
     a70:	f9 f0       	breq	.+62     	; 0xab0 <__fixsfsi+0x8a>
     a72:	23 c0       	rjmp	.+70     	; 0xaba <__fixsfsi+0x94>
     a74:	8e e1       	ldi	r24, 0x1E	; 30
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	82 1b       	sub	r24, r18
     a7a:	93 0b       	sbc	r25, r19
     a7c:	29 85       	ldd	r18, Y+9	; 0x09
     a7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a80:	4b 85       	ldd	r20, Y+11	; 0x0b
     a82:	5c 85       	ldd	r21, Y+12	; 0x0c
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__fixsfsi+0x68>
     a86:	56 95       	lsr	r21
     a88:	47 95       	ror	r20
     a8a:	37 95       	ror	r19
     a8c:	27 95       	ror	r18
     a8e:	8a 95       	dec	r24
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__fixsfsi+0x60>
     a92:	66 23       	and	r22, r22
     a94:	b1 f0       	breq	.+44     	; 0xac2 <__fixsfsi+0x9c>
     a96:	50 95       	com	r21
     a98:	40 95       	com	r20
     a9a:	30 95       	com	r19
     a9c:	21 95       	neg	r18
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	4f 4f       	sbci	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__fixsfsi+0x9c>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <__fixsfsi+0x9c>
     ab0:	2f ef       	ldi	r18, 0xFF	; 255
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	4f ef       	ldi	r20, 0xFF	; 255
     ab6:	5f e7       	ldi	r21, 0x7F	; 127
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__fixsfsi+0x9c>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e8       	ldi	r21, 0x80	; 128
     ac2:	b9 01       	movw	r22, r18
     ac4:	ca 01       	movw	r24, r20
     ac6:	2c 96       	adiw	r28, 0x0c	; 12
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__epilogue_restores__+0x20>

00000ace <__clzsi2>:
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	7b 01       	movw	r14, r22
     ad8:	8c 01       	movw	r16, r24
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	e8 16       	cp	r14, r24
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	f8 06       	cpc	r15, r24
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	08 07       	cpc	r16, r24
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	18 07       	cpc	r17, r24
     aea:	88 f4       	brcc	.+34     	; 0xb0e <__clzsi2+0x40>
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	e8 16       	cp	r14, r24
     af0:	f1 04       	cpc	r15, r1
     af2:	01 05       	cpc	r16, r1
     af4:	11 05       	cpc	r17, r1
     af6:	31 f0       	breq	.+12     	; 0xb04 <__clzsi2+0x36>
     af8:	28 f0       	brcs	.+10     	; 0xb04 <__clzsi2+0x36>
     afa:	88 e0       	ldi	r24, 0x08	; 8
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a0 e0       	ldi	r26, 0x00	; 0
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	17 c0       	rjmp	.+46     	; 0xb32 <__clzsi2+0x64>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	a0 e0       	ldi	r26, 0x00	; 0
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	12 c0       	rjmp	.+36     	; 0xb32 <__clzsi2+0x64>
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	e8 16       	cp	r14, r24
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	f8 06       	cpc	r15, r24
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	08 07       	cpc	r16, r24
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	18 07       	cpc	r17, r24
     b1e:	28 f0       	brcs	.+10     	; 0xb2a <__clzsi2+0x5c>
     b20:	88 e1       	ldi	r24, 0x18	; 24
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__clzsi2+0x64>
     b2a:	80 e1       	ldi	r24, 0x10	; 16
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	a0 e0       	ldi	r26, 0x00	; 0
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	20 e2       	ldi	r18, 0x20	; 32
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	28 1b       	sub	r18, r24
     b3c:	39 0b       	sbc	r19, r25
     b3e:	4a 0b       	sbc	r20, r26
     b40:	5b 0b       	sbc	r21, r27
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <__clzsi2+0x7e>
     b44:	16 95       	lsr	r17
     b46:	07 95       	ror	r16
     b48:	f7 94       	ror	r15
     b4a:	e7 94       	ror	r14
     b4c:	8a 95       	dec	r24
     b4e:	d2 f7       	brpl	.-12     	; 0xb44 <__clzsi2+0x76>
     b50:	f7 01       	movw	r30, r14
     b52:	e4 57       	subi	r30, 0x74	; 116
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 81       	ld	r24, Z
     b58:	28 1b       	sub	r18, r24
     b5a:	31 09       	sbc	r19, r1
     b5c:	41 09       	sbc	r20, r1
     b5e:	51 09       	sbc	r21, r1
     b60:	c9 01       	movw	r24, r18
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	08 95       	ret

00000b6c <__pack_f>:
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	fc 01       	movw	r30, r24
     b78:	e4 80       	ldd	r14, Z+4	; 0x04
     b7a:	f5 80       	ldd	r15, Z+5	; 0x05
     b7c:	06 81       	ldd	r16, Z+6	; 0x06
     b7e:	17 81       	ldd	r17, Z+7	; 0x07
     b80:	d1 80       	ldd	r13, Z+1	; 0x01
     b82:	80 81       	ld	r24, Z
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	48 f4       	brcc	.+18     	; 0xb9a <__pack_f+0x2e>
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e1       	ldi	r26, 0x10	; 16
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e8 2a       	or	r14, r24
     b92:	f9 2a       	or	r15, r25
     b94:	0a 2b       	or	r16, r26
     b96:	1b 2b       	or	r17, r27
     b98:	a5 c0       	rjmp	.+330    	; 0xce4 <__pack_f+0x178>
     b9a:	84 30       	cpi	r24, 0x04	; 4
     b9c:	09 f4       	brne	.+2      	; 0xba0 <__pack_f+0x34>
     b9e:	9f c0       	rjmp	.+318    	; 0xcde <__pack_f+0x172>
     ba0:	82 30       	cpi	r24, 0x02	; 2
     ba2:	21 f4       	brne	.+8      	; 0xbac <__pack_f+0x40>
     ba4:	ee 24       	eor	r14, r14
     ba6:	ff 24       	eor	r15, r15
     ba8:	87 01       	movw	r16, r14
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <__pack_f+0x4a>
     bac:	e1 14       	cp	r14, r1
     bae:	f1 04       	cpc	r15, r1
     bb0:	01 05       	cpc	r16, r1
     bb2:	11 05       	cpc	r17, r1
     bb4:	19 f4       	brne	.+6      	; 0xbbc <__pack_f+0x50>
     bb6:	e0 e0       	ldi	r30, 0x00	; 0
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	96 c0       	rjmp	.+300    	; 0xce8 <__pack_f+0x17c>
     bbc:	62 81       	ldd	r22, Z+2	; 0x02
     bbe:	73 81       	ldd	r23, Z+3	; 0x03
     bc0:	9f ef       	ldi	r25, 0xFF	; 255
     bc2:	62 38       	cpi	r22, 0x82	; 130
     bc4:	79 07       	cpc	r23, r25
     bc6:	0c f0       	brlt	.+2      	; 0xbca <__pack_f+0x5e>
     bc8:	5b c0       	rjmp	.+182    	; 0xc80 <__pack_f+0x114>
     bca:	22 e8       	ldi	r18, 0x82	; 130
     bcc:	3f ef       	ldi	r19, 0xFF	; 255
     bce:	26 1b       	sub	r18, r22
     bd0:	37 0b       	sbc	r19, r23
     bd2:	2a 31       	cpi	r18, 0x1A	; 26
     bd4:	31 05       	cpc	r19, r1
     bd6:	2c f0       	brlt	.+10     	; 0xbe2 <__pack_f+0x76>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	2a c0       	rjmp	.+84     	; 0xc36 <__pack_f+0xca>
     be2:	b8 01       	movw	r22, r16
     be4:	a7 01       	movw	r20, r14
     be6:	02 2e       	mov	r0, r18
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0x86>
     bea:	76 95       	lsr	r23
     bec:	67 95       	ror	r22
     bee:	57 95       	ror	r21
     bf0:	47 95       	ror	r20
     bf2:	0a 94       	dec	r0
     bf4:	d2 f7       	brpl	.-12     	; 0xbea <__pack_f+0x7e>
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <__pack_f+0x9c>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	aa 1f       	adc	r26, r26
     c06:	bb 1f       	adc	r27, r27
     c08:	2a 95       	dec	r18
     c0a:	d2 f7       	brpl	.-12     	; 0xc00 <__pack_f+0x94>
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	a1 09       	sbc	r26, r1
     c10:	b1 09       	sbc	r27, r1
     c12:	8e 21       	and	r24, r14
     c14:	9f 21       	and	r25, r15
     c16:	a0 23       	and	r26, r16
     c18:	b1 23       	and	r27, r17
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	21 f0       	breq	.+8      	; 0xc2a <__pack_f+0xbe>
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	9a 01       	movw	r18, r20
     c2c:	ab 01       	movw	r20, r22
     c2e:	28 2b       	or	r18, r24
     c30:	39 2b       	or	r19, r25
     c32:	4a 2b       	or	r20, r26
     c34:	5b 2b       	or	r21, r27
     c36:	da 01       	movw	r26, r20
     c38:	c9 01       	movw	r24, r18
     c3a:	8f 77       	andi	r24, 0x7F	; 127
     c3c:	90 70       	andi	r25, 0x00	; 0
     c3e:	a0 70       	andi	r26, 0x00	; 0
     c40:	b0 70       	andi	r27, 0x00	; 0
     c42:	80 34       	cpi	r24, 0x40	; 64
     c44:	91 05       	cpc	r25, r1
     c46:	a1 05       	cpc	r26, r1
     c48:	b1 05       	cpc	r27, r1
     c4a:	39 f4       	brne	.+14     	; 0xc5a <__pack_f+0xee>
     c4c:	27 ff       	sbrs	r18, 7
     c4e:	09 c0       	rjmp	.+18     	; 0xc62 <__pack_f+0xf6>
     c50:	20 5c       	subi	r18, 0xC0	; 192
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	4f 4f       	sbci	r20, 0xFF	; 255
     c56:	5f 4f       	sbci	r21, 0xFF	; 255
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0xf6>
     c5a:	21 5c       	subi	r18, 0xC1	; 193
     c5c:	3f 4f       	sbci	r19, 0xFF	; 255
     c5e:	4f 4f       	sbci	r20, 0xFF	; 255
     c60:	5f 4f       	sbci	r21, 0xFF	; 255
     c62:	e0 e0       	ldi	r30, 0x00	; 0
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	20 30       	cpi	r18, 0x00	; 0
     c68:	a0 e0       	ldi	r26, 0x00	; 0
     c6a:	3a 07       	cpc	r19, r26
     c6c:	a0 e0       	ldi	r26, 0x00	; 0
     c6e:	4a 07       	cpc	r20, r26
     c70:	a0 e4       	ldi	r26, 0x40	; 64
     c72:	5a 07       	cpc	r21, r26
     c74:	10 f0       	brcs	.+4      	; 0xc7a <__pack_f+0x10e>
     c76:	e1 e0       	ldi	r30, 0x01	; 1
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	79 01       	movw	r14, r18
     c7c:	8a 01       	movw	r16, r20
     c7e:	27 c0       	rjmp	.+78     	; 0xcce <__pack_f+0x162>
     c80:	60 38       	cpi	r22, 0x80	; 128
     c82:	71 05       	cpc	r23, r1
     c84:	64 f5       	brge	.+88     	; 0xcde <__pack_f+0x172>
     c86:	fb 01       	movw	r30, r22
     c88:	e1 58       	subi	r30, 0x81	; 129
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	d8 01       	movw	r26, r16
     c8e:	c7 01       	movw	r24, r14
     c90:	8f 77       	andi	r24, 0x7F	; 127
     c92:	90 70       	andi	r25, 0x00	; 0
     c94:	a0 70       	andi	r26, 0x00	; 0
     c96:	b0 70       	andi	r27, 0x00	; 0
     c98:	80 34       	cpi	r24, 0x40	; 64
     c9a:	91 05       	cpc	r25, r1
     c9c:	a1 05       	cpc	r26, r1
     c9e:	b1 05       	cpc	r27, r1
     ca0:	39 f4       	brne	.+14     	; 0xcb0 <__pack_f+0x144>
     ca2:	e7 fe       	sbrs	r14, 7
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <__pack_f+0x154>
     ca6:	80 e4       	ldi	r24, 0x40	; 64
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	a0 e0       	ldi	r26, 0x00	; 0
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__pack_f+0x14c>
     cb0:	8f e3       	ldi	r24, 0x3F	; 63
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e8 0e       	add	r14, r24
     cba:	f9 1e       	adc	r15, r25
     cbc:	0a 1f       	adc	r16, r26
     cbe:	1b 1f       	adc	r17, r27
     cc0:	17 ff       	sbrs	r17, 7
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <__pack_f+0x162>
     cc4:	16 95       	lsr	r17
     cc6:	07 95       	ror	r16
     cc8:	f7 94       	ror	r15
     cca:	e7 94       	ror	r14
     ccc:	31 96       	adiw	r30, 0x01	; 1
     cce:	87 e0       	ldi	r24, 0x07	; 7
     cd0:	16 95       	lsr	r17
     cd2:	07 95       	ror	r16
     cd4:	f7 94       	ror	r15
     cd6:	e7 94       	ror	r14
     cd8:	8a 95       	dec	r24
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__pack_f+0x164>
     cdc:	05 c0       	rjmp	.+10     	; 0xce8 <__pack_f+0x17c>
     cde:	ee 24       	eor	r14, r14
     ce0:	ff 24       	eor	r15, r15
     ce2:	87 01       	movw	r16, r14
     ce4:	ef ef       	ldi	r30, 0xFF	; 255
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	6e 2f       	mov	r22, r30
     cea:	67 95       	ror	r22
     cec:	66 27       	eor	r22, r22
     cee:	67 95       	ror	r22
     cf0:	90 2f       	mov	r25, r16
     cf2:	9f 77       	andi	r25, 0x7F	; 127
     cf4:	d7 94       	ror	r13
     cf6:	dd 24       	eor	r13, r13
     cf8:	d7 94       	ror	r13
     cfa:	8e 2f       	mov	r24, r30
     cfc:	86 95       	lsr	r24
     cfe:	49 2f       	mov	r20, r25
     d00:	46 2b       	or	r20, r22
     d02:	58 2f       	mov	r21, r24
     d04:	5d 29       	or	r21, r13
     d06:	b7 01       	movw	r22, r14
     d08:	ca 01       	movw	r24, r20
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	08 95       	ret

00000d16 <__unpack_f>:
     d16:	fc 01       	movw	r30, r24
     d18:	db 01       	movw	r26, r22
     d1a:	40 81       	ld	r20, Z
     d1c:	51 81       	ldd	r21, Z+1	; 0x01
     d1e:	22 81       	ldd	r18, Z+2	; 0x02
     d20:	62 2f       	mov	r22, r18
     d22:	6f 77       	andi	r22, 0x7F	; 127
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	22 1f       	adc	r18, r18
     d28:	22 27       	eor	r18, r18
     d2a:	22 1f       	adc	r18, r18
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	89 2f       	mov	r24, r25
     d30:	88 0f       	add	r24, r24
     d32:	82 2b       	or	r24, r18
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	99 1f       	adc	r25, r25
     d3a:	99 27       	eor	r25, r25
     d3c:	99 1f       	adc	r25, r25
     d3e:	11 96       	adiw	r26, 0x01	; 1
     d40:	9c 93       	st	X, r25
     d42:	11 97       	sbiw	r26, 0x01	; 1
     d44:	21 15       	cp	r18, r1
     d46:	31 05       	cpc	r19, r1
     d48:	a9 f5       	brne	.+106    	; 0xdb4 <__unpack_f+0x9e>
     d4a:	41 15       	cp	r20, r1
     d4c:	51 05       	cpc	r21, r1
     d4e:	61 05       	cpc	r22, r1
     d50:	71 05       	cpc	r23, r1
     d52:	11 f4       	brne	.+4      	; 0xd58 <__unpack_f+0x42>
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	37 c0       	rjmp	.+110    	; 0xdc6 <__unpack_f+0xb0>
     d58:	82 e8       	ldi	r24, 0x82	; 130
     d5a:	9f ef       	ldi	r25, 0xFF	; 255
     d5c:	13 96       	adiw	r26, 0x03	; 3
     d5e:	9c 93       	st	X, r25
     d60:	8e 93       	st	-X, r24
     d62:	12 97       	sbiw	r26, 0x02	; 2
     d64:	9a 01       	movw	r18, r20
     d66:	ab 01       	movw	r20, r22
     d68:	67 e0       	ldi	r22, 0x07	; 7
     d6a:	22 0f       	add	r18, r18
     d6c:	33 1f       	adc	r19, r19
     d6e:	44 1f       	adc	r20, r20
     d70:	55 1f       	adc	r21, r21
     d72:	6a 95       	dec	r22
     d74:	d1 f7       	brne	.-12     	; 0xd6a <__unpack_f+0x54>
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	8c 93       	st	X, r24
     d7a:	0d c0       	rjmp	.+26     	; 0xd96 <__unpack_f+0x80>
     d7c:	22 0f       	add	r18, r18
     d7e:	33 1f       	adc	r19, r19
     d80:	44 1f       	adc	r20, r20
     d82:	55 1f       	adc	r21, r21
     d84:	12 96       	adiw	r26, 0x02	; 2
     d86:	8d 91       	ld	r24, X+
     d88:	9c 91       	ld	r25, X
     d8a:	13 97       	sbiw	r26, 0x03	; 3
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	20 30       	cpi	r18, 0x00	; 0
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	38 07       	cpc	r19, r24
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	48 07       	cpc	r20, r24
     da0:	80 e4       	ldi	r24, 0x40	; 64
     da2:	58 07       	cpc	r21, r24
     da4:	58 f3       	brcs	.-42     	; 0xd7c <__unpack_f+0x66>
     da6:	14 96       	adiw	r26, 0x04	; 4
     da8:	2d 93       	st	X+, r18
     daa:	3d 93       	st	X+, r19
     dac:	4d 93       	st	X+, r20
     dae:	5c 93       	st	X, r21
     db0:	17 97       	sbiw	r26, 0x07	; 7
     db2:	08 95       	ret
     db4:	2f 3f       	cpi	r18, 0xFF	; 255
     db6:	31 05       	cpc	r19, r1
     db8:	79 f4       	brne	.+30     	; 0xdd8 <__unpack_f+0xc2>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	19 f4       	brne	.+6      	; 0xdca <__unpack_f+0xb4>
     dc4:	84 e0       	ldi	r24, 0x04	; 4
     dc6:	8c 93       	st	X, r24
     dc8:	08 95       	ret
     dca:	64 ff       	sbrs	r22, 4
     dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <__unpack_f+0xbe>
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	8c 93       	st	X, r24
     dd2:	12 c0       	rjmp	.+36     	; 0xdf8 <__unpack_f+0xe2>
     dd4:	1c 92       	st	X, r1
     dd6:	10 c0       	rjmp	.+32     	; 0xdf8 <__unpack_f+0xe2>
     dd8:	2f 57       	subi	r18, 0x7F	; 127
     dda:	30 40       	sbci	r19, 0x00	; 0
     ddc:	13 96       	adiw	r26, 0x03	; 3
     dde:	3c 93       	st	X, r19
     de0:	2e 93       	st	-X, r18
     de2:	12 97       	sbiw	r26, 0x02	; 2
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	8c 93       	st	X, r24
     de8:	87 e0       	ldi	r24, 0x07	; 7
     dea:	44 0f       	add	r20, r20
     dec:	55 1f       	adc	r21, r21
     dee:	66 1f       	adc	r22, r22
     df0:	77 1f       	adc	r23, r23
     df2:	8a 95       	dec	r24
     df4:	d1 f7       	brne	.-12     	; 0xdea <__unpack_f+0xd4>
     df6:	70 64       	ori	r23, 0x40	; 64
     df8:	14 96       	adiw	r26, 0x04	; 4
     dfa:	4d 93       	st	X+, r20
     dfc:	5d 93       	st	X+, r21
     dfe:	6d 93       	st	X+, r22
     e00:	7c 93       	st	X, r23
     e02:	17 97       	sbiw	r26, 0x07	; 7
     e04:	08 95       	ret

00000e06 <__fpcmp_parts_f>:
     e06:	1f 93       	push	r17
     e08:	dc 01       	movw	r26, r24
     e0a:	fb 01       	movw	r30, r22
     e0c:	9c 91       	ld	r25, X
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	08 f4       	brcc	.+2      	; 0xe14 <__fpcmp_parts_f+0xe>
     e12:	47 c0       	rjmp	.+142    	; 0xea2 <__fpcmp_parts_f+0x9c>
     e14:	80 81       	ld	r24, Z
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	08 f4       	brcc	.+2      	; 0xe1c <__fpcmp_parts_f+0x16>
     e1a:	43 c0       	rjmp	.+134    	; 0xea2 <__fpcmp_parts_f+0x9c>
     e1c:	94 30       	cpi	r25, 0x04	; 4
     e1e:	51 f4       	brne	.+20     	; 0xe34 <__fpcmp_parts_f+0x2e>
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	1c 91       	ld	r17, X
     e24:	84 30       	cpi	r24, 0x04	; 4
     e26:	99 f5       	brne	.+102    	; 0xe8e <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	68 2f       	mov	r22, r24
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	61 1b       	sub	r22, r17
     e30:	71 09       	sbc	r23, r1
     e32:	3f c0       	rjmp	.+126    	; 0xeb2 <__fpcmp_parts_f+0xac>
     e34:	84 30       	cpi	r24, 0x04	; 4
     e36:	21 f0       	breq	.+8      	; 0xe40 <__fpcmp_parts_f+0x3a>
     e38:	92 30       	cpi	r25, 0x02	; 2
     e3a:	31 f4       	brne	.+12     	; 0xe48 <__fpcmp_parts_f+0x42>
     e3c:	82 30       	cpi	r24, 0x02	; 2
     e3e:	b9 f1       	breq	.+110    	; 0xeae <__fpcmp_parts_f+0xa8>
     e40:	81 81       	ldd	r24, Z+1	; 0x01
     e42:	88 23       	and	r24, r24
     e44:	89 f1       	breq	.+98     	; 0xea8 <__fpcmp_parts_f+0xa2>
     e46:	2d c0       	rjmp	.+90     	; 0xea2 <__fpcmp_parts_f+0x9c>
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	1c 91       	ld	r17, X
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	f1 f0       	breq	.+60     	; 0xe8e <__fpcmp_parts_f+0x88>
     e52:	81 81       	ldd	r24, Z+1	; 0x01
     e54:	18 17       	cp	r17, r24
     e56:	d9 f4       	brne	.+54     	; 0xe8e <__fpcmp_parts_f+0x88>
     e58:	12 96       	adiw	r26, 0x02	; 2
     e5a:	2d 91       	ld	r18, X+
     e5c:	3c 91       	ld	r19, X
     e5e:	13 97       	sbiw	r26, 0x03	; 3
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	93 81       	ldd	r25, Z+3	; 0x03
     e64:	82 17       	cp	r24, r18
     e66:	93 07       	cpc	r25, r19
     e68:	94 f0       	brlt	.+36     	; 0xe8e <__fpcmp_parts_f+0x88>
     e6a:	28 17       	cp	r18, r24
     e6c:	39 07       	cpc	r19, r25
     e6e:	bc f0       	brlt	.+46     	; 0xe9e <__fpcmp_parts_f+0x98>
     e70:	14 96       	adiw	r26, 0x04	; 4
     e72:	8d 91       	ld	r24, X+
     e74:	9d 91       	ld	r25, X+
     e76:	0d 90       	ld	r0, X+
     e78:	bc 91       	ld	r27, X
     e7a:	a0 2d       	mov	r26, r0
     e7c:	24 81       	ldd	r18, Z+4	; 0x04
     e7e:	35 81       	ldd	r19, Z+5	; 0x05
     e80:	46 81       	ldd	r20, Z+6	; 0x06
     e82:	57 81       	ldd	r21, Z+7	; 0x07
     e84:	28 17       	cp	r18, r24
     e86:	39 07       	cpc	r19, r25
     e88:	4a 07       	cpc	r20, r26
     e8a:	5b 07       	cpc	r21, r27
     e8c:	18 f4       	brcc	.+6      	; 0xe94 <__fpcmp_parts_f+0x8e>
     e8e:	11 23       	and	r17, r17
     e90:	41 f0       	breq	.+16     	; 0xea2 <__fpcmp_parts_f+0x9c>
     e92:	0a c0       	rjmp	.+20     	; 0xea8 <__fpcmp_parts_f+0xa2>
     e94:	82 17       	cp	r24, r18
     e96:	93 07       	cpc	r25, r19
     e98:	a4 07       	cpc	r26, r20
     e9a:	b5 07       	cpc	r27, r21
     e9c:	40 f4       	brcc	.+16     	; 0xeae <__fpcmp_parts_f+0xa8>
     e9e:	11 23       	and	r17, r17
     ea0:	19 f0       	breq	.+6      	; 0xea8 <__fpcmp_parts_f+0xa2>
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <__fpcmp_parts_f+0xac>
     ea8:	6f ef       	ldi	r22, 0xFF	; 255
     eaa:	7f ef       	ldi	r23, 0xFF	; 255
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <__fpcmp_parts_f+0xac>
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	cb 01       	movw	r24, r22
     eb4:	1f 91       	pop	r17
     eb6:	08 95       	ret

00000eb8 <LED_LedInit>:


/* Function Definitions */


void LED_LedInit( uint8 Port_Id , uint8 Pin_Id ){
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <LED_LedInit+0x6>
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_SetPinDirection( Port_Id , Pin_Id , PIN_OUTPUT );
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	6a 81       	ldd	r22, Y+2	; 0x02
     eca:	41 e0       	ldi	r20, 0x01	; 1
     ecc:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <GPIO_SetPinDirection>
}
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <LED_LedOn>:

/****************************************************************************************/

void LED_LedOn( uint8 Port_Id , uint8 Pin_Id ){
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <LED_LedOn+0x6>
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_WritePinValue( Port_Id , Pin_Id , LOGIC_HIGH );
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	6a 81       	ldd	r22, Y+2	; 0x02
     eec:	41 e0       	ldi	r20, 0x01	; 1
     eee:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <LED_LedOff>:

/****************************************************************************************/

void LED_LedOff( uint8 Port_Id , uint8 Pin_Id ){
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <LED_LedOff+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_WritePinValue( Port_Id , Pin_Id , LOGIC_LOW );
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	6a 81       	ldd	r22, Y+2	; 0x02
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <LCD_SendCommand>:


/* Function Definitions */


void LCD_SendCommand( uint8 Command ){
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	e9 97       	sbiw	r28, 0x39	; 57
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	89 af       	std	Y+57, r24	; 0x39
	GPIO_WritePinValue( LCD_ControlPort , RS , LOGIC_LOW );
     f34:	80 91 9f 01 	lds	r24, 0x019F
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
	GPIO_WritePinValue( LCD_ControlPort , RW , LOGIC_LOW );
     f40:	80 91 9f 01 	lds	r24, 0x019F
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>

	if( LCD_Mode == Mode_4_BIT ){
     f4c:	80 91 9e 01 	lds	r24, 0x019E
     f50:	88 23       	and	r24, r24
     f52:	09 f0       	breq	.+2      	; 0xf56 <LCD_SendCommand+0x38>
     f54:	3e c1       	rjmp	.+636    	; 0x11d2 <LCD_SendCommand+0x2b4>
		GPIO_WritePinValue( LCD_DataPort , D4 , RED_BIT( Command , 4 ) );
     f56:	20 91 a0 01 	lds	r18, 0x01A0
     f5a:	89 ad       	ldd	r24, Y+57	; 0x39
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	80 71       	andi	r24, 0x10	; 16
     f62:	90 70       	andi	r25, 0x00	; 0
     f64:	95 95       	asr	r25
     f66:	87 95       	ror	r24
     f68:	95 95       	asr	r25
     f6a:	87 95       	ror	r24
     f6c:	95 95       	asr	r25
     f6e:	87 95       	ror	r24
     f70:	95 95       	asr	r25
     f72:	87 95       	ror	r24
     f74:	98 2f       	mov	r25, r24
     f76:	82 2f       	mov	r24, r18
     f78:	64 e0       	ldi	r22, 0x04	; 4
     f7a:	49 2f       	mov	r20, r25
     f7c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_DataPort , D5 , RED_BIT( Command , 5 ) );
     f80:	20 91 a0 01 	lds	r18, 0x01A0
     f84:	89 ad       	ldd	r24, Y+57	; 0x39
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	80 72       	andi	r24, 0x20	; 32
     f8c:	90 70       	andi	r25, 0x00	; 0
     f8e:	95 95       	asr	r25
     f90:	87 95       	ror	r24
     f92:	95 95       	asr	r25
     f94:	87 95       	ror	r24
     f96:	95 95       	asr	r25
     f98:	87 95       	ror	r24
     f9a:	95 95       	asr	r25
     f9c:	87 95       	ror	r24
     f9e:	95 95       	asr	r25
     fa0:	87 95       	ror	r24
     fa2:	98 2f       	mov	r25, r24
     fa4:	82 2f       	mov	r24, r18
     fa6:	65 e0       	ldi	r22, 0x05	; 5
     fa8:	49 2f       	mov	r20, r25
     faa:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_DataPort , D6 , RED_BIT( Command , 6 ) );
     fae:	20 91 a0 01 	lds	r18, 0x01A0
     fb2:	89 ad       	ldd	r24, Y+57	; 0x39
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	80 74       	andi	r24, 0x40	; 64
     fba:	90 70       	andi	r25, 0x00	; 0
     fbc:	08 2e       	mov	r0, r24
     fbe:	89 2f       	mov	r24, r25
     fc0:	00 0c       	add	r0, r0
     fc2:	88 1f       	adc	r24, r24
     fc4:	99 0b       	sbc	r25, r25
     fc6:	00 0c       	add	r0, r0
     fc8:	88 1f       	adc	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	98 2f       	mov	r25, r24
     fce:	82 2f       	mov	r24, r18
     fd0:	66 e0       	ldi	r22, 0x06	; 6
     fd2:	49 2f       	mov	r20, r25
     fd4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_DataPort , D7 , RED_BIT( Command , 7 ) );
     fd8:	90 91 a0 01 	lds	r25, 0x01A0
     fdc:	89 ad       	ldd	r24, Y+57	; 0x39
     fde:	28 2f       	mov	r18, r24
     fe0:	22 1f       	adc	r18, r18
     fe2:	22 27       	eor	r18, r18
     fe4:	22 1f       	adc	r18, r18
     fe6:	89 2f       	mov	r24, r25
     fe8:	67 e0       	ldi	r22, 0x07	; 7
     fea:	42 2f       	mov	r20, r18
     fec:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_ControlPort , E , LOGIC_HIGH );
     ff0:	80 91 9f 01 	lds	r24, 0x019F
     ff4:	62 e0       	ldi	r22, 0x02	; 2
     ff6:	41 e0       	ldi	r20, 0x01	; 1
     ff8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a0 e8       	ldi	r26, 0x80	; 128
    1002:	bf e3       	ldi	r27, 0x3F	; 63
    1004:	8d ab       	std	Y+53, r24	; 0x35
    1006:	9e ab       	std	Y+54, r25	; 0x36
    1008:	af ab       	std	Y+55, r26	; 0x37
    100a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100c:	6d a9       	ldd	r22, Y+53	; 0x35
    100e:	7e a9       	ldd	r23, Y+54	; 0x36
    1010:	8f a9       	ldd	r24, Y+55	; 0x37
    1012:	98 ad       	ldd	r25, Y+56	; 0x38
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	4a e7       	ldi	r20, 0x7A	; 122
    101a:	53 e4       	ldi	r21, 0x43	; 67
    101c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	89 ab       	std	Y+49, r24	; 0x31
    1026:	9a ab       	std	Y+50, r25	; 0x32
    1028:	ab ab       	std	Y+51, r26	; 0x33
    102a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    102c:	69 a9       	ldd	r22, Y+49	; 0x31
    102e:	7a a9       	ldd	r23, Y+50	; 0x32
    1030:	8b a9       	ldd	r24, Y+51	; 0x33
    1032:	9c a9       	ldd	r25, Y+52	; 0x34
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e8       	ldi	r20, 0x80	; 128
    103a:	5f e3       	ldi	r21, 0x3F	; 63
    103c:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1040:	88 23       	and	r24, r24
    1042:	2c f4       	brge	.+10     	; 0x104e <LCD_SendCommand+0x130>
		__ticks = 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	98 ab       	std	Y+48, r25	; 0x30
    104a:	8f a7       	std	Y+47, r24	; 0x2f
    104c:	3f c0       	rjmp	.+126    	; 0x10cc <LCD_SendCommand+0x1ae>
	else if (__tmp > 65535)
    104e:	69 a9       	ldd	r22, Y+49	; 0x31
    1050:	7a a9       	ldd	r23, Y+50	; 0x32
    1052:	8b a9       	ldd	r24, Y+51	; 0x33
    1054:	9c a9       	ldd	r25, Y+52	; 0x34
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	3f ef       	ldi	r19, 0xFF	; 255
    105a:	4f e7       	ldi	r20, 0x7F	; 127
    105c:	57 e4       	ldi	r21, 0x47	; 71
    105e:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1062:	18 16       	cp	r1, r24
    1064:	4c f5       	brge	.+82     	; 0x10b8 <LCD_SendCommand+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1066:	6d a9       	ldd	r22, Y+53	; 0x35
    1068:	7e a9       	ldd	r23, Y+54	; 0x36
    106a:	8f a9       	ldd	r24, Y+55	; 0x37
    106c:	98 ad       	ldd	r25, Y+56	; 0x38
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e2       	ldi	r20, 0x20	; 32
    1074:	51 e4       	ldi	r21, 0x41	; 65
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	98 ab       	std	Y+48, r25	; 0x30
    108c:	8f a7       	std	Y+47, r24	; 0x2f
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <LCD_SendCommand+0x190>
    1090:	89 e1       	ldi	r24, 0x19	; 25
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9e a7       	std	Y+46, r25	; 0x2e
    1096:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1098:	8d a5       	ldd	r24, Y+45	; 0x2d
    109a:	9e a5       	ldd	r25, Y+46	; 0x2e
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <LCD_SendCommand+0x17e>
    10a0:	9e a7       	std	Y+46, r25	; 0x2e
    10a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a6:	98 a9       	ldd	r25, Y+48	; 0x30
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	98 ab       	std	Y+48, r25	; 0x30
    10ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    10b0:	98 a9       	ldd	r25, Y+48	; 0x30
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	69 f7       	brne	.-38     	; 0x1090 <LCD_SendCommand+0x172>
    10b6:	14 c0       	rjmp	.+40     	; 0x10e0 <LCD_SendCommand+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b8:	69 a9       	ldd	r22, Y+49	; 0x31
    10ba:	7a a9       	ldd	r23, Y+50	; 0x32
    10bc:	8b a9       	ldd	r24, Y+51	; 0x33
    10be:	9c a9       	ldd	r25, Y+52	; 0x34
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	98 ab       	std	Y+48, r25	; 0x30
    10ca:	8f a7       	std	Y+47, r24	; 0x2f
    10cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ce:	98 a9       	ldd	r25, Y+48	; 0x30
    10d0:	9c a7       	std	Y+44, r25	; 0x2c
    10d2:	8b a7       	std	Y+43, r24	; 0x2b
    10d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    10d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <LCD_SendCommand+0x1ba>
    10dc:	9c a7       	std	Y+44, r25	; 0x2c
    10de:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		GPIO_WritePinValue( LCD_ControlPort , E , LOGIC_LOW );
    10e0:	80 91 9f 01 	lds	r24, 0x019F
    10e4:	62 e0       	ldi	r22, 0x02	; 2
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a0 e8       	ldi	r26, 0x80	; 128
    10f2:	bf e3       	ldi	r27, 0x3F	; 63
    10f4:	8f a3       	std	Y+39, r24	; 0x27
    10f6:	98 a7       	std	Y+40, r25	; 0x28
    10f8:	a9 a7       	std	Y+41, r26	; 0x29
    10fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fc:	6f a1       	ldd	r22, Y+39	; 0x27
    10fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1100:	89 a5       	ldd	r24, Y+41	; 0x29
    1102:	9a a5       	ldd	r25, Y+42	; 0x2a
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4a e7       	ldi	r20, 0x7A	; 122
    110a:	53 e4       	ldi	r21, 0x43	; 67
    110c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	8b a3       	std	Y+35, r24	; 0x23
    1116:	9c a3       	std	Y+36, r25	; 0x24
    1118:	ad a3       	std	Y+37, r26	; 0x25
    111a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    111c:	6b a1       	ldd	r22, Y+35	; 0x23
    111e:	7c a1       	ldd	r23, Y+36	; 0x24
    1120:	8d a1       	ldd	r24, Y+37	; 0x25
    1122:	9e a1       	ldd	r25, Y+38	; 0x26
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e8       	ldi	r20, 0x80	; 128
    112a:	5f e3       	ldi	r21, 0x3F	; 63
    112c:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1130:	88 23       	and	r24, r24
    1132:	2c f4       	brge	.+10     	; 0x113e <LCD_SendCommand+0x220>
		__ticks = 1;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	9a a3       	std	Y+34, r25	; 0x22
    113a:	89 a3       	std	Y+33, r24	; 0x21
    113c:	3f c0       	rjmp	.+126    	; 0x11bc <LCD_SendCommand+0x29e>
	else if (__tmp > 65535)
    113e:	6b a1       	ldd	r22, Y+35	; 0x23
    1140:	7c a1       	ldd	r23, Y+36	; 0x24
    1142:	8d a1       	ldd	r24, Y+37	; 0x25
    1144:	9e a1       	ldd	r25, Y+38	; 0x26
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	3f ef       	ldi	r19, 0xFF	; 255
    114a:	4f e7       	ldi	r20, 0x7F	; 127
    114c:	57 e4       	ldi	r21, 0x47	; 71
    114e:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1152:	18 16       	cp	r1, r24
    1154:	4c f5       	brge	.+82     	; 0x11a8 <LCD_SendCommand+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1156:	6f a1       	ldd	r22, Y+39	; 0x27
    1158:	78 a5       	ldd	r23, Y+40	; 0x28
    115a:	89 a5       	ldd	r24, Y+41	; 0x29
    115c:	9a a5       	ldd	r25, Y+42	; 0x2a
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e2       	ldi	r20, 0x20	; 32
    1164:	51 e4       	ldi	r21, 0x41	; 65
    1166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	9a a3       	std	Y+34, r25	; 0x22
    117c:	89 a3       	std	Y+33, r24	; 0x21
    117e:	0f c0       	rjmp	.+30     	; 0x119e <LCD_SendCommand+0x280>
    1180:	89 e1       	ldi	r24, 0x19	; 25
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	98 a3       	std	Y+32, r25	; 0x20
    1186:	8f 8f       	std	Y+31, r24	; 0x1f
    1188:	8f 8d       	ldd	r24, Y+31	; 0x1f
    118a:	98 a1       	ldd	r25, Y+32	; 0x20
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <LCD_SendCommand+0x26e>
    1190:	98 a3       	std	Y+32, r25	; 0x20
    1192:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1194:	89 a1       	ldd	r24, Y+33	; 0x21
    1196:	9a a1       	ldd	r25, Y+34	; 0x22
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	9a a3       	std	Y+34, r25	; 0x22
    119c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119e:	89 a1       	ldd	r24, Y+33	; 0x21
    11a0:	9a a1       	ldd	r25, Y+34	; 0x22
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	69 f7       	brne	.-38     	; 0x1180 <LCD_SendCommand+0x262>
    11a6:	0a c1       	rjmp	.+532    	; 0x13bc <LCD_SendCommand+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a8:	6b a1       	ldd	r22, Y+35	; 0x23
    11aa:	7c a1       	ldd	r23, Y+36	; 0x24
    11ac:	8d a1       	ldd	r24, Y+37	; 0x25
    11ae:	9e a1       	ldd	r25, Y+38	; 0x26
    11b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	9a a3       	std	Y+34, r25	; 0x22
    11ba:	89 a3       	std	Y+33, r24	; 0x21
    11bc:	89 a1       	ldd	r24, Y+33	; 0x21
    11be:	9a a1       	ldd	r25, Y+34	; 0x22
    11c0:	9e 8f       	std	Y+30, r25	; 0x1e
    11c2:	8d 8f       	std	Y+29, r24	; 0x1d
    11c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <LCD_SendCommand+0x2aa>
    11cc:	9e 8f       	std	Y+30, r25	; 0x1e
    11ce:	8d 8f       	std	Y+29, r24	; 0x1d
    11d0:	f5 c0       	rjmp	.+490    	; 0x13bc <LCD_SendCommand+0x49e>
		_delay_ms(1);
	}
	else{
		GPIO_WritePortValue( LCD_DataPort , Command );
    11d2:	80 91 a0 01 	lds	r24, 0x01A0
    11d6:	69 ad       	ldd	r22, Y+57	; 0x39
    11d8:	0e 94 af 18 	call	0x315e	; 0x315e <GPIO_WritePortValue>
		GPIO_WritePinValue( LCD_ControlPort , E , LOGIC_HIGH );
    11dc:	80 91 9f 01 	lds	r24, 0x019F
    11e0:	62 e0       	ldi	r22, 0x02	; 2
    11e2:	41 e0       	ldi	r20, 0x01	; 1
    11e4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	a0 e8       	ldi	r26, 0x80	; 128
    11ee:	bf e3       	ldi	r27, 0x3F	; 63
    11f0:	89 8f       	std	Y+25, r24	; 0x19
    11f2:	9a 8f       	std	Y+26, r25	; 0x1a
    11f4:	ab 8f       	std	Y+27, r26	; 0x1b
    11f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f8:	69 8d       	ldd	r22, Y+25	; 0x19
    11fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	4a e7       	ldi	r20, 0x7A	; 122
    1206:	53 e4       	ldi	r21, 0x43	; 67
    1208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	8d 8b       	std	Y+21, r24	; 0x15
    1212:	9e 8b       	std	Y+22, r25	; 0x16
    1214:	af 8b       	std	Y+23, r26	; 0x17
    1216:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1218:	6d 89       	ldd	r22, Y+21	; 0x15
    121a:	7e 89       	ldd	r23, Y+22	; 0x16
    121c:	8f 89       	ldd	r24, Y+23	; 0x17
    121e:	98 8d       	ldd	r25, Y+24	; 0x18
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e8       	ldi	r20, 0x80	; 128
    1226:	5f e3       	ldi	r21, 0x3F	; 63
    1228:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    122c:	88 23       	and	r24, r24
    122e:	2c f4       	brge	.+10     	; 0x123a <LCD_SendCommand+0x31c>
		__ticks = 1;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9c 8b       	std	Y+20, r25	; 0x14
    1236:	8b 8b       	std	Y+19, r24	; 0x13
    1238:	3f c0       	rjmp	.+126    	; 0x12b8 <LCD_SendCommand+0x39a>
	else if (__tmp > 65535)
    123a:	6d 89       	ldd	r22, Y+21	; 0x15
    123c:	7e 89       	ldd	r23, Y+22	; 0x16
    123e:	8f 89       	ldd	r24, Y+23	; 0x17
    1240:	98 8d       	ldd	r25, Y+24	; 0x18
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	3f ef       	ldi	r19, 0xFF	; 255
    1246:	4f e7       	ldi	r20, 0x7F	; 127
    1248:	57 e4       	ldi	r21, 0x47	; 71
    124a:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    124e:	18 16       	cp	r1, r24
    1250:	4c f5       	brge	.+82     	; 0x12a4 <LCD_SendCommand+0x386>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1252:	69 8d       	ldd	r22, Y+25	; 0x19
    1254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e2       	ldi	r20, 0x20	; 32
    1260:	51 e4       	ldi	r21, 0x41	; 65
    1262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9c 8b       	std	Y+20, r25	; 0x14
    1278:	8b 8b       	std	Y+19, r24	; 0x13
    127a:	0f c0       	rjmp	.+30     	; 0x129a <LCD_SendCommand+0x37c>
    127c:	89 e1       	ldi	r24, 0x19	; 25
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	9a 8b       	std	Y+18, r25	; 0x12
    1282:	89 8b       	std	Y+17, r24	; 0x11
    1284:	89 89       	ldd	r24, Y+17	; 0x11
    1286:	9a 89       	ldd	r25, Y+18	; 0x12
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <LCD_SendCommand+0x36a>
    128c:	9a 8b       	std	Y+18, r25	; 0x12
    128e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1290:	8b 89       	ldd	r24, Y+19	; 0x13
    1292:	9c 89       	ldd	r25, Y+20	; 0x14
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	9c 8b       	std	Y+20, r25	; 0x14
    1298:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129a:	8b 89       	ldd	r24, Y+19	; 0x13
    129c:	9c 89       	ldd	r25, Y+20	; 0x14
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	69 f7       	brne	.-38     	; 0x127c <LCD_SendCommand+0x35e>
    12a2:	14 c0       	rjmp	.+40     	; 0x12cc <LCD_SendCommand+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a4:	6d 89       	ldd	r22, Y+21	; 0x15
    12a6:	7e 89       	ldd	r23, Y+22	; 0x16
    12a8:	8f 89       	ldd	r24, Y+23	; 0x17
    12aa:	98 8d       	ldd	r25, Y+24	; 0x18
    12ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	9c 8b       	std	Y+20, r25	; 0x14
    12b6:	8b 8b       	std	Y+19, r24	; 0x13
    12b8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ba:	9c 89       	ldd	r25, Y+20	; 0x14
    12bc:	98 8b       	std	Y+16, r25	; 0x10
    12be:	8f 87       	std	Y+15, r24	; 0x0f
    12c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c2:	98 89       	ldd	r25, Y+16	; 0x10
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <LCD_SendCommand+0x3a6>
    12c8:	98 8b       	std	Y+16, r25	; 0x10
    12ca:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		GPIO_WritePinValue( LCD_ControlPort , E , LOGIC_LOW );
    12cc:	80 91 9f 01 	lds	r24, 0x019F
    12d0:	62 e0       	ldi	r22, 0x02	; 2
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a0 e8       	ldi	r26, 0x80	; 128
    12de:	bf e3       	ldi	r27, 0x3F	; 63
    12e0:	8b 87       	std	Y+11, r24	; 0x0b
    12e2:	9c 87       	std	Y+12, r25	; 0x0c
    12e4:	ad 87       	std	Y+13, r26	; 0x0d
    12e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	4a e7       	ldi	r20, 0x7A	; 122
    12f6:	53 e4       	ldi	r21, 0x43	; 67
    12f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	8f 83       	std	Y+7, r24	; 0x07
    1302:	98 87       	std	Y+8, r25	; 0x08
    1304:	a9 87       	std	Y+9, r26	; 0x09
    1306:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1308:	6f 81       	ldd	r22, Y+7	; 0x07
    130a:	78 85       	ldd	r23, Y+8	; 0x08
    130c:	89 85       	ldd	r24, Y+9	; 0x09
    130e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e8       	ldi	r20, 0x80	; 128
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    131c:	88 23       	and	r24, r24
    131e:	2c f4       	brge	.+10     	; 0x132a <LCD_SendCommand+0x40c>
		__ticks = 1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	3f c0       	rjmp	.+126    	; 0x13a8 <LCD_SendCommand+0x48a>
	else if (__tmp > 65535)
    132a:	6f 81       	ldd	r22, Y+7	; 0x07
    132c:	78 85       	ldd	r23, Y+8	; 0x08
    132e:	89 85       	ldd	r24, Y+9	; 0x09
    1330:	9a 85       	ldd	r25, Y+10	; 0x0a
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	3f ef       	ldi	r19, 0xFF	; 255
    1336:	4f e7       	ldi	r20, 0x7F	; 127
    1338:	57 e4       	ldi	r21, 0x47	; 71
    133a:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    133e:	18 16       	cp	r1, r24
    1340:	4c f5       	brge	.+82     	; 0x1394 <LCD_SendCommand+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1342:	6b 85       	ldd	r22, Y+11	; 0x0b
    1344:	7c 85       	ldd	r23, Y+12	; 0x0c
    1346:	8d 85       	ldd	r24, Y+13	; 0x0d
    1348:	9e 85       	ldd	r25, Y+14	; 0x0e
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
    136a:	0f c0       	rjmp	.+30     	; 0x138a <LCD_SendCommand+0x46c>
    136c:	89 e1       	ldi	r24, 0x19	; 25
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9c 83       	std	Y+4, r25	; 0x04
    1372:	8b 83       	std	Y+3, r24	; 0x03
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <LCD_SendCommand+0x45a>
    137c:	9c 83       	std	Y+4, r25	; 0x04
    137e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	9e 83       	std	Y+6, r25	; 0x06
    1388:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	69 f7       	brne	.-38     	; 0x136c <LCD_SendCommand+0x44e>
    1392:	14 c0       	rjmp	.+40     	; 0x13bc <LCD_SendCommand+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1394:	6f 81       	ldd	r22, Y+7	; 0x07
    1396:	78 85       	ldd	r23, Y+8	; 0x08
    1398:	89 85       	ldd	r24, Y+9	; 0x09
    139a:	9a 85       	ldd	r25, Y+10	; 0x0a
    139c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <LCD_SendCommand+0x496>
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
}
    13bc:	e9 96       	adiw	r28, 0x39	; 57
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <LCD_SendData>:

void LCD_SendData( uint8 Data ){
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	c5 55       	subi	r28, 0x55	; 85
    13dc:	d0 40       	sbci	r29, 0x00	; 0
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	fe 01       	movw	r30, r28
    13ea:	eb 5a       	subi	r30, 0xAB	; 171
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 83       	st	Z, r24
	GPIO_WritePinValue( LCD_ControlPort , RS , LOGIC_HIGH );
    13f0:	80 91 9f 01 	lds	r24, 0x019F
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	41 e0       	ldi	r20, 0x01	; 1
    13f8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
	GPIO_WritePinValue( LCD_ControlPort , RW , LOGIC_LOW );
    13fc:	80 91 9f 01 	lds	r24, 0x019F
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>

	if( LCD_Mode == Mode_4_BIT ){
    1408:	80 91 9e 01 	lds	r24, 0x019E
    140c:	88 23       	and	r24, r24
    140e:	09 f0       	breq	.+2      	; 0x1412 <LCD_SendData+0x44>
    1410:	d7 c2       	rjmp	.+1454   	; 0x19c0 <LCD_SendData+0x5f2>
		GPIO_WritePinValue( LCD_DataPort , D4 , RED_BIT( Data , 4 ) );
    1412:	20 91 a0 01 	lds	r18, 0x01A0
    1416:	fe 01       	movw	r30, r28
    1418:	eb 5a       	subi	r30, 0xAB	; 171
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	80 81       	ld	r24, Z
    141e:	88 2f       	mov	r24, r24
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	80 71       	andi	r24, 0x10	; 16
    1424:	90 70       	andi	r25, 0x00	; 0
    1426:	95 95       	asr	r25
    1428:	87 95       	ror	r24
    142a:	95 95       	asr	r25
    142c:	87 95       	ror	r24
    142e:	95 95       	asr	r25
    1430:	87 95       	ror	r24
    1432:	95 95       	asr	r25
    1434:	87 95       	ror	r24
    1436:	98 2f       	mov	r25, r24
    1438:	82 2f       	mov	r24, r18
    143a:	64 e0       	ldi	r22, 0x04	; 4
    143c:	49 2f       	mov	r20, r25
    143e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_DataPort , D5 , RED_BIT( Data , 5 ) );
    1442:	20 91 a0 01 	lds	r18, 0x01A0
    1446:	fe 01       	movw	r30, r28
    1448:	eb 5a       	subi	r30, 0xAB	; 171
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	80 81       	ld	r24, Z
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	80 72       	andi	r24, 0x20	; 32
    1454:	90 70       	andi	r25, 0x00	; 0
    1456:	95 95       	asr	r25
    1458:	87 95       	ror	r24
    145a:	95 95       	asr	r25
    145c:	87 95       	ror	r24
    145e:	95 95       	asr	r25
    1460:	87 95       	ror	r24
    1462:	95 95       	asr	r25
    1464:	87 95       	ror	r24
    1466:	95 95       	asr	r25
    1468:	87 95       	ror	r24
    146a:	98 2f       	mov	r25, r24
    146c:	82 2f       	mov	r24, r18
    146e:	65 e0       	ldi	r22, 0x05	; 5
    1470:	49 2f       	mov	r20, r25
    1472:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_DataPort , D6 , RED_BIT( Data , 6 ) );
    1476:	20 91 a0 01 	lds	r18, 0x01A0
    147a:	fe 01       	movw	r30, r28
    147c:	eb 5a       	subi	r30, 0xAB	; 171
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 81       	ld	r24, Z
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	80 74       	andi	r24, 0x40	; 64
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	08 2e       	mov	r0, r24
    148c:	89 2f       	mov	r24, r25
    148e:	00 0c       	add	r0, r0
    1490:	88 1f       	adc	r24, r24
    1492:	99 0b       	sbc	r25, r25
    1494:	00 0c       	add	r0, r0
    1496:	88 1f       	adc	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	98 2f       	mov	r25, r24
    149c:	82 2f       	mov	r24, r18
    149e:	66 e0       	ldi	r22, 0x06	; 6
    14a0:	49 2f       	mov	r20, r25
    14a2:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_DataPort , D7 , RED_BIT( Data , 7 ) );
    14a6:	20 91 a0 01 	lds	r18, 0x01A0
    14aa:	fe 01       	movw	r30, r28
    14ac:	eb 5a       	subi	r30, 0xAB	; 171
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	80 81       	ld	r24, Z
    14b2:	98 2f       	mov	r25, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	99 27       	eor	r25, r25
    14b8:	99 1f       	adc	r25, r25
    14ba:	82 2f       	mov	r24, r18
    14bc:	67 e0       	ldi	r22, 0x07	; 7
    14be:	49 2f       	mov	r20, r25
    14c0:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_ControlPort , E , LOGIC_HIGH );
    14c4:	80 91 9f 01 	lds	r24, 0x019F
    14c8:	62 e0       	ldi	r22, 0x02	; 2
    14ca:	41 e0       	ldi	r20, 0x01	; 1
    14cc:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
    14d0:	fe 01       	movw	r30, r28
    14d2:	ef 5a       	subi	r30, 0xAF	; 175
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	a0 e8       	ldi	r26, 0x80	; 128
    14dc:	bf e3       	ldi	r27, 0x3F	; 63
    14de:	80 83       	st	Z, r24
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	a2 83       	std	Z+2, r26	; 0x02
    14e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e6:	8e 01       	movw	r16, r28
    14e8:	03 5b       	subi	r16, 0xB3	; 179
    14ea:	1f 4f       	sbci	r17, 0xFF	; 255
    14ec:	fe 01       	movw	r30, r28
    14ee:	ef 5a       	subi	r30, 0xAF	; 175
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4a e7       	ldi	r20, 0x7A	; 122
    1500:	53 e4       	ldi	r21, 0x43	; 67
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	f8 01       	movw	r30, r16
    150c:	80 83       	st	Z, r24
    150e:	91 83       	std	Z+1, r25	; 0x01
    1510:	a2 83       	std	Z+2, r26	; 0x02
    1512:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1514:	fe 01       	movw	r30, r28
    1516:	e3 5b       	subi	r30, 0xB3	; 179
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e8       	ldi	r20, 0x80	; 128
    1528:	5f e3       	ldi	r21, 0x3F	; 63
    152a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    152e:	88 23       	and	r24, r24
    1530:	44 f4       	brge	.+16     	; 0x1542 <LCD_SendData+0x174>
		__ticks = 1;
    1532:	fe 01       	movw	r30, r28
    1534:	e5 5b       	subi	r30, 0xB5	; 181
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	80 83       	st	Z, r24
    1540:	64 c0       	rjmp	.+200    	; 0x160a <LCD_SendData+0x23c>
	else if (__tmp > 65535)
    1542:	fe 01       	movw	r30, r28
    1544:	e3 5b       	subi	r30, 0xB3	; 179
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	3f ef       	ldi	r19, 0xFF	; 255
    1554:	4f e7       	ldi	r20, 0x7F	; 127
    1556:	57 e4       	ldi	r21, 0x47	; 71
    1558:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    155c:	18 16       	cp	r1, r24
    155e:	0c f0       	brlt	.+2      	; 0x1562 <LCD_SendData+0x194>
    1560:	43 c0       	rjmp	.+134    	; 0x15e8 <LCD_SendData+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	fe 01       	movw	r30, r28
    1564:	ef 5a       	subi	r30, 0xAF	; 175
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	93 81       	ldd	r25, Z+3	; 0x03
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e2       	ldi	r20, 0x20	; 32
    1576:	51 e4       	ldi	r21, 0x41	; 65
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	8e 01       	movw	r16, r28
    1582:	05 5b       	subi	r16, 0xB5	; 181
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	f8 01       	movw	r30, r16
    1594:	91 83       	std	Z+1, r25	; 0x01
    1596:	80 83       	st	Z, r24
    1598:	1f c0       	rjmp	.+62     	; 0x15d8 <LCD_SendData+0x20a>
    159a:	fe 01       	movw	r30, r28
    159c:	e7 5b       	subi	r30, 0xB7	; 183
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	89 e1       	ldi	r24, 0x19	; 25
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	80 83       	st	Z, r24
    15a8:	fe 01       	movw	r30, r28
    15aa:	e7 5b       	subi	r30, 0xB7	; 183
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	80 81       	ld	r24, Z
    15b0:	91 81       	ldd	r25, Z+1	; 0x01
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <LCD_SendData+0x1e4>
    15b6:	fe 01       	movw	r30, r28
    15b8:	e7 5b       	subi	r30, 0xB7	; 183
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	de 01       	movw	r26, r28
    15c2:	a5 5b       	subi	r26, 0xB5	; 181
    15c4:	bf 4f       	sbci	r27, 0xFF	; 255
    15c6:	fe 01       	movw	r30, r28
    15c8:	e5 5b       	subi	r30, 0xB5	; 181
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	9c 93       	st	X, r25
    15d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	fe 01       	movw	r30, r28
    15da:	e5 5b       	subi	r30, 0xB5	; 181
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	80 81       	ld	r24, Z
    15e0:	91 81       	ldd	r25, Z+1	; 0x01
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	d1 f6       	brne	.-76     	; 0x159a <LCD_SendData+0x1cc>
    15e6:	27 c0       	rjmp	.+78     	; 0x1636 <LCD_SendData+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e8:	8e 01       	movw	r16, r28
    15ea:	05 5b       	subi	r16, 0xB5	; 181
    15ec:	1f 4f       	sbci	r17, 0xFF	; 255
    15ee:	fe 01       	movw	r30, r28
    15f0:	e3 5b       	subi	r30, 0xB3	; 179
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	f8 01       	movw	r30, r16
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
    160a:	de 01       	movw	r26, r28
    160c:	a9 5b       	subi	r26, 0xB9	; 185
    160e:	bf 4f       	sbci	r27, 0xFF	; 255
    1610:	fe 01       	movw	r30, r28
    1612:	e5 5b       	subi	r30, 0xB5	; 181
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	8d 93       	st	X+, r24
    161c:	9c 93       	st	X, r25
    161e:	fe 01       	movw	r30, r28
    1620:	e9 5b       	subi	r30, 0xB9	; 185
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <LCD_SendData+0x25a>
    162c:	fe 01       	movw	r30, r28
    162e:	e9 5b       	subi	r30, 0xB9	; 185
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
		_delay_ms(1);
		GPIO_WritePinValue( LCD_ControlPort , E , LOGIC_LOW );
    1636:	80 91 9f 01 	lds	r24, 0x019F
    163a:	62 e0       	ldi	r22, 0x02	; 2
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
    1642:	fe 01       	movw	r30, r28
    1644:	ed 5b       	subi	r30, 0xBD	; 189
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a0 e8       	ldi	r26, 0x80	; 128
    164e:	bf e3       	ldi	r27, 0x3F	; 63
    1650:	80 83       	st	Z, r24
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	a2 83       	std	Z+2, r26	; 0x02
    1656:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1658:	8e 01       	movw	r16, r28
    165a:	01 5c       	subi	r16, 0xC1	; 193
    165c:	1f 4f       	sbci	r17, 0xFF	; 255
    165e:	fe 01       	movw	r30, r28
    1660:	ed 5b       	subi	r30, 0xBD	; 189
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	60 81       	ld	r22, Z
    1666:	71 81       	ldd	r23, Z+1	; 0x01
    1668:	82 81       	ldd	r24, Z+2	; 0x02
    166a:	93 81       	ldd	r25, Z+3	; 0x03
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	4a e7       	ldi	r20, 0x7A	; 122
    1672:	53 e4       	ldi	r21, 0x43	; 67
    1674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	f8 01       	movw	r30, r16
    167e:	80 83       	st	Z, r24
    1680:	91 83       	std	Z+1, r25	; 0x01
    1682:	a2 83       	std	Z+2, r26	; 0x02
    1684:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1686:	fe 01       	movw	r30, r28
    1688:	ff 96       	adiw	r30, 0x3f	; 63
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    169e:	88 23       	and	r24, r24
    16a0:	2c f4       	brge	.+10     	; 0x16ac <LCD_SendData+0x2de>
		__ticks = 1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9e af       	std	Y+62, r25	; 0x3e
    16a8:	8d af       	std	Y+61, r24	; 0x3d
    16aa:	46 c0       	rjmp	.+140    	; 0x1738 <LCD_SendData+0x36a>
	else if (__tmp > 65535)
    16ac:	fe 01       	movw	r30, r28
    16ae:	ff 96       	adiw	r30, 0x3f	; 63
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	3f ef       	ldi	r19, 0xFF	; 255
    16bc:	4f e7       	ldi	r20, 0x7F	; 127
    16be:	57 e4       	ldi	r21, 0x47	; 71
    16c0:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    16c4:	18 16       	cp	r1, r24
    16c6:	64 f5       	brge	.+88     	; 0x1720 <LCD_SendData+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c8:	fe 01       	movw	r30, r28
    16ca:	ed 5b       	subi	r30, 0xBD	; 189
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	60 81       	ld	r22, Z
    16d0:	71 81       	ldd	r23, Z+1	; 0x01
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e2       	ldi	r20, 0x20	; 32
    16dc:	51 e4       	ldi	r21, 0x41	; 65
    16de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	bc 01       	movw	r22, r24
    16e8:	cd 01       	movw	r24, r26
    16ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	9e af       	std	Y+62, r25	; 0x3e
    16f4:	8d af       	std	Y+61, r24	; 0x3d
    16f6:	0f c0       	rjmp	.+30     	; 0x1716 <LCD_SendData+0x348>
    16f8:	89 e1       	ldi	r24, 0x19	; 25
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9c af       	std	Y+60, r25	; 0x3c
    16fe:	8b af       	std	Y+59, r24	; 0x3b
    1700:	8b ad       	ldd	r24, Y+59	; 0x3b
    1702:	9c ad       	ldd	r25, Y+60	; 0x3c
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <LCD_SendData+0x336>
    1708:	9c af       	std	Y+60, r25	; 0x3c
    170a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170c:	8d ad       	ldd	r24, Y+61	; 0x3d
    170e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	9e af       	std	Y+62, r25	; 0x3e
    1714:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1716:	8d ad       	ldd	r24, Y+61	; 0x3d
    1718:	9e ad       	ldd	r25, Y+62	; 0x3e
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	69 f7       	brne	.-38     	; 0x16f8 <LCD_SendData+0x32a>
    171e:	16 c0       	rjmp	.+44     	; 0x174c <LCD_SendData+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1720:	fe 01       	movw	r30, r28
    1722:	ff 96       	adiw	r30, 0x3f	; 63
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	9e af       	std	Y+62, r25	; 0x3e
    1736:	8d af       	std	Y+61, r24	; 0x3d
    1738:	8d ad       	ldd	r24, Y+61	; 0x3d
    173a:	9e ad       	ldd	r25, Y+62	; 0x3e
    173c:	9a af       	std	Y+58, r25	; 0x3a
    173e:	89 af       	std	Y+57, r24	; 0x39
    1740:	89 ad       	ldd	r24, Y+57	; 0x39
    1742:	9a ad       	ldd	r25, Y+58	; 0x3a
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <LCD_SendData+0x376>
    1748:	9a af       	std	Y+58, r25	; 0x3a
    174a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		GPIO_WritePinValue( LCD_DataPort , D4 , RED_BIT( Data , 0 ) );
    174c:	20 91 a0 01 	lds	r18, 0x01A0
    1750:	fe 01       	movw	r30, r28
    1752:	eb 5a       	subi	r30, 0xAB	; 171
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	80 81       	ld	r24, Z
    1758:	98 2f       	mov	r25, r24
    175a:	91 70       	andi	r25, 0x01	; 1
    175c:	82 2f       	mov	r24, r18
    175e:	64 e0       	ldi	r22, 0x04	; 4
    1760:	49 2f       	mov	r20, r25
    1762:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_DataPort , D5 , RED_BIT( Data , 1 ) );
    1766:	20 91 a0 01 	lds	r18, 0x01A0
    176a:	fe 01       	movw	r30, r28
    176c:	eb 5a       	subi	r30, 0xAB	; 171
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	88 2f       	mov	r24, r24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	82 70       	andi	r24, 0x02	; 2
    1778:	90 70       	andi	r25, 0x00	; 0
    177a:	95 95       	asr	r25
    177c:	87 95       	ror	r24
    177e:	98 2f       	mov	r25, r24
    1780:	82 2f       	mov	r24, r18
    1782:	65 e0       	ldi	r22, 0x05	; 5
    1784:	49 2f       	mov	r20, r25
    1786:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_DataPort , D6 , RED_BIT( Data , 2 ) );
    178a:	20 91 a0 01 	lds	r18, 0x01A0
    178e:	fe 01       	movw	r30, r28
    1790:	eb 5a       	subi	r30, 0xAB	; 171
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	80 81       	ld	r24, Z
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	84 70       	andi	r24, 0x04	; 4
    179c:	90 70       	andi	r25, 0x00	; 0
    179e:	95 95       	asr	r25
    17a0:	87 95       	ror	r24
    17a2:	95 95       	asr	r25
    17a4:	87 95       	ror	r24
    17a6:	98 2f       	mov	r25, r24
    17a8:	82 2f       	mov	r24, r18
    17aa:	66 e0       	ldi	r22, 0x06	; 6
    17ac:	49 2f       	mov	r20, r25
    17ae:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_DataPort , D7 , RED_BIT( Data , 3 ) );
    17b2:	20 91 a0 01 	lds	r18, 0x01A0
    17b6:	fe 01       	movw	r30, r28
    17b8:	eb 5a       	subi	r30, 0xAB	; 171
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 81       	ld	r24, Z
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	88 70       	andi	r24, 0x08	; 8
    17c4:	90 70       	andi	r25, 0x00	; 0
    17c6:	95 95       	asr	r25
    17c8:	87 95       	ror	r24
    17ca:	95 95       	asr	r25
    17cc:	87 95       	ror	r24
    17ce:	95 95       	asr	r25
    17d0:	87 95       	ror	r24
    17d2:	98 2f       	mov	r25, r24
    17d4:	82 2f       	mov	r24, r18
    17d6:	67 e0       	ldi	r22, 0x07	; 7
    17d8:	49 2f       	mov	r20, r25
    17da:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
		GPIO_WritePinValue( LCD_ControlPort , E , LOGIC_HIGH );
    17de:	80 91 9f 01 	lds	r24, 0x019F
    17e2:	62 e0       	ldi	r22, 0x02	; 2
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a0 e8       	ldi	r26, 0x80	; 128
    17f0:	bf e3       	ldi	r27, 0x3F	; 63
    17f2:	8d ab       	std	Y+53, r24	; 0x35
    17f4:	9e ab       	std	Y+54, r25	; 0x36
    17f6:	af ab       	std	Y+55, r26	; 0x37
    17f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fa:	6d a9       	ldd	r22, Y+53	; 0x35
    17fc:	7e a9       	ldd	r23, Y+54	; 0x36
    17fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1800:	98 ad       	ldd	r25, Y+56	; 0x38
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	4a e7       	ldi	r20, 0x7A	; 122
    1808:	53 e4       	ldi	r21, 0x43	; 67
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	89 ab       	std	Y+49, r24	; 0x31
    1814:	9a ab       	std	Y+50, r25	; 0x32
    1816:	ab ab       	std	Y+51, r26	; 0x33
    1818:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    181a:	69 a9       	ldd	r22, Y+49	; 0x31
    181c:	7a a9       	ldd	r23, Y+50	; 0x32
    181e:	8b a9       	ldd	r24, Y+51	; 0x33
    1820:	9c a9       	ldd	r25, Y+52	; 0x34
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    182e:	88 23       	and	r24, r24
    1830:	2c f4       	brge	.+10     	; 0x183c <LCD_SendData+0x46e>
		__ticks = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	98 ab       	std	Y+48, r25	; 0x30
    1838:	8f a7       	std	Y+47, r24	; 0x2f
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <LCD_SendData+0x4ec>
	else if (__tmp > 65535)
    183c:	69 a9       	ldd	r22, Y+49	; 0x31
    183e:	7a a9       	ldd	r23, Y+50	; 0x32
    1840:	8b a9       	ldd	r24, Y+51	; 0x33
    1842:	9c a9       	ldd	r25, Y+52	; 0x34
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	3f ef       	ldi	r19, 0xFF	; 255
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	57 e4       	ldi	r21, 0x47	; 71
    184c:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1850:	18 16       	cp	r1, r24
    1852:	4c f5       	brge	.+82     	; 0x18a6 <LCD_SendData+0x4d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1854:	6d a9       	ldd	r22, Y+53	; 0x35
    1856:	7e a9       	ldd	r23, Y+54	; 0x36
    1858:	8f a9       	ldd	r24, Y+55	; 0x37
    185a:	98 ad       	ldd	r25, Y+56	; 0x38
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e2       	ldi	r20, 0x20	; 32
    1862:	51 e4       	ldi	r21, 0x41	; 65
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	98 ab       	std	Y+48, r25	; 0x30
    187a:	8f a7       	std	Y+47, r24	; 0x2f
    187c:	0f c0       	rjmp	.+30     	; 0x189c <LCD_SendData+0x4ce>
    187e:	89 e1       	ldi	r24, 0x19	; 25
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	9e a7       	std	Y+46, r25	; 0x2e
    1884:	8d a7       	std	Y+45, r24	; 0x2d
    1886:	8d a5       	ldd	r24, Y+45	; 0x2d
    1888:	9e a5       	ldd	r25, Y+46	; 0x2e
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_SendData+0x4bc>
    188e:	9e a7       	std	Y+46, r25	; 0x2e
    1890:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1892:	8f a5       	ldd	r24, Y+47	; 0x2f
    1894:	98 a9       	ldd	r25, Y+48	; 0x30
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	98 ab       	std	Y+48, r25	; 0x30
    189a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	8f a5       	ldd	r24, Y+47	; 0x2f
    189e:	98 a9       	ldd	r25, Y+48	; 0x30
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	69 f7       	brne	.-38     	; 0x187e <LCD_SendData+0x4b0>
    18a4:	14 c0       	rjmp	.+40     	; 0x18ce <LCD_SendData+0x500>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a6:	69 a9       	ldd	r22, Y+49	; 0x31
    18a8:	7a a9       	ldd	r23, Y+50	; 0x32
    18aa:	8b a9       	ldd	r24, Y+51	; 0x33
    18ac:	9c a9       	ldd	r25, Y+52	; 0x34
    18ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	98 ab       	std	Y+48, r25	; 0x30
    18b8:	8f a7       	std	Y+47, r24	; 0x2f
    18ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    18bc:	98 a9       	ldd	r25, Y+48	; 0x30
    18be:	9c a7       	std	Y+44, r25	; 0x2c
    18c0:	8b a7       	std	Y+43, r24	; 0x2b
    18c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    18c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <LCD_SendData+0x4f8>
    18ca:	9c a7       	std	Y+44, r25	; 0x2c
    18cc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		GPIO_WritePinValue( LCD_ControlPort , E , LOGIC_LOW );
    18ce:	80 91 9f 01 	lds	r24, 0x019F
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e8       	ldi	r26, 0x80	; 128
    18e0:	bf e3       	ldi	r27, 0x3F	; 63
    18e2:	8f a3       	std	Y+39, r24	; 0x27
    18e4:	98 a7       	std	Y+40, r25	; 0x28
    18e6:	a9 a7       	std	Y+41, r26	; 0x29
    18e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ea:	6f a1       	ldd	r22, Y+39	; 0x27
    18ec:	78 a5       	ldd	r23, Y+40	; 0x28
    18ee:	89 a5       	ldd	r24, Y+41	; 0x29
    18f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	4a e7       	ldi	r20, 0x7A	; 122
    18f8:	53 e4       	ldi	r21, 0x43	; 67
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	8b a3       	std	Y+35, r24	; 0x23
    1904:	9c a3       	std	Y+36, r25	; 0x24
    1906:	ad a3       	std	Y+37, r26	; 0x25
    1908:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    190a:	6b a1       	ldd	r22, Y+35	; 0x23
    190c:	7c a1       	ldd	r23, Y+36	; 0x24
    190e:	8d a1       	ldd	r24, Y+37	; 0x25
    1910:	9e a1       	ldd	r25, Y+38	; 0x26
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e8       	ldi	r20, 0x80	; 128
    1918:	5f e3       	ldi	r21, 0x3F	; 63
    191a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    191e:	88 23       	and	r24, r24
    1920:	2c f4       	brge	.+10     	; 0x192c <LCD_SendData+0x55e>
		__ticks = 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9a a3       	std	Y+34, r25	; 0x22
    1928:	89 a3       	std	Y+33, r24	; 0x21
    192a:	3f c0       	rjmp	.+126    	; 0x19aa <LCD_SendData+0x5dc>
	else if (__tmp > 65535)
    192c:	6b a1       	ldd	r22, Y+35	; 0x23
    192e:	7c a1       	ldd	r23, Y+36	; 0x24
    1930:	8d a1       	ldd	r24, Y+37	; 0x25
    1932:	9e a1       	ldd	r25, Y+38	; 0x26
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	4f e7       	ldi	r20, 0x7F	; 127
    193a:	57 e4       	ldi	r21, 0x47	; 71
    193c:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1940:	18 16       	cp	r1, r24
    1942:	4c f5       	brge	.+82     	; 0x1996 <LCD_SendData+0x5c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1944:	6f a1       	ldd	r22, Y+39	; 0x27
    1946:	78 a5       	ldd	r23, Y+40	; 0x28
    1948:	89 a5       	ldd	r24, Y+41	; 0x29
    194a:	9a a5       	ldd	r25, Y+42	; 0x2a
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e2       	ldi	r20, 0x20	; 32
    1952:	51 e4       	ldi	r21, 0x41	; 65
    1954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	bc 01       	movw	r22, r24
    195e:	cd 01       	movw	r24, r26
    1960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	9a a3       	std	Y+34, r25	; 0x22
    196a:	89 a3       	std	Y+33, r24	; 0x21
    196c:	0f c0       	rjmp	.+30     	; 0x198c <LCD_SendData+0x5be>
    196e:	89 e1       	ldi	r24, 0x19	; 25
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	98 a3       	std	Y+32, r25	; 0x20
    1974:	8f 8f       	std	Y+31, r24	; 0x1f
    1976:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1978:	98 a1       	ldd	r25, Y+32	; 0x20
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <LCD_SendData+0x5ac>
    197e:	98 a3       	std	Y+32, r25	; 0x20
    1980:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1982:	89 a1       	ldd	r24, Y+33	; 0x21
    1984:	9a a1       	ldd	r25, Y+34	; 0x22
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	9a a3       	std	Y+34, r25	; 0x22
    198a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	89 a1       	ldd	r24, Y+33	; 0x21
    198e:	9a a1       	ldd	r25, Y+34	; 0x22
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	69 f7       	brne	.-38     	; 0x196e <LCD_SendData+0x5a0>
    1994:	0d c1       	rjmp	.+538    	; 0x1bb0 <LCD_SendData+0x7e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1996:	6b a1       	ldd	r22, Y+35	; 0x23
    1998:	7c a1       	ldd	r23, Y+36	; 0x24
    199a:	8d a1       	ldd	r24, Y+37	; 0x25
    199c:	9e a1       	ldd	r25, Y+38	; 0x26
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	9a a3       	std	Y+34, r25	; 0x22
    19a8:	89 a3       	std	Y+33, r24	; 0x21
    19aa:	89 a1       	ldd	r24, Y+33	; 0x21
    19ac:	9a a1       	ldd	r25, Y+34	; 0x22
    19ae:	9e 8f       	std	Y+30, r25	; 0x1e
    19b0:	8d 8f       	std	Y+29, r24	; 0x1d
    19b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <LCD_SendData+0x5e8>
    19ba:	9e 8f       	std	Y+30, r25	; 0x1e
    19bc:	8d 8f       	std	Y+29, r24	; 0x1d
    19be:	f8 c0       	rjmp	.+496    	; 0x1bb0 <LCD_SendData+0x7e2>
		_delay_ms(1);
	}
	else{
		GPIO_WritePortValue( LCD_DataPort , Data );
    19c0:	80 91 a0 01 	lds	r24, 0x01A0
    19c4:	fe 01       	movw	r30, r28
    19c6:	eb 5a       	subi	r30, 0xAB	; 171
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	60 81       	ld	r22, Z
    19cc:	0e 94 af 18 	call	0x315e	; 0x315e <GPIO_WritePortValue>
		GPIO_WritePinValue( LCD_ControlPort , E , LOGIC_HIGH );
    19d0:	80 91 9f 01 	lds	r24, 0x019F
    19d4:	62 e0       	ldi	r22, 0x02	; 2
    19d6:	41 e0       	ldi	r20, 0x01	; 1
    19d8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a0 e8       	ldi	r26, 0x80	; 128
    19e2:	bf e3       	ldi	r27, 0x3F	; 63
    19e4:	89 8f       	std	Y+25, r24	; 0x19
    19e6:	9a 8f       	std	Y+26, r25	; 0x1a
    19e8:	ab 8f       	std	Y+27, r26	; 0x1b
    19ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	69 8d       	ldd	r22, Y+25	; 0x19
    19ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a e7       	ldi	r20, 0x7A	; 122
    19fa:	53 e4       	ldi	r21, 0x43	; 67
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	8d 8b       	std	Y+21, r24	; 0x15
    1a06:	9e 8b       	std	Y+22, r25	; 0x16
    1a08:	af 8b       	std	Y+23, r26	; 0x17
    1a0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a10:	8f 89       	ldd	r24, Y+23	; 0x17
    1a12:	98 8d       	ldd	r25, Y+24	; 0x18
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	5f e3       	ldi	r21, 0x3F	; 63
    1a1c:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <LCD_SendData+0x660>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9c 8b       	std	Y+20, r25	; 0x14
    1a2a:	8b 8b       	std	Y+19, r24	; 0x13
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <LCD_SendData+0x6de>
	else if (__tmp > 65535)
    1a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a30:	7e 89       	ldd	r23, Y+22	; 0x16
    1a32:	8f 89       	ldd	r24, Y+23	; 0x17
    1a34:	98 8d       	ldd	r25, Y+24	; 0x18
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <LCD_SendData+0x6ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a46:	69 8d       	ldd	r22, Y+25	; 0x19
    1a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9c 8b       	std	Y+20, r25	; 0x14
    1a6c:	8b 8b       	std	Y+19, r24	; 0x13
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <LCD_SendData+0x6c0>
    1a70:	89 e1       	ldi	r24, 0x19	; 25
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9a 8b       	std	Y+18, r25	; 0x12
    1a76:	89 8b       	std	Y+17, r24	; 0x11
    1a78:	89 89       	ldd	r24, Y+17	; 0x11
    1a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_SendData+0x6ae>
    1a80:	9a 8b       	std	Y+18, r25	; 0x12
    1a82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	8b 89       	ldd	r24, Y+19	; 0x13
    1a86:	9c 89       	ldd	r25, Y+20	; 0x14
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	9c 8b       	std	Y+20, r25	; 0x14
    1a8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a90:	9c 89       	ldd	r25, Y+20	; 0x14
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <LCD_SendData+0x6a2>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <LCD_SendData+0x6f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9c 8b       	std	Y+20, r25	; 0x14
    1aaa:	8b 8b       	std	Y+19, r24	; 0x13
    1aac:	8b 89       	ldd	r24, Y+19	; 0x13
    1aae:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab0:	98 8b       	std	Y+16, r25	; 0x10
    1ab2:	8f 87       	std	Y+15, r24	; 0x0f
    1ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab6:	98 89       	ldd	r25, Y+16	; 0x10
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <LCD_SendData+0x6ea>
    1abc:	98 8b       	std	Y+16, r25	; 0x10
    1abe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		GPIO_WritePinValue( LCD_ControlPort , E , LOGIC_LOW );
    1ac0:	80 91 9f 01 	lds	r24, 0x019F
    1ac4:	62 e0       	ldi	r22, 0x02	; 2
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e8       	ldi	r26, 0x80	; 128
    1ad2:	bf e3       	ldi	r27, 0x3F	; 63
    1ad4:	8b 87       	std	Y+11, r24	; 0x0b
    1ad6:	9c 87       	std	Y+12, r25	; 0x0c
    1ad8:	ad 87       	std	Y+13, r26	; 0x0d
    1ada:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a e7       	ldi	r20, 0x7A	; 122
    1aea:	53 e4       	ldi	r21, 0x43	; 67
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8f 83       	std	Y+7, r24	; 0x07
    1af6:	98 87       	std	Y+8, r25	; 0x08
    1af8:	a9 87       	std	Y+9, r26	; 0x09
    1afa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1afc:	6f 81       	ldd	r22, Y+7	; 0x07
    1afe:	78 85       	ldd	r23, Y+8	; 0x08
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <LCD_SendData+0x750>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <LCD_SendData+0x7ce>
	else if (__tmp > 65535)
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	4c f5       	brge	.+82     	; 0x1b88 <LCD_SendData+0x7ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9e 83       	std	Y+6, r25	; 0x06
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <LCD_SendData+0x7b0>
    1b60:	89 e1       	ldi	r24, 0x19	; 25
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9c 83       	std	Y+4, r25	; 0x04
    1b66:	8b 83       	std	Y+3, r24	; 0x03
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_SendData+0x79e>
    1b70:	9c 83       	std	Y+4, r25	; 0x04
    1b72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <LCD_SendData+0x792>
    1b86:	14 c0       	rjmp	.+40     	; 0x1bb0 <LCD_SendData+0x7e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8a:	78 85       	ldd	r23, Y+8	; 0x08
    1b8c:	89 85       	ldd	r24, Y+9	; 0x09
    1b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	9a 83       	std	Y+2, r25	; 0x02
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_SendData+0x7da>
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
}
    1bb0:	cb 5a       	subi	r28, 0xAB	; 171
    1bb2:	df 4f       	sbci	r29, 0xFF	; 255
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <LCD_LcdInit>:

void LCD_LcdInit( uint8 Data_Port , uint8 Control_Port , uint8 Mode ){
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	c5 56       	subi	r28, 0x65	; 101
    1bd6:	d0 40       	sbci	r29, 0x00	; 0
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	fe 01       	movw	r30, r28
    1be4:	ed 59       	subi	r30, 0x9D	; 157
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 83       	st	Z, r24
    1bea:	fe 01       	movw	r30, r28
    1bec:	ec 59       	subi	r30, 0x9C	; 156
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	60 83       	st	Z, r22
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	eb 59       	subi	r30, 0x9B	; 155
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	40 83       	st	Z, r20
	LCD_ControlPort = Control_Port ;
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	ec 59       	subi	r30, 0x9C	; 156
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	80 93 9f 01 	sts	0x019F, r24
	LCD_DataPort = Data_Port ;
    1c06:	fe 01       	movw	r30, r28
    1c08:	ed 59       	subi	r30, 0x9D	; 157
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 93 a0 01 	sts	0x01A0, r24
	LCD_Mode = Mode ;
    1c12:	fe 01       	movw	r30, r28
    1c14:	eb 59       	subi	r30, 0x9B	; 155
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 81       	ld	r24, Z
    1c1a:	80 93 9e 01 	sts	0x019E, r24
	GPIO_SetPinDirection( LCD_ControlPort , RS , PIN_OUTPUT );
    1c1e:	80 91 9f 01 	lds	r24, 0x019F
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <GPIO_SetPinDirection>
	GPIO_SetPinDirection( LCD_ControlPort , RW , PIN_OUTPUT );
    1c2a:	80 91 9f 01 	lds	r24, 0x019F
    1c2e:	61 e0       	ldi	r22, 0x01	; 1
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <GPIO_SetPinDirection>
	GPIO_SetPinDirection( LCD_ControlPort , E , PIN_OUTPUT );
    1c36:	80 91 9f 01 	lds	r24, 0x019F
    1c3a:	62 e0       	ldi	r22, 0x02	; 2
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <GPIO_SetPinDirection>
	GPIO_SetPortDirection( LCD_DataPort , PORT_OUTPUT );
    1c42:	80 91 a0 01 	lds	r24, 0x01A0
    1c46:	6f ef       	ldi	r22, 0xFF	; 255
    1c48:	0e 94 6e 18 	call	0x30dc	; 0x30dc <GPIO_SetPortDirection>
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e1 5a       	subi	r30, 0xA1	; 161
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a8 e4       	ldi	r26, 0x48	; 72
    1c58:	b2 e4       	ldi	r27, 0x42	; 66
    1c5a:	80 83       	st	Z, r24
    1c5c:	91 83       	std	Z+1, r25	; 0x01
    1c5e:	a2 83       	std	Z+2, r26	; 0x02
    1c60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	8e 01       	movw	r16, r28
    1c64:	05 5a       	subi	r16, 0xA5	; 165
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	fe 01       	movw	r30, r28
    1c6a:	e1 5a       	subi	r30, 0xA1	; 161
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	60 81       	ld	r22, Z
    1c70:	71 81       	ldd	r23, Z+1	; 0x01
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a e7       	ldi	r20, 0x7A	; 122
    1c7c:	53 e4       	ldi	r21, 0x43	; 67
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	f8 01       	movw	r30, r16
    1c88:	80 83       	st	Z, r24
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	a2 83       	std	Z+2, r26	; 0x02
    1c8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c90:	fe 01       	movw	r30, r28
    1c92:	e5 5a       	subi	r30, 0xA5	; 165
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	60 81       	ld	r22, Z
    1c98:	71 81       	ldd	r23, Z+1	; 0x01
    1c9a:	82 81       	ldd	r24, Z+2	; 0x02
    1c9c:	93 81       	ldd	r25, Z+3	; 0x03
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	44 f4       	brge	.+16     	; 0x1cbe <LCD_LcdInit+0xf6>
		__ticks = 1;
    1cae:	fe 01       	movw	r30, r28
    1cb0:	e7 5a       	subi	r30, 0xA7	; 167
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
    1cbc:	64 c0       	rjmp	.+200    	; 0x1d86 <LCD_LcdInit+0x1be>
	else if (__tmp > 65535)
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e5 5a       	subi	r30, 0xA5	; 165
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	3f ef       	ldi	r19, 0xFF	; 255
    1cd0:	4f e7       	ldi	r20, 0x7F	; 127
    1cd2:	57 e4       	ldi	r21, 0x47	; 71
    1cd4:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1cd8:	18 16       	cp	r1, r24
    1cda:	0c f0       	brlt	.+2      	; 0x1cde <LCD_LcdInit+0x116>
    1cdc:	43 c0       	rjmp	.+134    	; 0x1d64 <LCD_LcdInit+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e1 5a       	subi	r30, 0xA1	; 161
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e2       	ldi	r20, 0x20	; 32
    1cf2:	51 e4       	ldi	r21, 0x41	; 65
    1cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	8e 01       	movw	r16, r28
    1cfe:	07 5a       	subi	r16, 0xA7	; 167
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	f8 01       	movw	r30, r16
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
    1d14:	1f c0       	rjmp	.+62     	; 0x1d54 <LCD_LcdInit+0x18c>
    1d16:	fe 01       	movw	r30, r28
    1d18:	e9 5a       	subi	r30, 0xA9	; 169
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	89 e1       	ldi	r24, 0x19	; 25
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	91 83       	std	Z+1, r25	; 0x01
    1d22:	80 83       	st	Z, r24
    1d24:	fe 01       	movw	r30, r28
    1d26:	e9 5a       	subi	r30, 0xA9	; 169
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_LcdInit+0x166>
    1d32:	fe 01       	movw	r30, r28
    1d34:	e9 5a       	subi	r30, 0xA9	; 169
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	de 01       	movw	r26, r28
    1d3e:	a7 5a       	subi	r26, 0xA7	; 167
    1d40:	bf 4f       	sbci	r27, 0xFF	; 255
    1d42:	fe 01       	movw	r30, r28
    1d44:	e7 5a       	subi	r30, 0xA7	; 167
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 81       	ld	r24, Z
    1d4a:	91 81       	ldd	r25, Z+1	; 0x01
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	11 96       	adiw	r26, 0x01	; 1
    1d50:	9c 93       	st	X, r25
    1d52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	fe 01       	movw	r30, r28
    1d56:	e7 5a       	subi	r30, 0xA7	; 167
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	d1 f6       	brne	.-76     	; 0x1d16 <LCD_LcdInit+0x14e>
    1d62:	28 c0       	rjmp	.+80     	; 0x1db4 <LCD_LcdInit+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d64:	8e 01       	movw	r16, r28
    1d66:	07 5a       	subi	r16, 0xA7	; 167
    1d68:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	e5 5a       	subi	r30, 0xA5	; 165
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	f8 01       	movw	r30, r16
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	80 83       	st	Z, r24
    1d86:	de 01       	movw	r26, r28
    1d88:	ab 5a       	subi	r26, 0xAB	; 171
    1d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e7 5a       	subi	r30, 0xA7	; 167
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	80 81       	ld	r24, Z
    1d94:	91 81       	ldd	r25, Z+1	; 0x01
    1d96:	11 96       	adiw	r26, 0x01	; 1
    1d98:	9c 93       	st	X, r25
    1d9a:	8e 93       	st	-X, r24
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	eb 5a       	subi	r30, 0xAB	; 171
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_LcdInit+0x1de>
    1daa:	fe 01       	movw	r30, r28
    1dac:	eb 5a       	subi	r30, 0xAB	; 171
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
	_delay_ms(50);
	if( LCD_Mode == Mode_4_BIT ){
    1db4:	80 91 9e 01 	lds	r24, 0x019E
    1db8:	88 23       	and	r24, r24
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <LCD_LcdInit+0x1f6>
    1dbc:	c6 c1       	rjmp	.+908    	; 0x214a <LCD_LcdInit+0x582>
		/* 2 Line Mode , 8-bit , 5*7 font , Display On , Cursor On , Cursor Blink , Clear */
		LCD_SendCommand( MODE_4_FUNCTIONSET_P1 );
    1dbe:	80 e2       	ldi	r24, 0x20	; 32
    1dc0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
		LCD_SendCommand( MODE_4_FUNCTIONSET_P1 );
    1dc4:	80 e2       	ldi	r24, 0x20	; 32
    1dc6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
		LCD_SendCommand( MODE_4_FUNCTIONSET_P2 );
    1dca:	80 e8       	ldi	r24, 0x80	; 128
    1dcc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	ef 5a       	subi	r30, 0xAF	; 175
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a8 e4       	ldi	r26, 0x48	; 72
    1ddc:	b2 e4       	ldi	r27, 0x42	; 66
    1dde:	80 83       	st	Z, r24
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	a2 83       	std	Z+2, r26	; 0x02
    1de4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	8e 01       	movw	r16, r28
    1de8:	03 5b       	subi	r16, 0xB3	; 179
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	fe 01       	movw	r30, r28
    1dee:	ef 5a       	subi	r30, 0xAF	; 175
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	4a e7       	ldi	r20, 0x7A	; 122
    1e00:	53 e4       	ldi	r21, 0x43	; 67
    1e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	80 83       	st	Z, r24
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	a2 83       	std	Z+2, r26	; 0x02
    1e12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e14:	fe 01       	movw	r30, r28
    1e16:	e3 5b       	subi	r30, 0xB3	; 179
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	60 81       	ld	r22, Z
    1e1c:	71 81       	ldd	r23, Z+1	; 0x01
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	44 f4       	brge	.+16     	; 0x1e42 <LCD_LcdInit+0x27a>
		__ticks = 1;
    1e32:	fe 01       	movw	r30, r28
    1e34:	e5 5b       	subi	r30, 0xB5	; 181
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	80 83       	st	Z, r24
    1e40:	64 c0       	rjmp	.+200    	; 0x1f0a <LCD_LcdInit+0x342>
	else if (__tmp > 65535)
    1e42:	fe 01       	movw	r30, r28
    1e44:	e3 5b       	subi	r30, 0xB3	; 179
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	0c f0       	brlt	.+2      	; 0x1e62 <LCD_LcdInit+0x29a>
    1e60:	43 c0       	rjmp	.+134    	; 0x1ee8 <LCD_LcdInit+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	fe 01       	movw	r30, r28
    1e64:	ef 5a       	subi	r30, 0xAF	; 175
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e2       	ldi	r20, 0x20	; 32
    1e76:	51 e4       	ldi	r21, 0x41	; 65
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8e 01       	movw	r16, r28
    1e82:	05 5b       	subi	r16, 0xB5	; 181
    1e84:	1f 4f       	sbci	r17, 0xFF	; 255
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	f8 01       	movw	r30, r16
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
    1e98:	1f c0       	rjmp	.+62     	; 0x1ed8 <LCD_LcdInit+0x310>
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e7 5b       	subi	r30, 0xB7	; 183
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	89 e1       	ldi	r24, 0x19	; 25
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e7 5b       	subi	r30, 0xB7	; 183
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <LCD_LcdInit+0x2ea>
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e7 5b       	subi	r30, 0xB7	; 183
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	de 01       	movw	r26, r28
    1ec2:	a5 5b       	subi	r26, 0xB5	; 181
    1ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e5 5b       	subi	r30, 0xB5	; 181
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	11 96       	adiw	r26, 0x01	; 1
    1ed4:	9c 93       	st	X, r25
    1ed6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e5 5b       	subi	r30, 0xB5	; 181
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	80 81       	ld	r24, Z
    1ee0:	91 81       	ldd	r25, Z+1	; 0x01
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	d1 f6       	brne	.-76     	; 0x1e9a <LCD_LcdInit+0x2d2>
    1ee6:	27 c0       	rjmp	.+78     	; 0x1f36 <LCD_LcdInit+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	8e 01       	movw	r16, r28
    1eea:	05 5b       	subi	r16, 0xB5	; 181
    1eec:	1f 4f       	sbci	r17, 0xFF	; 255
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e3 5b       	subi	r30, 0xB3	; 179
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	f8 01       	movw	r30, r16
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
    1f0a:	de 01       	movw	r26, r28
    1f0c:	a9 5b       	subi	r26, 0xB9	; 185
    1f0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
    1f12:	e5 5b       	subi	r30, 0xB5	; 181
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	8d 93       	st	X+, r24
    1f1c:	9c 93       	st	X, r25
    1f1e:	fe 01       	movw	r30, r28
    1f20:	e9 5b       	subi	r30, 0xB9	; 185
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 81       	ld	r24, Z
    1f26:	91 81       	ldd	r25, Z+1	; 0x01
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <LCD_LcdInit+0x360>
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e9 5b       	subi	r30, 0xB9	; 185
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	80 83       	st	Z, r24
		_delay_ms(50);
		LCD_SendCommand( MODE_4_DISPLAYONOFF_P1 );
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
		LCD_SendCommand( MODE_4_DISPLAYONOFF_P2 );
    1f3c:	80 ef       	ldi	r24, 0xF0	; 240
    1f3e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
    1f42:	fe 01       	movw	r30, r28
    1f44:	ed 5b       	subi	r30, 0xBD	; 189
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	a8 e4       	ldi	r26, 0x48	; 72
    1f4e:	b2 e4       	ldi	r27, 0x42	; 66
    1f50:	80 83       	st	Z, r24
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	a2 83       	std	Z+2, r26	; 0x02
    1f56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f58:	8e 01       	movw	r16, r28
    1f5a:	01 5c       	subi	r16, 0xC1	; 193
    1f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ed 5b       	subi	r30, 0xBD	; 189
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a e7       	ldi	r20, 0x7A	; 122
    1f72:	53 e4       	ldi	r21, 0x43	; 67
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	80 83       	st	Z, r24
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	a2 83       	std	Z+2, r26	; 0x02
    1f84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f86:	fe 01       	movw	r30, r28
    1f88:	ff 96       	adiw	r30, 0x3f	; 63
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e8       	ldi	r20, 0x80	; 128
    1f98:	5f e3       	ldi	r21, 0x3F	; 63
    1f9a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1f9e:	88 23       	and	r24, r24
    1fa0:	2c f4       	brge	.+10     	; 0x1fac <LCD_LcdInit+0x3e4>
		__ticks = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9e af       	std	Y+62, r25	; 0x3e
    1fa8:	8d af       	std	Y+61, r24	; 0x3d
    1faa:	46 c0       	rjmp	.+140    	; 0x2038 <LCD_LcdInit+0x470>
	else if (__tmp > 65535)
    1fac:	fe 01       	movw	r30, r28
    1fae:	ff 96       	adiw	r30, 0x3f	; 63
    1fb0:	60 81       	ld	r22, Z
    1fb2:	71 81       	ldd	r23, Z+1	; 0x01
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	93 81       	ldd	r25, Z+3	; 0x03
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	3f ef       	ldi	r19, 0xFF	; 255
    1fbc:	4f e7       	ldi	r20, 0x7F	; 127
    1fbe:	57 e4       	ldi	r21, 0x47	; 71
    1fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1fc4:	18 16       	cp	r1, r24
    1fc6:	64 f5       	brge	.+88     	; 0x2020 <LCD_LcdInit+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc8:	fe 01       	movw	r30, r28
    1fca:	ed 5b       	subi	r30, 0xBD	; 189
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	60 81       	ld	r22, Z
    1fd0:	71 81       	ldd	r23, Z+1	; 0x01
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e2       	ldi	r20, 0x20	; 32
    1fdc:	51 e4       	ldi	r21, 0x41	; 65
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9e af       	std	Y+62, r25	; 0x3e
    1ff4:	8d af       	std	Y+61, r24	; 0x3d
    1ff6:	0f c0       	rjmp	.+30     	; 0x2016 <LCD_LcdInit+0x44e>
    1ff8:	89 e1       	ldi	r24, 0x19	; 25
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9c af       	std	Y+60, r25	; 0x3c
    1ffe:	8b af       	std	Y+59, r24	; 0x3b
    2000:	8b ad       	ldd	r24, Y+59	; 0x3b
    2002:	9c ad       	ldd	r25, Y+60	; 0x3c
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_LcdInit+0x43c>
    2008:	9c af       	std	Y+60, r25	; 0x3c
    200a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200c:	8d ad       	ldd	r24, Y+61	; 0x3d
    200e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	9e af       	std	Y+62, r25	; 0x3e
    2014:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2016:	8d ad       	ldd	r24, Y+61	; 0x3d
    2018:	9e ad       	ldd	r25, Y+62	; 0x3e
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	69 f7       	brne	.-38     	; 0x1ff8 <LCD_LcdInit+0x430>
    201e:	16 c0       	rjmp	.+44     	; 0x204c <LCD_LcdInit+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2020:	fe 01       	movw	r30, r28
    2022:	ff 96       	adiw	r30, 0x3f	; 63
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	9e af       	std	Y+62, r25	; 0x3e
    2036:	8d af       	std	Y+61, r24	; 0x3d
    2038:	8d ad       	ldd	r24, Y+61	; 0x3d
    203a:	9e ad       	ldd	r25, Y+62	; 0x3e
    203c:	9a af       	std	Y+58, r25	; 0x3a
    203e:	89 af       	std	Y+57, r24	; 0x39
    2040:	89 ad       	ldd	r24, Y+57	; 0x39
    2042:	9a ad       	ldd	r25, Y+58	; 0x3a
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_LcdInit+0x47c>
    2048:	9a af       	std	Y+58, r25	; 0x3a
    204a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		LCD_SendCommand( MODE_4_CLEAR_P1 );
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
		LCD_SendCommand( MODE_4_CLEAR_P2 );
    2052:	80 e1       	ldi	r24, 0x10	; 16
    2054:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e4       	ldi	r27, 0x40	; 64
    2060:	8d ab       	std	Y+53, r24	; 0x35
    2062:	9e ab       	std	Y+54, r25	; 0x36
    2064:	af ab       	std	Y+55, r26	; 0x37
    2066:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6d a9       	ldd	r22, Y+53	; 0x35
    206a:	7e a9       	ldd	r23, Y+54	; 0x36
    206c:	8f a9       	ldd	r24, Y+55	; 0x37
    206e:	98 ad       	ldd	r25, Y+56	; 0x38
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a e7       	ldi	r20, 0x7A	; 122
    2076:	53 e4       	ldi	r21, 0x43	; 67
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	89 ab       	std	Y+49, r24	; 0x31
    2082:	9a ab       	std	Y+50, r25	; 0x32
    2084:	ab ab       	std	Y+51, r26	; 0x33
    2086:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2088:	69 a9       	ldd	r22, Y+49	; 0x31
    208a:	7a a9       	ldd	r23, Y+50	; 0x32
    208c:	8b a9       	ldd	r24, Y+51	; 0x33
    208e:	9c a9       	ldd	r25, Y+52	; 0x34
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <LCD_LcdInit+0x4e2>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	98 ab       	std	Y+48, r25	; 0x30
    20a6:	8f a7       	std	Y+47, r24	; 0x2f
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <LCD_LcdInit+0x560>
	else if (__tmp > 65535)
    20aa:	69 a9       	ldd	r22, Y+49	; 0x31
    20ac:	7a a9       	ldd	r23, Y+50	; 0x32
    20ae:	8b a9       	ldd	r24, Y+51	; 0x33
    20b0:	9c a9       	ldd	r25, Y+52	; 0x34
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <LCD_LcdInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6d a9       	ldd	r22, Y+53	; 0x35
    20c4:	7e a9       	ldd	r23, Y+54	; 0x36
    20c6:	8f a9       	ldd	r24, Y+55	; 0x37
    20c8:	98 ad       	ldd	r25, Y+56	; 0x38
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	98 ab       	std	Y+48, r25	; 0x30
    20e8:	8f a7       	std	Y+47, r24	; 0x2f
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <LCD_LcdInit+0x542>
    20ec:	89 e1       	ldi	r24, 0x19	; 25
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9e a7       	std	Y+46, r25	; 0x2e
    20f2:	8d a7       	std	Y+45, r24	; 0x2d
    20f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    20f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <LCD_LcdInit+0x530>
    20fc:	9e a7       	std	Y+46, r25	; 0x2e
    20fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8f a5       	ldd	r24, Y+47	; 0x2f
    2102:	98 a9       	ldd	r25, Y+48	; 0x30
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	98 ab       	std	Y+48, r25	; 0x30
    2108:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8f a5       	ldd	r24, Y+47	; 0x2f
    210c:	98 a9       	ldd	r25, Y+48	; 0x30
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <LCD_LcdInit+0x524>
    2112:	14 c0       	rjmp	.+40     	; 0x213c <LCD_LcdInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	69 a9       	ldd	r22, Y+49	; 0x31
    2116:	7a a9       	ldd	r23, Y+50	; 0x32
    2118:	8b a9       	ldd	r24, Y+51	; 0x33
    211a:	9c a9       	ldd	r25, Y+52	; 0x34
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	98 ab       	std	Y+48, r25	; 0x30
    2126:	8f a7       	std	Y+47, r24	; 0x2f
    2128:	8f a5       	ldd	r24, Y+47	; 0x2f
    212a:	98 a9       	ldd	r25, Y+48	; 0x30
    212c:	9c a7       	std	Y+44, r25	; 0x2c
    212e:	8b a7       	std	Y+43, r24	; 0x2b
    2130:	8b a5       	ldd	r24, Y+43	; 0x2b
    2132:	9c a5       	ldd	r25, Y+44	; 0x2c
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_LcdInit+0x56c>
    2138:	9c a7       	std	Y+44, r25	; 0x2c
    213a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		LCD_SendCommand( MODE_4_ENTRYMODESET_P1 );
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
		LCD_SendCommand( MODE_4_ENTRYMODESET_P2 );
    2142:	80 e6       	ldi	r24, 0x60	; 96
    2144:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
    2148:	62 c1       	rjmp	.+708    	; 0x240e <LCD_LcdInit+0x846>
	}
	else{
		/* 2 Line Mode , 8-bit , 5*7 font , Display On , Cursor On , Cursor Blink , Clear */
		LCD_SendCommand( MODE_8_FUNCTIONSET );
    214a:	88 e3       	ldi	r24, 0x38	; 56
    214c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a8 e4       	ldi	r26, 0x48	; 72
    2156:	b2 e4       	ldi	r27, 0x42	; 66
    2158:	8f a3       	std	Y+39, r24	; 0x27
    215a:	98 a7       	std	Y+40, r25	; 0x28
    215c:	a9 a7       	std	Y+41, r26	; 0x29
    215e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2160:	6f a1       	ldd	r22, Y+39	; 0x27
    2162:	78 a5       	ldd	r23, Y+40	; 0x28
    2164:	89 a5       	ldd	r24, Y+41	; 0x29
    2166:	9a a5       	ldd	r25, Y+42	; 0x2a
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a e7       	ldi	r20, 0x7A	; 122
    216e:	53 e4       	ldi	r21, 0x43	; 67
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	8b a3       	std	Y+35, r24	; 0x23
    217a:	9c a3       	std	Y+36, r25	; 0x24
    217c:	ad a3       	std	Y+37, r26	; 0x25
    217e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2180:	6b a1       	ldd	r22, Y+35	; 0x23
    2182:	7c a1       	ldd	r23, Y+36	; 0x24
    2184:	8d a1       	ldd	r24, Y+37	; 0x25
    2186:	9e a1       	ldd	r25, Y+38	; 0x26
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <LCD_LcdInit+0x5da>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9a a3       	std	Y+34, r25	; 0x22
    219e:	89 a3       	std	Y+33, r24	; 0x21
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <LCD_LcdInit+0x658>
	else if (__tmp > 65535)
    21a2:	6b a1       	ldd	r22, Y+35	; 0x23
    21a4:	7c a1       	ldd	r23, Y+36	; 0x24
    21a6:	8d a1       	ldd	r24, Y+37	; 0x25
    21a8:	9e a1       	ldd	r25, Y+38	; 0x26
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <LCD_LcdInit+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	6f a1       	ldd	r22, Y+39	; 0x27
    21bc:	78 a5       	ldd	r23, Y+40	; 0x28
    21be:	89 a5       	ldd	r24, Y+41	; 0x29
    21c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9a a3       	std	Y+34, r25	; 0x22
    21e0:	89 a3       	std	Y+33, r24	; 0x21
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <LCD_LcdInit+0x63a>
    21e4:	89 e1       	ldi	r24, 0x19	; 25
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	98 a3       	std	Y+32, r25	; 0x20
    21ea:	8f 8f       	std	Y+31, r24	; 0x1f
    21ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21ee:	98 a1       	ldd	r25, Y+32	; 0x20
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_LcdInit+0x628>
    21f4:	98 a3       	std	Y+32, r25	; 0x20
    21f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	89 a1       	ldd	r24, Y+33	; 0x21
    21fa:	9a a1       	ldd	r25, Y+34	; 0x22
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	9a a3       	std	Y+34, r25	; 0x22
    2200:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	89 a1       	ldd	r24, Y+33	; 0x21
    2204:	9a a1       	ldd	r25, Y+34	; 0x22
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	69 f7       	brne	.-38     	; 0x21e4 <LCD_LcdInit+0x61c>
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <LCD_LcdInit+0x66c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	6b a1       	ldd	r22, Y+35	; 0x23
    220e:	7c a1       	ldd	r23, Y+36	; 0x24
    2210:	8d a1       	ldd	r24, Y+37	; 0x25
    2212:	9e a1       	ldd	r25, Y+38	; 0x26
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9a a3       	std	Y+34, r25	; 0x22
    221e:	89 a3       	std	Y+33, r24	; 0x21
    2220:	89 a1       	ldd	r24, Y+33	; 0x21
    2222:	9a a1       	ldd	r25, Y+34	; 0x22
    2224:	9e 8f       	std	Y+30, r25	; 0x1e
    2226:	8d 8f       	std	Y+29, r24	; 0x1d
    2228:	8d 8d       	ldd	r24, Y+29	; 0x1d
    222a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_LcdInit+0x664>
    2230:	9e 8f       	std	Y+30, r25	; 0x1e
    2232:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		LCD_SendCommand( MODE_8_DISPLAYONOFF );
    2234:	8c e0       	ldi	r24, 0x0C	; 12
    2236:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a8 e4       	ldi	r26, 0x48	; 72
    2240:	b2 e4       	ldi	r27, 0x42	; 66
    2242:	89 8f       	std	Y+25, r24	; 0x19
    2244:	9a 8f       	std	Y+26, r25	; 0x1a
    2246:	ab 8f       	std	Y+27, r26	; 0x1b
    2248:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	69 8d       	ldd	r22, Y+25	; 0x19
    224c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2250:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a e7       	ldi	r20, 0x7A	; 122
    2258:	53 e4       	ldi	r21, 0x43	; 67
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8d 8b       	std	Y+21, r24	; 0x15
    2264:	9e 8b       	std	Y+22, r25	; 0x16
    2266:	af 8b       	std	Y+23, r26	; 0x17
    2268:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    226a:	6d 89       	ldd	r22, Y+21	; 0x15
    226c:	7e 89       	ldd	r23, Y+22	; 0x16
    226e:	8f 89       	ldd	r24, Y+23	; 0x17
    2270:	98 8d       	ldd	r25, Y+24	; 0x18
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    227e:	88 23       	and	r24, r24
    2280:	2c f4       	brge	.+10     	; 0x228c <LCD_LcdInit+0x6c4>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9c 8b       	std	Y+20, r25	; 0x14
    2288:	8b 8b       	std	Y+19, r24	; 0x13
    228a:	3f c0       	rjmp	.+126    	; 0x230a <LCD_LcdInit+0x742>
	else if (__tmp > 65535)
    228c:	6d 89       	ldd	r22, Y+21	; 0x15
    228e:	7e 89       	ldd	r23, Y+22	; 0x16
    2290:	8f 89       	ldd	r24, Y+23	; 0x17
    2292:	98 8d       	ldd	r25, Y+24	; 0x18
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <LCD_LcdInit+0x72e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a4:	69 8d       	ldd	r22, Y+25	; 0x19
    22a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	51 e4       	ldi	r21, 0x41	; 65
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9c 8b       	std	Y+20, r25	; 0x14
    22ca:	8b 8b       	std	Y+19, r24	; 0x13
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <LCD_LcdInit+0x724>
    22ce:	89 e1       	ldi	r24, 0x19	; 25
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9a 8b       	std	Y+18, r25	; 0x12
    22d4:	89 8b       	std	Y+17, r24	; 0x11
    22d6:	89 89       	ldd	r24, Y+17	; 0x11
    22d8:	9a 89       	ldd	r25, Y+18	; 0x12
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_LcdInit+0x712>
    22de:	9a 8b       	std	Y+18, r25	; 0x12
    22e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	8b 89       	ldd	r24, Y+19	; 0x13
    22e4:	9c 89       	ldd	r25, Y+20	; 0x14
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9c 8b       	std	Y+20, r25	; 0x14
    22ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	8b 89       	ldd	r24, Y+19	; 0x13
    22ee:	9c 89       	ldd	r25, Y+20	; 0x14
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	69 f7       	brne	.-38     	; 0x22ce <LCD_LcdInit+0x706>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <LCD_LcdInit+0x756>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f6:	6d 89       	ldd	r22, Y+21	; 0x15
    22f8:	7e 89       	ldd	r23, Y+22	; 0x16
    22fa:	8f 89       	ldd	r24, Y+23	; 0x17
    22fc:	98 8d       	ldd	r25, Y+24	; 0x18
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9c 8b       	std	Y+20, r25	; 0x14
    2308:	8b 8b       	std	Y+19, r24	; 0x13
    230a:	8b 89       	ldd	r24, Y+19	; 0x13
    230c:	9c 89       	ldd	r25, Y+20	; 0x14
    230e:	98 8b       	std	Y+16, r25	; 0x10
    2310:	8f 87       	std	Y+15, r24	; 0x0f
    2312:	8f 85       	ldd	r24, Y+15	; 0x0f
    2314:	98 89       	ldd	r25, Y+16	; 0x10
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <LCD_LcdInit+0x74e>
    231a:	98 8b       	std	Y+16, r25	; 0x10
    231c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		LCD_SendCommand( MODE_8_CLEAR );
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 e0       	ldi	r26, 0x00	; 0
    232a:	b0 e4       	ldi	r27, 0x40	; 64
    232c:	8b 87       	std	Y+11, r24	; 0x0b
    232e:	9c 87       	std	Y+12, r25	; 0x0c
    2330:	ad 87       	std	Y+13, r26	; 0x0d
    2332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	6b 85       	ldd	r22, Y+11	; 0x0b
    2336:	7c 85       	ldd	r23, Y+12	; 0x0c
    2338:	8d 85       	ldd	r24, Y+13	; 0x0d
    233a:	9e 85       	ldd	r25, Y+14	; 0x0e
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4a e7       	ldi	r20, 0x7A	; 122
    2342:	53 e4       	ldi	r21, 0x43	; 67
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8f 83       	std	Y+7, r24	; 0x07
    234e:	98 87       	std	Y+8, r25	; 0x08
    2350:	a9 87       	std	Y+9, r26	; 0x09
    2352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2354:	6f 81       	ldd	r22, Y+7	; 0x07
    2356:	78 85       	ldd	r23, Y+8	; 0x08
    2358:	89 85       	ldd	r24, Y+9	; 0x09
    235a:	9a 85       	ldd	r25, Y+10	; 0x0a
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <LCD_LcdInit+0x7ae>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <LCD_LcdInit+0x82c>
	else if (__tmp > 65535)
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	4c f5       	brge	.+82     	; 0x23e0 <LCD_LcdInit+0x818>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2390:	7c 85       	ldd	r23, Y+12	; 0x0c
    2392:	8d 85       	ldd	r24, Y+13	; 0x0d
    2394:	9e 85       	ldd	r25, Y+14	; 0x0e
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <LCD_LcdInit+0x80e>
    23b8:	89 e1       	ldi	r24, 0x19	; 25
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	9c 81       	ldd	r25, Y+4	; 0x04
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <LCD_LcdInit+0x7fc>
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	8d 81       	ldd	r24, Y+5	; 0x05
    23ce:	9e 81       	ldd	r25, Y+6	; 0x06
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	69 f7       	brne	.-38     	; 0x23b8 <LCD_LcdInit+0x7f0>
    23de:	14 c0       	rjmp	.+40     	; 0x2408 <LCD_LcdInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	6f 81       	ldd	r22, Y+7	; 0x07
    23e2:	78 85       	ldd	r23, Y+8	; 0x08
    23e4:	89 85       	ldd	r24, Y+9	; 0x09
    23e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	8d 81       	ldd	r24, Y+5	; 0x05
    23f6:	9e 81       	ldd	r25, Y+6	; 0x06
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <LCD_LcdInit+0x838>
    2404:	9a 83       	std	Y+2, r25	; 0x02
    2406:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		LCD_SendCommand( MODE_8_ENTRYMODESET );
    2408:	86 e0       	ldi	r24, 0x06	; 6
    240a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
	}
}
    240e:	cb 59       	subi	r28, 0x9B	; 155
    2410:	df 4f       	sbci	r29, 0xFF	; 255
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	08 95       	ret

00002426 <LCD_DisplayString>:
void LCD_DisplayString( uint8 *Str ){
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	00 d0       	rcall	.+0      	; 0x242c <LCD_DisplayString+0x6>
    242c:	0f 92       	push	r0
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	9b 83       	std	Y+3, r25	; 0x03
    2434:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Index ;
	for( Index = 0 ; Str[Index] != NULL_CHAR ; ++Index ){
    2436:	19 82       	std	Y+1, r1	; 0x01
    2438:	0e c0       	rjmp	.+28     	; 0x2456 <LCD_DisplayString+0x30>
		LCD_SendData( Str[Index] );
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	9b 81       	ldd	r25, Y+3	; 0x03
    2444:	fc 01       	movw	r30, r24
    2446:	e2 0f       	add	r30, r18
    2448:	f3 1f       	adc	r31, r19
    244a:	80 81       	ld	r24, Z
    244c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
		LCD_SendCommand( MODE_8_ENTRYMODESET );
	}
}
void LCD_DisplayString( uint8 *Str ){
	uint8 Index ;
	for( Index = 0 ; Str[Index] != NULL_CHAR ; ++Index ){
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	8f 5f       	subi	r24, 0xFF	; 255
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	9b 81       	ldd	r25, Y+3	; 0x03
    2460:	fc 01       	movw	r30, r24
    2462:	e2 0f       	add	r30, r18
    2464:	f3 1f       	adc	r31, r19
    2466:	80 81       	ld	r24, Z
    2468:	88 23       	and	r24, r24
    246a:	39 f7       	brne	.-50     	; 0x243a <LCD_DisplayString+0x14>
		LCD_SendData( Str[Index] );
	}
}
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <LCD_DisplayNumber>:

void LCD_DisplayNumber( sint32 Number ){ // -123 => - 123 => "123"
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	6b 97       	sbiw	r28, 0x1b	; 27
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	68 8f       	std	Y+24, r22	; 0x18
    248e:	79 8f       	std	Y+25, r23	; 0x19
    2490:	8a 8f       	std	Y+26, r24	; 0x1a
    2492:	9b 8f       	std	Y+27, r25	; 0x1b
	uint8 NumStr[20];
	uint8 Index = 0 ;
    2494:	1b 82       	std	Y+3, r1	; 0x03
	if( Number < 0 ){
    2496:	88 8d       	ldd	r24, Y+24	; 0x18
    2498:	99 8d       	ldd	r25, Y+25	; 0x19
    249a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    249c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    249e:	bb 23       	and	r27, r27
    24a0:	0c f0       	brlt	.+2      	; 0x24a4 <LCD_DisplayNumber+0x2c>
    24a2:	43 c0       	rjmp	.+134    	; 0x252a <LCD_DisplayNumber+0xb2>
		LCD_SendData('-');
    24a4:	8d e2       	ldi	r24, 0x2D	; 45
    24a6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
		Number *= -1 ;
    24aa:	88 8d       	ldd	r24, Y+24	; 0x18
    24ac:	99 8d       	ldd	r25, Y+25	; 0x19
    24ae:	aa 8d       	ldd	r26, Y+26	; 0x1a
    24b0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    24b2:	b0 95       	com	r27
    24b4:	a0 95       	com	r26
    24b6:	90 95       	com	r25
    24b8:	81 95       	neg	r24
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
    24bc:	af 4f       	sbci	r26, 0xFF	; 255
    24be:	bf 4f       	sbci	r27, 0xFF	; 255
    24c0:	88 8f       	std	Y+24, r24	; 0x18
    24c2:	99 8f       	std	Y+25, r25	; 0x19
    24c4:	aa 8f       	std	Y+26, r26	; 0x1a
    24c6:	bb 8f       	std	Y+27, r27	; 0x1b
    24c8:	30 c0       	rjmp	.+96     	; 0x252a <LCD_DisplayNumber+0xb2>
	}
	while( Number != 0 ){
		uint8 reminder = Number % 10 ;
    24ca:	88 8d       	ldd	r24, Y+24	; 0x18
    24cc:	99 8d       	ldd	r25, Y+25	; 0x19
    24ce:	aa 8d       	ldd	r26, Y+26	; 0x1a
    24d0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    24d2:	2a e0       	ldi	r18, 0x0A	; 10
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	50 e0       	ldi	r21, 0x00	; 0
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 08 20 	call	0x4010	; 0x4010 <__divmodsi4>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	89 83       	std	Y+1, r24	; 0x01
		NumStr[Index] = ( '0' + reminder ) ;
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	48 2f       	mov	r20, r24
    24f2:	40 5d       	subi	r20, 0xD0	; 208
    24f4:	ce 01       	movw	r24, r28
    24f6:	04 96       	adiw	r24, 0x04	; 4
    24f8:	fc 01       	movw	r30, r24
    24fa:	e2 0f       	add	r30, r18
    24fc:	f3 1f       	adc	r31, r19
    24fe:	40 83       	st	Z, r20
		Number /= 10 ;
    2500:	88 8d       	ldd	r24, Y+24	; 0x18
    2502:	99 8d       	ldd	r25, Y+25	; 0x19
    2504:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2506:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2508:	2a e0       	ldi	r18, 0x0A	; 10
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 08 20 	call	0x4010	; 0x4010 <__divmodsi4>
    2518:	da 01       	movw	r26, r20
    251a:	c9 01       	movw	r24, r18
    251c:	88 8f       	std	Y+24, r24	; 0x18
    251e:	99 8f       	std	Y+25, r25	; 0x19
    2520:	aa 8f       	std	Y+26, r26	; 0x1a
    2522:	bb 8f       	std	Y+27, r27	; 0x1b
		++Index ;
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	8f 5f       	subi	r24, 0xFF	; 255
    2528:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Index = 0 ;
	if( Number < 0 ){
		LCD_SendData('-');
		Number *= -1 ;
	}
	while( Number != 0 ){
    252a:	88 8d       	ldd	r24, Y+24	; 0x18
    252c:	99 8d       	ldd	r25, Y+25	; 0x19
    252e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2530:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	a1 05       	cpc	r26, r1
    2536:	b1 05       	cpc	r27, r1
    2538:	41 f6       	brne	.-112    	; 0x24ca <LCD_DisplayNumber+0x52>
		NumStr[Index] = ( '0' + reminder ) ;
		Number /= 10 ;
		++Index ;
	}
	uint8 i ;
	for( i = Index - 1 ; NumStr[i] != NULL_CHAR ; --i ){
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	81 50       	subi	r24, 0x01	; 1
    253e:	8a 83       	std	Y+2, r24	; 0x02
    2540:	0e c0       	rjmp	.+28     	; 0x255e <LCD_DisplayNumber+0xe6>
		LCD_SendData( NumStr[i] );
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	ce 01       	movw	r24, r28
    254a:	04 96       	adiw	r24, 0x04	; 4
    254c:	fc 01       	movw	r30, r24
    254e:	e2 0f       	add	r30, r18
    2550:	f3 1f       	adc	r31, r19
    2552:	80 81       	ld	r24, Z
    2554:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
		NumStr[Index] = ( '0' + reminder ) ;
		Number /= 10 ;
		++Index ;
	}
	uint8 i ;
	for( i = Index - 1 ; NumStr[i] != NULL_CHAR ; --i ){
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	81 50       	subi	r24, 0x01	; 1
    255c:	8a 83       	std	Y+2, r24	; 0x02
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	ce 01       	movw	r24, r28
    2566:	04 96       	adiw	r24, 0x04	; 4
    2568:	fc 01       	movw	r30, r24
    256a:	e2 0f       	add	r30, r18
    256c:	f3 1f       	adc	r31, r19
    256e:	80 81       	ld	r24, Z
    2570:	88 23       	and	r24, r24
    2572:	39 f7       	brne	.-50     	; 0x2542 <LCD_DisplayNumber+0xca>
		LCD_SendData( NumStr[i] );
	}
}
    2574:	6b 96       	adiw	r28, 0x1b	; 27
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <LCD_ClearLcd>:


void LCD_ClearLcd(){
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
	if( LCD_Mode == Mode_4_BIT ){
    258e:	80 91 9e 01 	lds	r24, 0x019E
    2592:	88 23       	and	r24, r24
    2594:	39 f4       	brne	.+14     	; 0x25a4 <LCD_ClearLcd+0x1e>
		LCD_SendCommand( MODE_4_CLEAR_P1 );
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
		LCD_SendCommand( MODE_4_CLEAR_P2 );
    259c:	80 e1       	ldi	r24, 0x10	; 16
    259e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <LCD_ClearLcd+0x24>
	}
	else{
		LCD_SendCommand( MODE_8_CLEAR );
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
	}
}
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <LCD_MoveCursor>:

void LCD_MoveCursor( uint8 Row , uint8 Col ){
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <LCD_MoveCursor+0x6>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	6a 83       	std	Y+2, r22	; 0x02
	if( ( Row == 1 ) && ( Col >= 0 && Col <= 15 ) ){
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	81 30       	cpi	r24, 0x01	; 1
    25c2:	41 f4       	brne	.+16     	; 0x25d4 <LCD_MoveCursor+0x24>
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	80 31       	cpi	r24, 0x10	; 16
    25c8:	28 f4       	brcc	.+10     	; 0x25d4 <LCD_MoveCursor+0x24>
		LCD_SendCommand( LCD_FIRST_LINE + Col );
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	80 58       	subi	r24, 0x80	; 128
    25ce:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
    25d2:	0a c0       	rjmp	.+20     	; 0x25e8 <LCD_MoveCursor+0x38>
	}
	else if( ( Row == 2 ) && ( Col >= 0 && Col <= 15 ) ){
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	82 30       	cpi	r24, 0x02	; 2
    25d8:	39 f4       	brne	.+14     	; 0x25e8 <LCD_MoveCursor+0x38>
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	80 31       	cpi	r24, 0x10	; 16
    25de:	20 f4       	brcc	.+8      	; 0x25e8 <LCD_MoveCursor+0x38>
		LCD_SendCommand( LCD_SECOND_LINE + Col );
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	80 54       	subi	r24, 0x40	; 64
    25e4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
	}
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <LCD_StoreCustomChar>:

void LCD_StoreCustomChar( uint8 Index , uint8 *CustomChar ){
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <LCD_StoreCustomChar+0x6>
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <LCD_StoreCustomChar+0x8>
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	8a 83       	std	Y+2, r24	; 0x02
    2600:	7c 83       	std	Y+4, r23	; 0x04
    2602:	6b 83       	std	Y+3, r22	; 0x03
	if( Index < 8 ){
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	88 30       	cpi	r24, 0x08	; 8
    2608:	10 f5       	brcc	.+68     	; 0x264e <LCD_StoreCustomChar+0x5c>
		uint8 Counter ;
		LCD_SendCommand( LCD_CGRAM_ADDRESS + Index * 8 );
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	08 96       	adiw	r24, 0x08	; 8
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
		for( Counter = 0 ; Counter < 8 ; ++Counter ){
    2622:	19 82       	std	Y+1, r1	; 0x01
    2624:	0e c0       	rjmp	.+28     	; 0x2642 <LCD_StoreCustomChar+0x50>
			LCD_SendData( CustomChar[Counter] );
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	fc 01       	movw	r30, r24
    2632:	e2 0f       	add	r30, r18
    2634:	f3 1f       	adc	r31, r19
    2636:	80 81       	ld	r24, Z
    2638:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>

void LCD_StoreCustomChar( uint8 Index , uint8 *CustomChar ){
	if( Index < 8 ){
		uint8 Counter ;
		LCD_SendCommand( LCD_CGRAM_ADDRESS + Index * 8 );
		for( Counter = 0 ; Counter < 8 ; ++Counter ){
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	8f 5f       	subi	r24, 0xFF	; 255
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	88 30       	cpi	r24, 0x08	; 8
    2646:	78 f3       	brcs	.-34     	; 0x2626 <LCD_StoreCustomChar+0x34>
			LCD_SendData( CustomChar[Counter] );
		}
		LCD_SendCommand( LCD_DDRAM_ADDRESS );
    2648:	80 e8       	ldi	r24, 0x80	; 128
    264a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_SendCommand>
	}
}
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <LCD_DisplayCustomChar>:

void LCD_DisplayCustomChar( uint8 Index ){
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	0f 92       	push	r0
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	89 83       	std	Y+1, r24	; 0x01
	if( Index < 8 ){
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	88 30       	cpi	r24, 0x08	; 8
    266c:	18 f4       	brcc	.+6      	; 0x2674 <LCD_DisplayCustomChar+0x18>
		LCD_SendData( Index );
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
	}
}
    2674:	0f 90       	pop	r0
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <KEYPAD_KeypadInit>:
													 { '1' , '2' , '3' , '-' } ,
													 { 'c' , '0' , '=' , '+' } };



void KEYPAD_KeypadInit( uint8 Port_Id , uint8 PortMode ){
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	00 d0       	rcall	.+0      	; 0x2682 <KEYPAD_KeypadInit+0x6>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	6a 83       	std	Y+2, r22	; 0x02
	KeyPadConnectionMode = PortMode ;
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	80 93 a1 01 	sts	0x01A1, r24
	GPIO_SetPortDirection( Port_Id ,KeyPadConnectionMode );
    2690:	90 91 a1 01 	lds	r25, 0x01A1
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	69 2f       	mov	r22, r25
    2698:	0e 94 6e 18 	call	0x30dc	; 0x30dc <GPIO_SetPortDirection>
	GPIO_WritePortValue( Port_Id , KEYPAD_INIT_PORT );
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	6f ef       	ldi	r22, 0xFF	; 255
    26a0:	0e 94 af 18 	call	0x315e	; 0x315e <GPIO_WritePortValue>
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <KEYPAD_GetPressedKeyValue>:

uint8 KEYPAD_GetPressedKeyValue( uint8 Port_Id ){
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	a3 97       	sbiw	r28, 0x23	; 35
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	8b a3       	std	Y+35, r24	; 0x23
	uint8 KeyValue = 0b11111111 ;
    26c4:	8f ef       	ldi	r24, 0xFF	; 255
    26c6:	8a a3       	std	Y+34, r24	; 0x22
	uint8 Flag = 0 ;
    26c8:	19 a2       	std	Y+33, r1	; 0x21

	if( KeyPadConnectionMode == HALF_INPUT_OUTPUT ){
    26ca:	80 91 a1 01 	lds	r24, 0x01A1
    26ce:	80 3f       	cpi	r24, 0xF0	; 240
    26d0:	09 f0       	breq	.+2      	; 0x26d4 <KEYPAD_GetPressedKeyValue+0x26>
    26d2:	c3 c0       	rjmp	.+390    	; 0x285a <KEYPAD_GetPressedKeyValue+0x1ac>
		uint8 Col = 0 , Row = 0 ;
    26d4:	18 a2       	std	Y+32, r1	; 0x20
    26d6:	1f 8e       	std	Y+31, r1	; 0x1f
		for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    26d8:	18 a2       	std	Y+32, r1	; 0x20
    26da:	ba c0       	rjmp	.+372    	; 0x2850 <KEYPAD_GetPressedKeyValue+0x1a2>
			GPIO_WritePinValue( Port_Id , Col + KEYPAD_COLS , LOGIC_LOW );
    26dc:	88 a1       	ldd	r24, Y+32	; 0x20
    26de:	98 2f       	mov	r25, r24
    26e0:	9c 5f       	subi	r25, 0xFC	; 252
    26e2:	8b a1       	ldd	r24, Y+35	; 0x23
    26e4:	69 2f       	mov	r22, r25
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
			for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    26ec:	1f 8e       	std	Y+31, r1	; 0x1f
    26ee:	9d c0       	rjmp	.+314    	; 0x282a <KEYPAD_GetPressedKeyValue+0x17c>
				if( GPIO_ReadPinValue( Port_Id , Row ) == KEY_BUTTON_PRESSED ){
    26f0:	8b a1       	ldd	r24, Y+35	; 0x23
    26f2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26f4:	0e 94 32 17 	call	0x2e64	; 0x2e64 <GPIO_ReadPinValue>
    26f8:	88 23       	and	r24, r24
    26fa:	09 f0       	breq	.+2      	; 0x26fe <KEYPAD_GetPressedKeyValue+0x50>
    26fc:	93 c0       	rjmp	.+294    	; 0x2824 <KEYPAD_GetPressedKeyValue+0x176>
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	a0 ea       	ldi	r26, 0xA0	; 160
    2704:	b1 e4       	ldi	r27, 0x41	; 65
    2706:	89 8f       	std	Y+25, r24	; 0x19
    2708:	9a 8f       	std	Y+26, r25	; 0x1a
    270a:	ab 8f       	std	Y+27, r26	; 0x1b
    270c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270e:	69 8d       	ldd	r22, Y+25	; 0x19
    2710:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2712:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2714:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	4a e7       	ldi	r20, 0x7A	; 122
    271c:	53 e4       	ldi	r21, 0x43	; 67
    271e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	8d 8b       	std	Y+21, r24	; 0x15
    2728:	9e 8b       	std	Y+22, r25	; 0x16
    272a:	af 8b       	std	Y+23, r26	; 0x17
    272c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    272e:	6d 89       	ldd	r22, Y+21	; 0x15
    2730:	7e 89       	ldd	r23, Y+22	; 0x16
    2732:	8f 89       	ldd	r24, Y+23	; 0x17
    2734:	98 8d       	ldd	r25, Y+24	; 0x18
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e8       	ldi	r20, 0x80	; 128
    273c:	5f e3       	ldi	r21, 0x3F	; 63
    273e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    2742:	88 23       	and	r24, r24
    2744:	2c f4       	brge	.+10     	; 0x2750 <KEYPAD_GetPressedKeyValue+0xa2>
		__ticks = 1;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9c 8b       	std	Y+20, r25	; 0x14
    274c:	8b 8b       	std	Y+19, r24	; 0x13
    274e:	3f c0       	rjmp	.+126    	; 0x27ce <KEYPAD_GetPressedKeyValue+0x120>
	else if (__tmp > 65535)
    2750:	6d 89       	ldd	r22, Y+21	; 0x15
    2752:	7e 89       	ldd	r23, Y+22	; 0x16
    2754:	8f 89       	ldd	r24, Y+23	; 0x17
    2756:	98 8d       	ldd	r25, Y+24	; 0x18
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	3f ef       	ldi	r19, 0xFF	; 255
    275c:	4f e7       	ldi	r20, 0x7F	; 127
    275e:	57 e4       	ldi	r21, 0x47	; 71
    2760:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    2764:	18 16       	cp	r1, r24
    2766:	4c f5       	brge	.+82     	; 0x27ba <KEYPAD_GetPressedKeyValue+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2768:	69 8d       	ldd	r22, Y+25	; 0x19
    276a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    276c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    276e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e2       	ldi	r20, 0x20	; 32
    2776:	51 e4       	ldi	r21, 0x41	; 65
    2778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	bc 01       	movw	r22, r24
    2782:	cd 01       	movw	r24, r26
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9c 8b       	std	Y+20, r25	; 0x14
    278e:	8b 8b       	std	Y+19, r24	; 0x13
    2790:	0f c0       	rjmp	.+30     	; 0x27b0 <KEYPAD_GetPressedKeyValue+0x102>
    2792:	89 e1       	ldi	r24, 0x19	; 25
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	9a 8b       	std	Y+18, r25	; 0x12
    2798:	89 8b       	std	Y+17, r24	; 0x11
    279a:	89 89       	ldd	r24, Y+17	; 0x11
    279c:	9a 89       	ldd	r25, Y+18	; 0x12
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <KEYPAD_GetPressedKeyValue+0xf0>
    27a2:	9a 8b       	std	Y+18, r25	; 0x12
    27a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a6:	8b 89       	ldd	r24, Y+19	; 0x13
    27a8:	9c 89       	ldd	r25, Y+20	; 0x14
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	9c 8b       	std	Y+20, r25	; 0x14
    27ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b0:	8b 89       	ldd	r24, Y+19	; 0x13
    27b2:	9c 89       	ldd	r25, Y+20	; 0x14
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	69 f7       	brne	.-38     	; 0x2792 <KEYPAD_GetPressedKeyValue+0xe4>
    27b8:	14 c0       	rjmp	.+40     	; 0x27e2 <KEYPAD_GetPressedKeyValue+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ba:	6d 89       	ldd	r22, Y+21	; 0x15
    27bc:	7e 89       	ldd	r23, Y+22	; 0x16
    27be:	8f 89       	ldd	r24, Y+23	; 0x17
    27c0:	98 8d       	ldd	r25, Y+24	; 0x18
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	9c 8b       	std	Y+20, r25	; 0x14
    27cc:	8b 8b       	std	Y+19, r24	; 0x13
    27ce:	8b 89       	ldd	r24, Y+19	; 0x13
    27d0:	9c 89       	ldd	r25, Y+20	; 0x14
    27d2:	98 8b       	std	Y+16, r25	; 0x10
    27d4:	8f 87       	std	Y+15, r24	; 0x0f
    27d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d8:	98 89       	ldd	r25, Y+16	; 0x10
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <KEYPAD_GetPressedKeyValue+0x12c>
    27de:	98 8b       	std	Y+16, r25	; 0x10
    27e0:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms( DEBOUNCING_TIME );
					if( GPIO_ReadPinValue( Port_Id , Row ) == KEY_BUTTON_PRESSED ){
    27e2:	8b a1       	ldd	r24, Y+35	; 0x23
    27e4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27e6:	0e 94 32 17 	call	0x2e64	; 0x2e64 <GPIO_ReadPinValue>
    27ea:	88 23       	and	r24, r24
    27ec:	d9 f4       	brne	.+54     	; 0x2824 <KEYPAD_GetPressedKeyValue+0x176>
						KeyValue = KEYPAD_MAP[Row][Col] ;
    27ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27f0:	48 2f       	mov	r20, r24
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	88 a1       	ldd	r24, Y+32	; 0x20
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	ca 01       	movw	r24, r20
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	82 0f       	add	r24, r18
    2806:	93 1f       	adc	r25, r19
    2808:	fc 01       	movw	r30, r24
    280a:	e4 57       	subi	r30, 0x74	; 116
    280c:	fe 4f       	sbci	r31, 0xFE	; 254
    280e:	80 81       	ld	r24, Z
    2810:	8a a3       	std	Y+34, r24	; 0x22
						while( GPIO_ReadPinValue( Port_Id , Row ) == KEY_BUTTON_PRESSED );
    2812:	8b a1       	ldd	r24, Y+35	; 0x23
    2814:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2816:	0e 94 32 17 	call	0x2e64	; 0x2e64 <GPIO_ReadPinValue>
    281a:	88 23       	and	r24, r24
    281c:	d1 f3       	breq	.-12     	; 0x2812 <KEYPAD_GetPressedKeyValue+0x164>
						Flag = 1 ;
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	89 a3       	std	Y+33, r24	; 0x21
    2822:	07 c0       	rjmp	.+14     	; 0x2832 <KEYPAD_GetPressedKeyValue+0x184>

	if( KeyPadConnectionMode == HALF_INPUT_OUTPUT ){
		uint8 Col = 0 , Row = 0 ;
		for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
			GPIO_WritePinValue( Port_Id , Col + KEYPAD_COLS , LOGIC_LOW );
			for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    2824:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2826:	8f 5f       	subi	r24, 0xFF	; 255
    2828:	8f 8f       	std	Y+31, r24	; 0x1f
    282a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    282c:	84 30       	cpi	r24, 0x04	; 4
    282e:	08 f4       	brcc	.+2      	; 0x2832 <KEYPAD_GetPressedKeyValue+0x184>
    2830:	5f cf       	rjmp	.-322    	; 0x26f0 <KEYPAD_GetPressedKeyValue+0x42>
						Flag = 1 ;
						break;
					}
				}
			}
			GPIO_WritePinValue( Port_Id , Col + KEYPAD_COLS , LOGIC_HIGH );
    2832:	88 a1       	ldd	r24, Y+32	; 0x20
    2834:	98 2f       	mov	r25, r24
    2836:	9c 5f       	subi	r25, 0xFC	; 252
    2838:	8b a1       	ldd	r24, Y+35	; 0x23
    283a:	69 2f       	mov	r22, r25
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
			if( Flag == 1 ){
    2842:	89 a1       	ldd	r24, Y+33	; 0x21
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	09 f4       	brne	.+2      	; 0x284a <KEYPAD_GetPressedKeyValue+0x19c>
    2848:	d1 c0       	rjmp	.+418    	; 0x29ec <KEYPAD_GetPressedKeyValue+0x33e>
	uint8 KeyValue = 0b11111111 ;
	uint8 Flag = 0 ;

	if( KeyPadConnectionMode == HALF_INPUT_OUTPUT ){
		uint8 Col = 0 , Row = 0 ;
		for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    284a:	88 a1       	ldd	r24, Y+32	; 0x20
    284c:	8f 5f       	subi	r24, 0xFF	; 255
    284e:	88 a3       	std	Y+32, r24	; 0x20
    2850:	88 a1       	ldd	r24, Y+32	; 0x20
    2852:	84 30       	cpi	r24, 0x04	; 4
    2854:	08 f4       	brcc	.+2      	; 0x2858 <KEYPAD_GetPressedKeyValue+0x1aa>
    2856:	42 cf       	rjmp	.-380    	; 0x26dc <KEYPAD_GetPressedKeyValue+0x2e>
    2858:	c9 c0       	rjmp	.+402    	; 0x29ec <KEYPAD_GetPressedKeyValue+0x33e>
			if( Flag == 1 ){
				break;
			}
		}
	}
	else if( KeyPadConnectionMode == HALF_OUTPUT_INPUT ){
    285a:	80 91 a1 01 	lds	r24, 0x01A1
    285e:	8f 30       	cpi	r24, 0x0F	; 15
    2860:	09 f0       	breq	.+2      	; 0x2864 <KEYPAD_GetPressedKeyValue+0x1b6>
    2862:	c4 c0       	rjmp	.+392    	; 0x29ec <KEYPAD_GetPressedKeyValue+0x33e>
		uint8 Col = 0 , Row = 0 ;
    2864:	1e 8e       	std	Y+30, r1	; 0x1e
    2866:	1d 8e       	std	Y+29, r1	; 0x1d
		for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    2868:	1d 8e       	std	Y+29, r1	; 0x1d
    286a:	bc c0       	rjmp	.+376    	; 0x29e4 <KEYPAD_GetPressedKeyValue+0x336>
			GPIO_WritePinValue( Port_Id , Row , LOGIC_LOW );
    286c:	8b a1       	ldd	r24, Y+35	; 0x23
    286e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
			for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    2876:	1e 8e       	std	Y+30, r1	; 0x1e
    2878:	a6 c0       	rjmp	.+332    	; 0x29c6 <KEYPAD_GetPressedKeyValue+0x318>
				if( GPIO_ReadPinValue( Port_Id , Col + KEYPAD_COLS ) == KEY_BUTTON_PRESSED ){
    287a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    287c:	98 2f       	mov	r25, r24
    287e:	9c 5f       	subi	r25, 0xFC	; 252
    2880:	8b a1       	ldd	r24, Y+35	; 0x23
    2882:	69 2f       	mov	r22, r25
    2884:	0e 94 32 17 	call	0x2e64	; 0x2e64 <GPIO_ReadPinValue>
    2888:	88 23       	and	r24, r24
    288a:	09 f0       	breq	.+2      	; 0x288e <KEYPAD_GetPressedKeyValue+0x1e0>
    288c:	99 c0       	rjmp	.+306    	; 0x29c0 <KEYPAD_GetPressedKeyValue+0x312>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a0 ea       	ldi	r26, 0xA0	; 160
    2894:	b1 e4       	ldi	r27, 0x41	; 65
    2896:	8b 87       	std	Y+11, r24	; 0x0b
    2898:	9c 87       	std	Y+12, r25	; 0x0c
    289a:	ad 87       	std	Y+13, r26	; 0x0d
    289c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289e:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4a e7       	ldi	r20, 0x7A	; 122
    28ac:	53 e4       	ldi	r21, 0x43	; 67
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	8f 83       	std	Y+7, r24	; 0x07
    28b8:	98 87       	std	Y+8, r25	; 0x08
    28ba:	a9 87       	std	Y+9, r26	; 0x09
    28bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28be:	6f 81       	ldd	r22, Y+7	; 0x07
    28c0:	78 85       	ldd	r23, Y+8	; 0x08
    28c2:	89 85       	ldd	r24, Y+9	; 0x09
    28c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e8       	ldi	r20, 0x80	; 128
    28cc:	5f e3       	ldi	r21, 0x3F	; 63
    28ce:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    28d2:	88 23       	and	r24, r24
    28d4:	2c f4       	brge	.+10     	; 0x28e0 <KEYPAD_GetPressedKeyValue+0x232>
		__ticks = 1;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	3f c0       	rjmp	.+126    	; 0x295e <KEYPAD_GetPressedKeyValue+0x2b0>
	else if (__tmp > 65535)
    28e0:	6f 81       	ldd	r22, Y+7	; 0x07
    28e2:	78 85       	ldd	r23, Y+8	; 0x08
    28e4:	89 85       	ldd	r24, Y+9	; 0x09
    28e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	57 e4       	ldi	r21, 0x47	; 71
    28f0:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    28f4:	18 16       	cp	r1, r24
    28f6:	4c f5       	brge	.+82     	; 0x294a <KEYPAD_GetPressedKeyValue+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e2       	ldi	r20, 0x20	; 32
    2906:	51 e4       	ldi	r21, 0x41	; 65
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9e 83       	std	Y+6, r25	; 0x06
    291e:	8d 83       	std	Y+5, r24	; 0x05
    2920:	0f c0       	rjmp	.+30     	; 0x2940 <KEYPAD_GetPressedKeyValue+0x292>
    2922:	89 e1       	ldi	r24, 0x19	; 25
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9c 83       	std	Y+4, r25	; 0x04
    2928:	8b 83       	std	Y+3, r24	; 0x03
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	9c 81       	ldd	r25, Y+4	; 0x04
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <KEYPAD_GetPressedKeyValue+0x280>
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2936:	8d 81       	ldd	r24, Y+5	; 0x05
    2938:	9e 81       	ldd	r25, Y+6	; 0x06
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	9e 83       	std	Y+6, r25	; 0x06
    293e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	9e 81       	ldd	r25, Y+6	; 0x06
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	69 f7       	brne	.-38     	; 0x2922 <KEYPAD_GetPressedKeyValue+0x274>
    2948:	14 c0       	rjmp	.+40     	; 0x2972 <KEYPAD_GetPressedKeyValue+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	6f 81       	ldd	r22, Y+7	; 0x07
    294c:	78 85       	ldd	r23, Y+8	; 0x08
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	9e 83       	std	Y+6, r25	; 0x06
    295c:	8d 83       	std	Y+5, r24	; 0x05
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	9a 83       	std	Y+2, r25	; 0x02
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <KEYPAD_GetPressedKeyValue+0x2bc>
    296e:	9a 83       	std	Y+2, r25	; 0x02
    2970:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms( DEBOUNCING_TIME );
					if( GPIO_ReadPinValue( Port_Id , Col + KEYPAD_COLS ) == KEY_BUTTON_PRESSED ){
    2972:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2974:	98 2f       	mov	r25, r24
    2976:	9c 5f       	subi	r25, 0xFC	; 252
    2978:	8b a1       	ldd	r24, Y+35	; 0x23
    297a:	69 2f       	mov	r22, r25
    297c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <GPIO_ReadPinValue>
    2980:	88 23       	and	r24, r24
    2982:	f1 f4       	brne	.+60     	; 0x29c0 <KEYPAD_GetPressedKeyValue+0x312>
						KeyValue = KEYPAD_MAP[Row][Col] ;
    2984:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2986:	48 2f       	mov	r20, r24
    2988:	50 e0       	ldi	r21, 0x00	; 0
    298a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    298c:	28 2f       	mov	r18, r24
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	ca 01       	movw	r24, r20
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	82 0f       	add	r24, r18
    299c:	93 1f       	adc	r25, r19
    299e:	fc 01       	movw	r30, r24
    29a0:	e4 57       	subi	r30, 0x74	; 116
    29a2:	fe 4f       	sbci	r31, 0xFE	; 254
    29a4:	80 81       	ld	r24, Z
    29a6:	8a a3       	std	Y+34, r24	; 0x22
						while( GPIO_ReadPinValue( Port_Id , Col + KEYPAD_COLS ) == KEY_BUTTON_PRESSED );
    29a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29aa:	98 2f       	mov	r25, r24
    29ac:	9c 5f       	subi	r25, 0xFC	; 252
    29ae:	8b a1       	ldd	r24, Y+35	; 0x23
    29b0:	69 2f       	mov	r22, r25
    29b2:	0e 94 32 17 	call	0x2e64	; 0x2e64 <GPIO_ReadPinValue>
    29b6:	88 23       	and	r24, r24
    29b8:	b9 f3       	breq	.-18     	; 0x29a8 <KEYPAD_GetPressedKeyValue+0x2fa>
						Flag = 1 ;
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	89 a3       	std	Y+33, r24	; 0x21
    29be:	07 c0       	rjmp	.+14     	; 0x29ce <KEYPAD_GetPressedKeyValue+0x320>
	}
	else if( KeyPadConnectionMode == HALF_OUTPUT_INPUT ){
		uint8 Col = 0 , Row = 0 ;
		for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
			GPIO_WritePinValue( Port_Id , Row , LOGIC_LOW );
			for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    29c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29c2:	8f 5f       	subi	r24, 0xFF	; 255
    29c4:	8e 8f       	std	Y+30, r24	; 0x1e
    29c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29c8:	84 30       	cpi	r24, 0x04	; 4
    29ca:	08 f4       	brcc	.+2      	; 0x29ce <KEYPAD_GetPressedKeyValue+0x320>
    29cc:	56 cf       	rjmp	.-340    	; 0x287a <KEYPAD_GetPressedKeyValue+0x1cc>
						Flag = 1 ;
						break;
					}
				}
			}
			GPIO_WritePinValue( Port_Id , Row , LOGIC_HIGH );
    29ce:	8b a1       	ldd	r24, Y+35	; 0x23
    29d0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    29d2:	41 e0       	ldi	r20, 0x01	; 1
    29d4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
			if( Flag == 1 ){
    29d8:	89 a1       	ldd	r24, Y+33	; 0x21
    29da:	81 30       	cpi	r24, 0x01	; 1
    29dc:	39 f0       	breq	.+14     	; 0x29ec <KEYPAD_GetPressedKeyValue+0x33e>
			}
		}
	}
	else if( KeyPadConnectionMode == HALF_OUTPUT_INPUT ){
		uint8 Col = 0 , Row = 0 ;
		for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    29de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29e0:	8f 5f       	subi	r24, 0xFF	; 255
    29e2:	8d 8f       	std	Y+29, r24	; 0x1d
    29e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29e6:	84 30       	cpi	r24, 0x04	; 4
    29e8:	08 f4       	brcc	.+2      	; 0x29ec <KEYPAD_GetPressedKeyValue+0x33e>
    29ea:	40 cf       	rjmp	.-384    	; 0x286c <KEYPAD_GetPressedKeyValue+0x1be>
			if( Flag == 1 ){
				break;
			}
		}
	}
	return KeyValue ;
    29ec:	8a a1       	ldd	r24, Y+34	; 0x22
}
    29ee:	a3 96       	adiw	r28, 0x23	; 35
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	08 95       	ret

00002a00 <BUTTON_ButtonInit>:


/* Function Definitions */


void BUTTON_ButtonInit( uint8 Port_Id , uint8 Pin_Id , uint8 IntPullUpMode ){
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	00 d0       	rcall	.+0      	; 0x2a06 <BUTTON_ButtonInit+0x6>
    2a06:	0f 92       	push	r0
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	89 83       	std	Y+1, r24	; 0x01
    2a0e:	6a 83       	std	Y+2, r22	; 0x02
    2a10:	4b 83       	std	Y+3, r20	; 0x03
	GPIO_SetPinDirection( Port_Id , Pin_Id , PIN_INPUT );
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	6a 81       	ldd	r22, Y+2	; 0x02
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <GPIO_SetPinDirection>
	if( IntPullUpMode == INT_PULLUP ){
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	81 30       	cpi	r24, 0x01	; 1
    2a20:	29 f4       	brne	.+10     	; 0x2a2c <BUTTON_ButtonInit+0x2c>
		GPIO_WritePinValue( Port_Id , Pin_Id , LOGIC_HIGH );
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	6a 81       	ldd	r22, Y+2	; 0x02
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_WritePinValue>
	}
}
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <BUTTON_IsPressed>:

/****************************************************************************************/

uint8 BUTTON_IsPressed( uint8 Port_Id , uint8 Pin_Id , uint8 IntPullUpMode , uint8 ConnectionMode  ){
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <BUTTON_IsPressed+0x6>
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <BUTTON_IsPressed+0x8>
    2a40:	0f 92       	push	r0
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	8a 83       	std	Y+2, r24	; 0x02
    2a48:	6b 83       	std	Y+3, r22	; 0x03
    2a4a:	4c 83       	std	Y+4, r20	; 0x04
    2a4c:	2d 83       	std	Y+5, r18	; 0x05
	uint8 ButtonState ;
	if( ConnectionMode == PULLDOWN_CONNECTION && IntPullUpMode == NO_INT_PULLUP ){
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	88 23       	and	r24, r24
    2a52:	71 f4       	brne	.+28     	; 0x2a70 <BUTTON_IsPressed+0x38>
    2a54:	8c 81       	ldd	r24, Y+4	; 0x04
    2a56:	88 23       	and	r24, r24
    2a58:	59 f4       	brne	.+22     	; 0x2a70 <BUTTON_IsPressed+0x38>
		if( GPIO_ReadPinValue(Port_Id,Pin_Id) ){
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	6b 81       	ldd	r22, Y+3	; 0x03
    2a5e:	0e 94 32 17 	call	0x2e64	; 0x2e64 <GPIO_ReadPinValue>
    2a62:	88 23       	and	r24, r24
    2a64:	19 f0       	breq	.+6      	; 0x2a6c <BUTTON_IsPressed+0x34>
			ButtonState = LOGIC_HIGH ;
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	89 83       	std	Y+1, r24	; 0x01
    2a6a:	0f c0       	rjmp	.+30     	; 0x2a8a <BUTTON_IsPressed+0x52>
		}
		else{
			ButtonState = LOGIC_LOW ;
    2a6c:	19 82       	std	Y+1, r1	; 0x01
    2a6e:	0d c0       	rjmp	.+26     	; 0x2a8a <BUTTON_IsPressed+0x52>
		}
	}
	else if( ConnectionMode == PULLUP_CONNECTION ){
    2a70:	8d 81       	ldd	r24, Y+5	; 0x05
    2a72:	81 30       	cpi	r24, 0x01	; 1
    2a74:	51 f4       	brne	.+20     	; 0x2a8a <BUTTON_IsPressed+0x52>
		if( GPIO_ReadPinValue(Port_Id,Pin_Id) ){
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	6b 81       	ldd	r22, Y+3	; 0x03
    2a7a:	0e 94 32 17 	call	0x2e64	; 0x2e64 <GPIO_ReadPinValue>
    2a7e:	88 23       	and	r24, r24
    2a80:	11 f0       	breq	.+4      	; 0x2a86 <BUTTON_IsPressed+0x4e>
			ButtonState = LOGIC_LOW ;
    2a82:	19 82       	std	Y+1, r1	; 0x01
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <BUTTON_IsPressed+0x52>
		}
		else{
			ButtonState = LOGIC_HIGH ;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return ButtonState ;
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <GPIO_SetPinDirection>:
#include "GPIO.h"


/* Function Definitions */

void GPIO_SetPinDirection( uint8 Port_Id , uint8 Pin_Id , uint8 Direction ){
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <GPIO_SetPinDirection+0x6>
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <GPIO_SetPinDirection+0x8>
    2aa4:	0f 92       	push	r0
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	89 83       	std	Y+1, r24	; 0x01
    2aac:	6a 83       	std	Y+2, r22	; 0x02
    2aae:	4b 83       	std	Y+3, r20	; 0x03
	switch( Port_Id ){
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	3d 83       	std	Y+5, r19	; 0x05
    2ab8:	2c 83       	std	Y+4, r18	; 0x04
    2aba:	8c 81       	ldd	r24, Y+4	; 0x04
    2abc:	9d 81       	ldd	r25, Y+5	; 0x05
    2abe:	81 30       	cpi	r24, 0x01	; 1
    2ac0:	91 05       	cpc	r25, r1
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <GPIO_SetPinDirection+0x2a>
    2ac4:	47 c0       	rjmp	.+142    	; 0x2b54 <GPIO_SetPinDirection+0xb8>
    2ac6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ac8:	3d 81       	ldd	r19, Y+5	; 0x05
    2aca:	22 30       	cpi	r18, 0x02	; 2
    2acc:	31 05       	cpc	r19, r1
    2ace:	2c f4       	brge	.+10     	; 0x2ada <GPIO_SetPinDirection+0x3e>
    2ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	71 f0       	breq	.+28     	; 0x2af4 <GPIO_SetPinDirection+0x58>
    2ad8:	cb c0       	rjmp	.+406    	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
    2ada:	2c 81       	ldd	r18, Y+4	; 0x04
    2adc:	3d 81       	ldd	r19, Y+5	; 0x05
    2ade:	22 30       	cpi	r18, 0x02	; 2
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	09 f4       	brne	.+2      	; 0x2ae6 <GPIO_SetPinDirection+0x4a>
    2ae4:	67 c0       	rjmp	.+206    	; 0x2bb4 <GPIO_SetPinDirection+0x118>
    2ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    2aea:	83 30       	cpi	r24, 0x03	; 3
    2aec:	91 05       	cpc	r25, r1
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <GPIO_SetPinDirection+0x56>
    2af0:	91 c0       	rjmp	.+290    	; 0x2c14 <GPIO_SetPinDirection+0x178>
    2af2:	be c0       	rjmp	.+380    	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
		case  PORTA_ID :
			if( Direction == PIN_INPUT ){
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	88 23       	and	r24, r24
    2af8:	a9 f4       	brne	.+42     	; 0x2b24 <GPIO_SetPinDirection+0x88>
				CLR_BIT( DDRA , Pin_Id );
    2afa:	aa e3       	ldi	r26, 0x3A	; 58
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	ea e3       	ldi	r30, 0x3A	; 58
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	48 2f       	mov	r20, r24
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	28 2f       	mov	r18, r24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	02 2e       	mov	r0, r18
    2b12:	02 c0       	rjmp	.+4      	; 0x2b18 <GPIO_SetPinDirection+0x7c>
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	0a 94       	dec	r0
    2b1a:	e2 f7       	brpl	.-8      	; 0x2b14 <GPIO_SetPinDirection+0x78>
    2b1c:	80 95       	com	r24
    2b1e:	84 23       	and	r24, r20
    2b20:	8c 93       	st	X, r24
    2b22:	a6 c0       	rjmp	.+332    	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
			}
			else if( Direction == PIN_OUTPUT ){
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	81 30       	cpi	r24, 0x01	; 1
    2b28:	09 f0       	breq	.+2      	; 0x2b2c <GPIO_SetPinDirection+0x90>
    2b2a:	a2 c0       	rjmp	.+324    	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
				SET_BIT( DDRA , Pin_Id );
    2b2c:	aa e3       	ldi	r26, 0x3A	; 58
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	ea e3       	ldi	r30, 0x3A	; 58
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	48 2f       	mov	r20, r24
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	02 2e       	mov	r0, r18
    2b44:	02 c0       	rjmp	.+4      	; 0x2b4a <GPIO_SetPinDirection+0xae>
    2b46:	88 0f       	add	r24, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	0a 94       	dec	r0
    2b4c:	e2 f7       	brpl	.-8      	; 0x2b46 <GPIO_SetPinDirection+0xaa>
    2b4e:	84 2b       	or	r24, r20
    2b50:	8c 93       	st	X, r24
    2b52:	8e c0       	rjmp	.+284    	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
			}
			break;
		case  PORTB_ID :
			if( Direction == PIN_INPUT ){
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	88 23       	and	r24, r24
    2b58:	a9 f4       	brne	.+42     	; 0x2b84 <GPIO_SetPinDirection+0xe8>
				CLR_BIT( DDRB , Pin_Id );
    2b5a:	a7 e3       	ldi	r26, 0x37	; 55
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	e7 e3       	ldi	r30, 0x37	; 55
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	48 2f       	mov	r20, r24
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	02 2e       	mov	r0, r18
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <GPIO_SetPinDirection+0xdc>
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	0a 94       	dec	r0
    2b7a:	e2 f7       	brpl	.-8      	; 0x2b74 <GPIO_SetPinDirection+0xd8>
    2b7c:	80 95       	com	r24
    2b7e:	84 23       	and	r24, r20
    2b80:	8c 93       	st	X, r24
    2b82:	76 c0       	rjmp	.+236    	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
			}
			else if( Direction == PIN_OUTPUT ){
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	81 30       	cpi	r24, 0x01	; 1
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <GPIO_SetPinDirection+0xf0>
    2b8a:	72 c0       	rjmp	.+228    	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
				SET_BIT( DDRB , Pin_Id );
    2b8c:	a7 e3       	ldi	r26, 0x37	; 55
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e7 e3       	ldi	r30, 0x37	; 55
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	48 2f       	mov	r20, r24
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	02 2e       	mov	r0, r18
    2ba4:	02 c0       	rjmp	.+4      	; 0x2baa <GPIO_SetPinDirection+0x10e>
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	0a 94       	dec	r0
    2bac:	e2 f7       	brpl	.-8      	; 0x2ba6 <GPIO_SetPinDirection+0x10a>
    2bae:	84 2b       	or	r24, r20
    2bb0:	8c 93       	st	X, r24
    2bb2:	5e c0       	rjmp	.+188    	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
			}
			break;
		case  PORTC_ID :
			if( Direction == PIN_INPUT ){
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	88 23       	and	r24, r24
    2bb8:	a9 f4       	brne	.+42     	; 0x2be4 <GPIO_SetPinDirection+0x148>
				CLR_BIT( DDRC , Pin_Id );
    2bba:	a4 e3       	ldi	r26, 0x34	; 52
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e4 e3       	ldi	r30, 0x34	; 52
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	48 2f       	mov	r20, r24
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	28 2f       	mov	r18, r24
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	02 2e       	mov	r0, r18
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <GPIO_SetPinDirection+0x13c>
    2bd4:	88 0f       	add	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	0a 94       	dec	r0
    2bda:	e2 f7       	brpl	.-8      	; 0x2bd4 <GPIO_SetPinDirection+0x138>
    2bdc:	80 95       	com	r24
    2bde:	84 23       	and	r24, r20
    2be0:	8c 93       	st	X, r24
    2be2:	46 c0       	rjmp	.+140    	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
			}
			else if( Direction == PIN_OUTPUT ){
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	81 30       	cpi	r24, 0x01	; 1
    2be8:	09 f0       	breq	.+2      	; 0x2bec <GPIO_SetPinDirection+0x150>
    2bea:	42 c0       	rjmp	.+132    	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
				SET_BIT( DDRC , Pin_Id );
    2bec:	a4 e3       	ldi	r26, 0x34	; 52
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e4 e3       	ldi	r30, 0x34	; 52
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	48 2f       	mov	r20, r24
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	02 2e       	mov	r0, r18
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <GPIO_SetPinDirection+0x16e>
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	0a 94       	dec	r0
    2c0c:	e2 f7       	brpl	.-8      	; 0x2c06 <GPIO_SetPinDirection+0x16a>
    2c0e:	84 2b       	or	r24, r20
    2c10:	8c 93       	st	X, r24
    2c12:	2e c0       	rjmp	.+92     	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
			}
			break;
		case  PORTD_ID :
			if( Direction == PIN_INPUT ){
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	88 23       	and	r24, r24
    2c18:	a9 f4       	brne	.+42     	; 0x2c44 <GPIO_SetPinDirection+0x1a8>
				CLR_BIT( DDRD , Pin_Id );
    2c1a:	a1 e3       	ldi	r26, 0x31	; 49
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e1 e3       	ldi	r30, 0x31	; 49
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	48 2f       	mov	r20, r24
    2c26:	8a 81       	ldd	r24, Y+2	; 0x02
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	02 2e       	mov	r0, r18
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <GPIO_SetPinDirection+0x19c>
    2c34:	88 0f       	add	r24, r24
    2c36:	99 1f       	adc	r25, r25
    2c38:	0a 94       	dec	r0
    2c3a:	e2 f7       	brpl	.-8      	; 0x2c34 <GPIO_SetPinDirection+0x198>
    2c3c:	80 95       	com	r24
    2c3e:	84 23       	and	r24, r20
    2c40:	8c 93       	st	X, r24
    2c42:	16 c0       	rjmp	.+44     	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
			}
			else if( Direction == PIN_OUTPUT ){
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	81 30       	cpi	r24, 0x01	; 1
    2c48:	99 f4       	brne	.+38     	; 0x2c70 <GPIO_SetPinDirection+0x1d4>
				SET_BIT( DDRD , Pin_Id );
    2c4a:	a1 e3       	ldi	r26, 0x31	; 49
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	e1 e3       	ldi	r30, 0x31	; 49
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	48 2f       	mov	r20, r24
    2c56:	8a 81       	ldd	r24, Y+2	; 0x02
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	02 2e       	mov	r0, r18
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <GPIO_SetPinDirection+0x1cc>
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	0a 94       	dec	r0
    2c6a:	e2 f7       	brpl	.-8      	; 0x2c64 <GPIO_SetPinDirection+0x1c8>
    2c6c:	84 2b       	or	r24, r20
    2c6e:	8c 93       	st	X, r24
			}
			break;
	}
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	cf 91       	pop	r28
    2c7c:	df 91       	pop	r29
    2c7e:	08 95       	ret

00002c80 <GPIO_WritePinValue>:

/****************************************************************************************/

void GPIO_WritePinValue( uint8 Port_Id , uint8 Pin_Id , uint8 Value ){
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	00 d0       	rcall	.+0      	; 0x2c86 <GPIO_WritePinValue+0x6>
    2c86:	00 d0       	rcall	.+0      	; 0x2c88 <GPIO_WritePinValue+0x8>
    2c88:	0f 92       	push	r0
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	6a 83       	std	Y+2, r22	; 0x02
    2c92:	4b 83       	std	Y+3, r20	; 0x03
	switch( Port_Id ){
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	3d 83       	std	Y+5, r19	; 0x05
    2c9c:	2c 83       	std	Y+4, r18	; 0x04
    2c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca2:	81 30       	cpi	r24, 0x01	; 1
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <GPIO_WritePinValue+0x2a>
    2ca8:	47 c0       	rjmp	.+142    	; 0x2d38 <GPIO_WritePinValue+0xb8>
    2caa:	2c 81       	ldd	r18, Y+4	; 0x04
    2cac:	3d 81       	ldd	r19, Y+5	; 0x05
    2cae:	22 30       	cpi	r18, 0x02	; 2
    2cb0:	31 05       	cpc	r19, r1
    2cb2:	2c f4       	brge	.+10     	; 0x2cbe <GPIO_WritePinValue+0x3e>
    2cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	71 f0       	breq	.+28     	; 0x2cd8 <GPIO_WritePinValue+0x58>
    2cbc:	cb c0       	rjmp	.+406    	; 0x2e54 <GPIO_WritePinValue+0x1d4>
    2cbe:	2c 81       	ldd	r18, Y+4	; 0x04
    2cc0:	3d 81       	ldd	r19, Y+5	; 0x05
    2cc2:	22 30       	cpi	r18, 0x02	; 2
    2cc4:	31 05       	cpc	r19, r1
    2cc6:	09 f4       	brne	.+2      	; 0x2cca <GPIO_WritePinValue+0x4a>
    2cc8:	67 c0       	rjmp	.+206    	; 0x2d98 <GPIO_WritePinValue+0x118>
    2cca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cce:	83 30       	cpi	r24, 0x03	; 3
    2cd0:	91 05       	cpc	r25, r1
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <GPIO_WritePinValue+0x56>
    2cd4:	91 c0       	rjmp	.+290    	; 0x2df8 <GPIO_WritePinValue+0x178>
    2cd6:	be c0       	rjmp	.+380    	; 0x2e54 <GPIO_WritePinValue+0x1d4>
		case PORTA_ID :
			if( Value == LOGIC_LOW ){
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	88 23       	and	r24, r24
    2cdc:	a9 f4       	brne	.+42     	; 0x2d08 <GPIO_WritePinValue+0x88>
				CLR_BIT( PORTA , Pin_Id );
    2cde:	ab e3       	ldi	r26, 0x3B	; 59
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	eb e3       	ldi	r30, 0x3B	; 59
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	48 2f       	mov	r20, r24
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	02 2e       	mov	r0, r18
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <GPIO_WritePinValue+0x7c>
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	0a 94       	dec	r0
    2cfe:	e2 f7       	brpl	.-8      	; 0x2cf8 <GPIO_WritePinValue+0x78>
    2d00:	80 95       	com	r24
    2d02:	84 23       	and	r24, r20
    2d04:	8c 93       	st	X, r24
    2d06:	a6 c0       	rjmp	.+332    	; 0x2e54 <GPIO_WritePinValue+0x1d4>
			}
			else if( Value == LOGIC_HIGH ){
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	81 30       	cpi	r24, 0x01	; 1
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <GPIO_WritePinValue+0x90>
    2d0e:	a2 c0       	rjmp	.+324    	; 0x2e54 <GPIO_WritePinValue+0x1d4>
				SET_BIT( PORTA , Pin_Id );
    2d10:	ab e3       	ldi	r26, 0x3B	; 59
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	eb e3       	ldi	r30, 0x3B	; 59
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	48 2f       	mov	r20, r24
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	28 2f       	mov	r18, r24
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	02 2e       	mov	r0, r18
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <GPIO_WritePinValue+0xae>
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	0a 94       	dec	r0
    2d30:	e2 f7       	brpl	.-8      	; 0x2d2a <GPIO_WritePinValue+0xaa>
    2d32:	84 2b       	or	r24, r20
    2d34:	8c 93       	st	X, r24
    2d36:	8e c0       	rjmp	.+284    	; 0x2e54 <GPIO_WritePinValue+0x1d4>
			}
			break;
		case PORTB_ID :
			if( Value == LOGIC_LOW ){
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	88 23       	and	r24, r24
    2d3c:	a9 f4       	brne	.+42     	; 0x2d68 <GPIO_WritePinValue+0xe8>
				CLR_BIT( PORTB , Pin_Id );
    2d3e:	a8 e3       	ldi	r26, 0x38	; 56
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e8 e3       	ldi	r30, 0x38	; 56
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	48 2f       	mov	r20, r24
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	02 2e       	mov	r0, r18
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <GPIO_WritePinValue+0xdc>
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	0a 94       	dec	r0
    2d5e:	e2 f7       	brpl	.-8      	; 0x2d58 <GPIO_WritePinValue+0xd8>
    2d60:	80 95       	com	r24
    2d62:	84 23       	and	r24, r20
    2d64:	8c 93       	st	X, r24
    2d66:	76 c0       	rjmp	.+236    	; 0x2e54 <GPIO_WritePinValue+0x1d4>
			}
			else if( Value == LOGIC_HIGH ){
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	81 30       	cpi	r24, 0x01	; 1
    2d6c:	09 f0       	breq	.+2      	; 0x2d70 <GPIO_WritePinValue+0xf0>
    2d6e:	72 c0       	rjmp	.+228    	; 0x2e54 <GPIO_WritePinValue+0x1d4>
				SET_BIT( PORTB , Pin_Id );
    2d70:	a8 e3       	ldi	r26, 0x38	; 56
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	e8 e3       	ldi	r30, 0x38	; 56
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	48 2f       	mov	r20, r24
    2d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7e:	28 2f       	mov	r18, r24
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	02 2e       	mov	r0, r18
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <GPIO_WritePinValue+0x10e>
    2d8a:	88 0f       	add	r24, r24
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	0a 94       	dec	r0
    2d90:	e2 f7       	brpl	.-8      	; 0x2d8a <GPIO_WritePinValue+0x10a>
    2d92:	84 2b       	or	r24, r20
    2d94:	8c 93       	st	X, r24
    2d96:	5e c0       	rjmp	.+188    	; 0x2e54 <GPIO_WritePinValue+0x1d4>
			}
			break;
		case PORTC_ID :
			if( Value == LOGIC_LOW ){
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	88 23       	and	r24, r24
    2d9c:	a9 f4       	brne	.+42     	; 0x2dc8 <GPIO_WritePinValue+0x148>
				CLR_BIT( PORTC , Pin_Id );
    2d9e:	a5 e3       	ldi	r26, 0x35	; 53
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	e5 e3       	ldi	r30, 0x35	; 53
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	48 2f       	mov	r20, r24
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	02 2e       	mov	r0, r18
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <GPIO_WritePinValue+0x13c>
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	0a 94       	dec	r0
    2dbe:	e2 f7       	brpl	.-8      	; 0x2db8 <GPIO_WritePinValue+0x138>
    2dc0:	80 95       	com	r24
    2dc2:	84 23       	and	r24, r20
    2dc4:	8c 93       	st	X, r24
    2dc6:	46 c0       	rjmp	.+140    	; 0x2e54 <GPIO_WritePinValue+0x1d4>
			}
			else if( Value == LOGIC_HIGH ){
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	81 30       	cpi	r24, 0x01	; 1
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <GPIO_WritePinValue+0x150>
    2dce:	42 c0       	rjmp	.+132    	; 0x2e54 <GPIO_WritePinValue+0x1d4>
				SET_BIT( PORTC , Pin_Id );
    2dd0:	a5 e3       	ldi	r26, 0x35	; 53
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	e5 e3       	ldi	r30, 0x35	; 53
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	48 2f       	mov	r20, r24
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	02 2e       	mov	r0, r18
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <GPIO_WritePinValue+0x16e>
    2dea:	88 0f       	add	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	0a 94       	dec	r0
    2df0:	e2 f7       	brpl	.-8      	; 0x2dea <GPIO_WritePinValue+0x16a>
    2df2:	84 2b       	or	r24, r20
    2df4:	8c 93       	st	X, r24
    2df6:	2e c0       	rjmp	.+92     	; 0x2e54 <GPIO_WritePinValue+0x1d4>
			}
			break;
		case PORTD_ID :
			if( Value == LOGIC_LOW ){
    2df8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfa:	88 23       	and	r24, r24
    2dfc:	a9 f4       	brne	.+42     	; 0x2e28 <GPIO_WritePinValue+0x1a8>
				CLR_BIT( PORTD , Pin_Id );
    2dfe:	a2 e3       	ldi	r26, 0x32	; 50
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e2 e3       	ldi	r30, 0x32	; 50
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	48 2f       	mov	r20, r24
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	28 2f       	mov	r18, r24
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	02 2e       	mov	r0, r18
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <GPIO_WritePinValue+0x19c>
    2e18:	88 0f       	add	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	0a 94       	dec	r0
    2e1e:	e2 f7       	brpl	.-8      	; 0x2e18 <GPIO_WritePinValue+0x198>
    2e20:	80 95       	com	r24
    2e22:	84 23       	and	r24, r20
    2e24:	8c 93       	st	X, r24
    2e26:	16 c0       	rjmp	.+44     	; 0x2e54 <GPIO_WritePinValue+0x1d4>
			}
			else if( Value == LOGIC_HIGH ){
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	81 30       	cpi	r24, 0x01	; 1
    2e2c:	99 f4       	brne	.+38     	; 0x2e54 <GPIO_WritePinValue+0x1d4>
				SET_BIT( PORTD , Pin_Id );
    2e2e:	a2 e3       	ldi	r26, 0x32	; 50
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	e2 e3       	ldi	r30, 0x32	; 50
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	48 2f       	mov	r20, r24
    2e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	02 2e       	mov	r0, r18
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <GPIO_WritePinValue+0x1cc>
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	0a 94       	dec	r0
    2e4e:	e2 f7       	brpl	.-8      	; 0x2e48 <GPIO_WritePinValue+0x1c8>
    2e50:	84 2b       	or	r24, r20
    2e52:	8c 93       	st	X, r24
			}
			break;
	}
}
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <GPIO_ReadPinValue>:

/****************************************************************************************/

uint8 GPIO_ReadPinValue( uint8 Port_Id , uint8 Pin_Id ){
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <GPIO_ReadPinValue+0x6>
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <GPIO_ReadPinValue+0x8>
    2e6c:	0f 92       	push	r0
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	8a 83       	std	Y+2, r24	; 0x02
    2e74:	6b 83       	std	Y+3, r22	; 0x03
	uint8 PinValue ;
	switch( Port_Id ){
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	28 2f       	mov	r18, r24
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	3d 83       	std	Y+5, r19	; 0x05
    2e7e:	2c 83       	std	Y+4, r18	; 0x04
    2e80:	4c 81       	ldd	r20, Y+4	; 0x04
    2e82:	5d 81       	ldd	r21, Y+5	; 0x05
    2e84:	41 30       	cpi	r20, 0x01	; 1
    2e86:	51 05       	cpc	r21, r1
    2e88:	d9 f1       	breq	.+118    	; 0x2f00 <GPIO_ReadPinValue+0x9c>
    2e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8e:	82 30       	cpi	r24, 0x02	; 2
    2e90:	91 05       	cpc	r25, r1
    2e92:	34 f4       	brge	.+12     	; 0x2ea0 <GPIO_ReadPinValue+0x3c>
    2e94:	2c 81       	ldd	r18, Y+4	; 0x04
    2e96:	3d 81       	ldd	r19, Y+5	; 0x05
    2e98:	21 15       	cp	r18, r1
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	71 f0       	breq	.+28     	; 0x2eba <GPIO_ReadPinValue+0x56>
    2e9e:	98 c0       	rjmp	.+304    	; 0x2fd0 <GPIO_ReadPinValue+0x16c>
    2ea0:	4c 81       	ldd	r20, Y+4	; 0x04
    2ea2:	5d 81       	ldd	r21, Y+5	; 0x05
    2ea4:	42 30       	cpi	r20, 0x02	; 2
    2ea6:	51 05       	cpc	r21, r1
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <GPIO_ReadPinValue+0x48>
    2eaa:	4d c0       	rjmp	.+154    	; 0x2f46 <GPIO_ReadPinValue+0xe2>
    2eac:	8c 81       	ldd	r24, Y+4	; 0x04
    2eae:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb0:	83 30       	cpi	r24, 0x03	; 3
    2eb2:	91 05       	cpc	r25, r1
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <GPIO_ReadPinValue+0x54>
    2eb6:	6a c0       	rjmp	.+212    	; 0x2f8c <GPIO_ReadPinValue+0x128>
    2eb8:	8b c0       	rjmp	.+278    	; 0x2fd0 <GPIO_ReadPinValue+0x16c>
		case PORTA_ID :
			if( RED_BIT( PINA , Pin_Id ) ){
    2eba:	e9 e3       	ldi	r30, 0x39	; 57
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	48 2f       	mov	r20, r24
    2ec2:	50 e0       	ldi	r21, 0x00	; 0
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	28 2f       	mov	r18, r24
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <GPIO_ReadPinValue+0x70>
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	2a 95       	dec	r18
    2ed6:	e2 f7       	brpl	.-8      	; 0x2ed0 <GPIO_ReadPinValue+0x6c>
    2ed8:	9a 01       	movw	r18, r20
    2eda:	28 23       	and	r18, r24
    2edc:	39 23       	and	r19, r25
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	88 2f       	mov	r24, r24
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	a9 01       	movw	r20, r18
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <GPIO_ReadPinValue+0x88>
    2ee8:	55 95       	asr	r21
    2eea:	47 95       	ror	r20
    2eec:	8a 95       	dec	r24
    2eee:	e2 f7       	brpl	.-8      	; 0x2ee8 <GPIO_ReadPinValue+0x84>
    2ef0:	ca 01       	movw	r24, r20
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	19 f0       	breq	.+6      	; 0x2efc <GPIO_ReadPinValue+0x98>
				PinValue = LOGIC_HIGH ;
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    2efa:	6a c0       	rjmp	.+212    	; 0x2fd0 <GPIO_ReadPinValue+0x16c>
			}
			else{
				PinValue = LOGIC_LOW ;
    2efc:	19 82       	std	Y+1, r1	; 0x01
    2efe:	68 c0       	rjmp	.+208    	; 0x2fd0 <GPIO_ReadPinValue+0x16c>
			}
			break;
		case PORTB_ID :
			if( RED_BIT( PINB , Pin_Id ) ){
    2f00:	e6 e3       	ldi	r30, 0x36	; 54
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	48 2f       	mov	r20, r24
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	02 c0       	rjmp	.+4      	; 0x2f1a <GPIO_ReadPinValue+0xb6>
    2f16:	88 0f       	add	r24, r24
    2f18:	99 1f       	adc	r25, r25
    2f1a:	2a 95       	dec	r18
    2f1c:	e2 f7       	brpl	.-8      	; 0x2f16 <GPIO_ReadPinValue+0xb2>
    2f1e:	9a 01       	movw	r18, r20
    2f20:	28 23       	and	r18, r24
    2f22:	39 23       	and	r19, r25
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	88 2f       	mov	r24, r24
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	a9 01       	movw	r20, r18
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <GPIO_ReadPinValue+0xce>
    2f2e:	55 95       	asr	r21
    2f30:	47 95       	ror	r20
    2f32:	8a 95       	dec	r24
    2f34:	e2 f7       	brpl	.-8      	; 0x2f2e <GPIO_ReadPinValue+0xca>
    2f36:	ca 01       	movw	r24, r20
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	19 f0       	breq	.+6      	; 0x2f42 <GPIO_ReadPinValue+0xde>
				PinValue = LOGIC_HIGH ;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	47 c0       	rjmp	.+142    	; 0x2fd0 <GPIO_ReadPinValue+0x16c>
			}
			else{
				PinValue = LOGIC_LOW ;
    2f42:	19 82       	std	Y+1, r1	; 0x01
    2f44:	45 c0       	rjmp	.+138    	; 0x2fd0 <GPIO_ReadPinValue+0x16c>
			}
			break;
		case PORTC_ID :
			if( RED_BIT( PINC , Pin_Id ) ){
    2f46:	e3 e3       	ldi	r30, 0x33	; 51
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	48 2f       	mov	r20, r24
    2f4e:	50 e0       	ldi	r21, 0x00	; 0
    2f50:	8b 81       	ldd	r24, Y+3	; 0x03
    2f52:	28 2f       	mov	r18, r24
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <GPIO_ReadPinValue+0xfc>
    2f5c:	88 0f       	add	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	2a 95       	dec	r18
    2f62:	e2 f7       	brpl	.-8      	; 0x2f5c <GPIO_ReadPinValue+0xf8>
    2f64:	9a 01       	movw	r18, r20
    2f66:	28 23       	and	r18, r24
    2f68:	39 23       	and	r19, r25
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	88 2f       	mov	r24, r24
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	a9 01       	movw	r20, r18
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <GPIO_ReadPinValue+0x114>
    2f74:	55 95       	asr	r21
    2f76:	47 95       	ror	r20
    2f78:	8a 95       	dec	r24
    2f7a:	e2 f7       	brpl	.-8      	; 0x2f74 <GPIO_ReadPinValue+0x110>
    2f7c:	ca 01       	movw	r24, r20
    2f7e:	00 97       	sbiw	r24, 0x00	; 0
    2f80:	19 f0       	breq	.+6      	; 0x2f88 <GPIO_ReadPinValue+0x124>
				PinValue = LOGIC_HIGH ;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	89 83       	std	Y+1, r24	; 0x01
    2f86:	24 c0       	rjmp	.+72     	; 0x2fd0 <GPIO_ReadPinValue+0x16c>
			}
			else{
				PinValue = LOGIC_LOW ;
    2f88:	19 82       	std	Y+1, r1	; 0x01
    2f8a:	22 c0       	rjmp	.+68     	; 0x2fd0 <GPIO_ReadPinValue+0x16c>
			}
			break;
		case PORTD_ID :
			if( RED_BIT( PIND , Pin_Id ) ){
    2f8c:	e0 e3       	ldi	r30, 0x30	; 48
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	48 2f       	mov	r20, r24
    2f94:	50 e0       	ldi	r21, 0x00	; 0
    2f96:	8b 81       	ldd	r24, Y+3	; 0x03
    2f98:	28 2f       	mov	r18, r24
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	02 c0       	rjmp	.+4      	; 0x2fa6 <GPIO_ReadPinValue+0x142>
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	2a 95       	dec	r18
    2fa8:	e2 f7       	brpl	.-8      	; 0x2fa2 <GPIO_ReadPinValue+0x13e>
    2faa:	9a 01       	movw	r18, r20
    2fac:	28 23       	and	r18, r24
    2fae:	39 23       	and	r19, r25
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	88 2f       	mov	r24, r24
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	a9 01       	movw	r20, r18
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <GPIO_ReadPinValue+0x15a>
    2fba:	55 95       	asr	r21
    2fbc:	47 95       	ror	r20
    2fbe:	8a 95       	dec	r24
    2fc0:	e2 f7       	brpl	.-8      	; 0x2fba <GPIO_ReadPinValue+0x156>
    2fc2:	ca 01       	movw	r24, r20
    2fc4:	00 97       	sbiw	r24, 0x00	; 0
    2fc6:	19 f0       	breq	.+6      	; 0x2fce <GPIO_ReadPinValue+0x16a>
				PinValue = LOGIC_HIGH ;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	01 c0       	rjmp	.+2      	; 0x2fd0 <GPIO_ReadPinValue+0x16c>
			}
			else{
				PinValue = LOGIC_LOW ;
    2fce:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	return PinValue ;
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <GPIO_TogglePinValue>:

/****************************************************************************************/

void GPIO_TogglePinValue( uint8 Port_Id , uint8 Pin_Id ){
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <GPIO_TogglePinValue+0x6>
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <GPIO_TogglePinValue+0x8>
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	89 83       	std	Y+1, r24	; 0x01
    2ff0:	6a 83       	std	Y+2, r22	; 0x02
	switch( Port_Id ){
    2ff2:	89 81       	ldd	r24, Y+1	; 0x01
    2ff4:	28 2f       	mov	r18, r24
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	3c 83       	std	Y+4, r19	; 0x04
    2ffa:	2b 83       	std	Y+3, r18	; 0x03
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    3000:	81 30       	cpi	r24, 0x01	; 1
    3002:	91 05       	cpc	r25, r1
    3004:	49 f1       	breq	.+82     	; 0x3058 <GPIO_TogglePinValue+0x76>
    3006:	2b 81       	ldd	r18, Y+3	; 0x03
    3008:	3c 81       	ldd	r19, Y+4	; 0x04
    300a:	22 30       	cpi	r18, 0x02	; 2
    300c:	31 05       	cpc	r19, r1
    300e:	2c f4       	brge	.+10     	; 0x301a <GPIO_TogglePinValue+0x38>
    3010:	8b 81       	ldd	r24, Y+3	; 0x03
    3012:	9c 81       	ldd	r25, Y+4	; 0x04
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	61 f0       	breq	.+24     	; 0x3030 <GPIO_TogglePinValue+0x4e>
    3018:	5a c0       	rjmp	.+180    	; 0x30ce <GPIO_TogglePinValue+0xec>
    301a:	2b 81       	ldd	r18, Y+3	; 0x03
    301c:	3c 81       	ldd	r19, Y+4	; 0x04
    301e:	22 30       	cpi	r18, 0x02	; 2
    3020:	31 05       	cpc	r19, r1
    3022:	71 f1       	breq	.+92     	; 0x3080 <GPIO_TogglePinValue+0x9e>
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
    3026:	9c 81       	ldd	r25, Y+4	; 0x04
    3028:	83 30       	cpi	r24, 0x03	; 3
    302a:	91 05       	cpc	r25, r1
    302c:	e9 f1       	breq	.+122    	; 0x30a8 <GPIO_TogglePinValue+0xc6>
    302e:	4f c0       	rjmp	.+158    	; 0x30ce <GPIO_TogglePinValue+0xec>
		case PORTA_ID :
			TOG_BIT( PORTA , Pin_Id );
    3030:	ab e3       	ldi	r26, 0x3B	; 59
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	eb e3       	ldi	r30, 0x3B	; 59
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	48 2f       	mov	r20, r24
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	28 2f       	mov	r18, r24
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	02 2e       	mov	r0, r18
    3048:	02 c0       	rjmp	.+4      	; 0x304e <GPIO_TogglePinValue+0x6c>
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	0a 94       	dec	r0
    3050:	e2 f7       	brpl	.-8      	; 0x304a <GPIO_TogglePinValue+0x68>
    3052:	84 27       	eor	r24, r20
    3054:	8c 93       	st	X, r24
    3056:	3b c0       	rjmp	.+118    	; 0x30ce <GPIO_TogglePinValue+0xec>
			break;
		case PORTB_ID :
			TOG_BIT( PORTB , Pin_Id );
    3058:	a8 e3       	ldi	r26, 0x38	; 56
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	e8 e3       	ldi	r30, 0x38	; 56
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	48 2f       	mov	r20, r24
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	28 2f       	mov	r18, r24
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	02 2e       	mov	r0, r18
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <GPIO_TogglePinValue+0x94>
    3072:	88 0f       	add	r24, r24
    3074:	99 1f       	adc	r25, r25
    3076:	0a 94       	dec	r0
    3078:	e2 f7       	brpl	.-8      	; 0x3072 <GPIO_TogglePinValue+0x90>
    307a:	84 27       	eor	r24, r20
    307c:	8c 93       	st	X, r24
    307e:	27 c0       	rjmp	.+78     	; 0x30ce <GPIO_TogglePinValue+0xec>
			break;
		case PORTC_ID :
			TOG_BIT( PORTC , Pin_Id );
    3080:	a5 e3       	ldi	r26, 0x35	; 53
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	e5 e3       	ldi	r30, 0x35	; 53
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	48 2f       	mov	r20, r24
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	28 2f       	mov	r18, r24
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	02 2e       	mov	r0, r18
    3098:	02 c0       	rjmp	.+4      	; 0x309e <GPIO_TogglePinValue+0xbc>
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	0a 94       	dec	r0
    30a0:	e2 f7       	brpl	.-8      	; 0x309a <GPIO_TogglePinValue+0xb8>
    30a2:	84 27       	eor	r24, r20
    30a4:	8c 93       	st	X, r24
    30a6:	13 c0       	rjmp	.+38     	; 0x30ce <GPIO_TogglePinValue+0xec>
			break;
		case PORTD_ID :
			TOG_BIT( PORTD , Pin_Id );
    30a8:	a2 e3       	ldi	r26, 0x32	; 50
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e2 e3       	ldi	r30, 0x32	; 50
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	48 2f       	mov	r20, r24
    30b4:	8a 81       	ldd	r24, Y+2	; 0x02
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	02 2e       	mov	r0, r18
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <GPIO_TogglePinValue+0xe4>
    30c2:	88 0f       	add	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	0a 94       	dec	r0
    30c8:	e2 f7       	brpl	.-8      	; 0x30c2 <GPIO_TogglePinValue+0xe0>
    30ca:	84 27       	eor	r24, r20
    30cc:	8c 93       	st	X, r24
			break;
	}
}
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <GPIO_SetPortDirection>:

/****************************************************************************************/

void GPIO_SetPortDirection( uint8 Port_Id , uint8 Direction ){
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <GPIO_SetPortDirection+0x6>
    30e2:	00 d0       	rcall	.+0      	; 0x30e4 <GPIO_SetPortDirection+0x8>
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	89 83       	std	Y+1, r24	; 0x01
    30ea:	6a 83       	std	Y+2, r22	; 0x02
	switch( Port_Id ){
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	28 2f       	mov	r18, r24
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	3c 83       	std	Y+4, r19	; 0x04
    30f4:	2b 83       	std	Y+3, r18	; 0x03
    30f6:	8b 81       	ldd	r24, Y+3	; 0x03
    30f8:	9c 81       	ldd	r25, Y+4	; 0x04
    30fa:	81 30       	cpi	r24, 0x01	; 1
    30fc:	91 05       	cpc	r25, r1
    30fe:	d1 f0       	breq	.+52     	; 0x3134 <GPIO_SetPortDirection+0x58>
    3100:	2b 81       	ldd	r18, Y+3	; 0x03
    3102:	3c 81       	ldd	r19, Y+4	; 0x04
    3104:	22 30       	cpi	r18, 0x02	; 2
    3106:	31 05       	cpc	r19, r1
    3108:	2c f4       	brge	.+10     	; 0x3114 <GPIO_SetPortDirection+0x38>
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	9c 81       	ldd	r25, Y+4	; 0x04
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	61 f0       	breq	.+24     	; 0x312a <GPIO_SetPortDirection+0x4e>
    3112:	1e c0       	rjmp	.+60     	; 0x3150 <GPIO_SetPortDirection+0x74>
    3114:	2b 81       	ldd	r18, Y+3	; 0x03
    3116:	3c 81       	ldd	r19, Y+4	; 0x04
    3118:	22 30       	cpi	r18, 0x02	; 2
    311a:	31 05       	cpc	r19, r1
    311c:	81 f0       	breq	.+32     	; 0x313e <GPIO_SetPortDirection+0x62>
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	9c 81       	ldd	r25, Y+4	; 0x04
    3122:	83 30       	cpi	r24, 0x03	; 3
    3124:	91 05       	cpc	r25, r1
    3126:	81 f0       	breq	.+32     	; 0x3148 <GPIO_SetPortDirection+0x6c>
    3128:	13 c0       	rjmp	.+38     	; 0x3150 <GPIO_SetPortDirection+0x74>
		case  PORTA_ID :
			DDRA = Direction ;
    312a:	ea e3       	ldi	r30, 0x3A	; 58
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	8a 81       	ldd	r24, Y+2	; 0x02
    3130:	80 83       	st	Z, r24
    3132:	0e c0       	rjmp	.+28     	; 0x3150 <GPIO_SetPortDirection+0x74>
			break;
		case  PORTB_ID :
			DDRB = Direction ;
    3134:	e7 e3       	ldi	r30, 0x37	; 55
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	80 83       	st	Z, r24
    313c:	09 c0       	rjmp	.+18     	; 0x3150 <GPIO_SetPortDirection+0x74>
			break;
		case  PORTC_ID :
			DDRC = Direction ;
    313e:	e4 e3       	ldi	r30, 0x34	; 52
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	8a 81       	ldd	r24, Y+2	; 0x02
    3144:	80 83       	st	Z, r24
    3146:	04 c0       	rjmp	.+8      	; 0x3150 <GPIO_SetPortDirection+0x74>
			break;
		case  PORTD_ID :
			DDRD = Direction ;
    3148:	e1 e3       	ldi	r30, 0x31	; 49
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	8a 81       	ldd	r24, Y+2	; 0x02
    314e:	80 83       	st	Z, r24
			break;
	}
}
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	cf 91       	pop	r28
    315a:	df 91       	pop	r29
    315c:	08 95       	ret

0000315e <GPIO_WritePortValue>:

/****************************************************************************************/

void GPIO_WritePortValue( uint8 Port_Id , uint8 Value ){
    315e:	df 93       	push	r29
    3160:	cf 93       	push	r28
    3162:	00 d0       	rcall	.+0      	; 0x3164 <GPIO_WritePortValue+0x6>
    3164:	00 d0       	rcall	.+0      	; 0x3166 <GPIO_WritePortValue+0x8>
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	89 83       	std	Y+1, r24	; 0x01
    316c:	6a 83       	std	Y+2, r22	; 0x02
	switch( Port_Id ){
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	28 2f       	mov	r18, r24
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	3c 83       	std	Y+4, r19	; 0x04
    3176:	2b 83       	std	Y+3, r18	; 0x03
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	9c 81       	ldd	r25, Y+4	; 0x04
    317c:	81 30       	cpi	r24, 0x01	; 1
    317e:	91 05       	cpc	r25, r1
    3180:	d1 f0       	breq	.+52     	; 0x31b6 <GPIO_WritePortValue+0x58>
    3182:	2b 81       	ldd	r18, Y+3	; 0x03
    3184:	3c 81       	ldd	r19, Y+4	; 0x04
    3186:	22 30       	cpi	r18, 0x02	; 2
    3188:	31 05       	cpc	r19, r1
    318a:	2c f4       	brge	.+10     	; 0x3196 <GPIO_WritePortValue+0x38>
    318c:	8b 81       	ldd	r24, Y+3	; 0x03
    318e:	9c 81       	ldd	r25, Y+4	; 0x04
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	61 f0       	breq	.+24     	; 0x31ac <GPIO_WritePortValue+0x4e>
    3194:	1e c0       	rjmp	.+60     	; 0x31d2 <GPIO_WritePortValue+0x74>
    3196:	2b 81       	ldd	r18, Y+3	; 0x03
    3198:	3c 81       	ldd	r19, Y+4	; 0x04
    319a:	22 30       	cpi	r18, 0x02	; 2
    319c:	31 05       	cpc	r19, r1
    319e:	81 f0       	breq	.+32     	; 0x31c0 <GPIO_WritePortValue+0x62>
    31a0:	8b 81       	ldd	r24, Y+3	; 0x03
    31a2:	9c 81       	ldd	r25, Y+4	; 0x04
    31a4:	83 30       	cpi	r24, 0x03	; 3
    31a6:	91 05       	cpc	r25, r1
    31a8:	81 f0       	breq	.+32     	; 0x31ca <GPIO_WritePortValue+0x6c>
    31aa:	13 c0       	rjmp	.+38     	; 0x31d2 <GPIO_WritePortValue+0x74>
		case  PORTA_ID :
			PORTA = Value ;
    31ac:	eb e3       	ldi	r30, 0x3B	; 59
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	8a 81       	ldd	r24, Y+2	; 0x02
    31b2:	80 83       	st	Z, r24
    31b4:	0e c0       	rjmp	.+28     	; 0x31d2 <GPIO_WritePortValue+0x74>
			break;
		case  PORTB_ID :
			PORTB = Value ;
    31b6:	e8 e3       	ldi	r30, 0x38	; 56
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	80 83       	st	Z, r24
    31be:	09 c0       	rjmp	.+18     	; 0x31d2 <GPIO_WritePortValue+0x74>
			break;
		case  PORTC_ID :
			PORTC = Value ;
    31c0:	e5 e3       	ldi	r30, 0x35	; 53
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	80 83       	st	Z, r24
    31c8:	04 c0       	rjmp	.+8      	; 0x31d2 <GPIO_WritePortValue+0x74>
			break;
		case  PORTD_ID :
			PORTD = Value ;
    31ca:	e2 e3       	ldi	r30, 0x32	; 50
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	80 83       	st	Z, r24
			break;
	}
}
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <GPIO_ReadPortValue>:

/****************************************************************************************/

uint8 GPIO_ReadPortValue( uint8 Port_Id ){
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <GPIO_ReadPortValue+0x6>
    31e6:	00 d0       	rcall	.+0      	; 0x31e8 <GPIO_ReadPortValue+0x8>
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PortValue ;
	switch( Port_Id ){
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	28 2f       	mov	r18, r24
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	3c 83       	std	Y+4, r19	; 0x04
    31f6:	2b 83       	std	Y+3, r18	; 0x03
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	9c 81       	ldd	r25, Y+4	; 0x04
    31fc:	81 30       	cpi	r24, 0x01	; 1
    31fe:	91 05       	cpc	r25, r1
    3200:	d1 f0       	breq	.+52     	; 0x3236 <GPIO_ReadPortValue+0x56>
    3202:	2b 81       	ldd	r18, Y+3	; 0x03
    3204:	3c 81       	ldd	r19, Y+4	; 0x04
    3206:	22 30       	cpi	r18, 0x02	; 2
    3208:	31 05       	cpc	r19, r1
    320a:	2c f4       	brge	.+10     	; 0x3216 <GPIO_ReadPortValue+0x36>
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	9c 81       	ldd	r25, Y+4	; 0x04
    3210:	00 97       	sbiw	r24, 0x00	; 0
    3212:	61 f0       	breq	.+24     	; 0x322c <GPIO_ReadPortValue+0x4c>
    3214:	1e c0       	rjmp	.+60     	; 0x3252 <GPIO_ReadPortValue+0x72>
    3216:	2b 81       	ldd	r18, Y+3	; 0x03
    3218:	3c 81       	ldd	r19, Y+4	; 0x04
    321a:	22 30       	cpi	r18, 0x02	; 2
    321c:	31 05       	cpc	r19, r1
    321e:	81 f0       	breq	.+32     	; 0x3240 <GPIO_ReadPortValue+0x60>
    3220:	8b 81       	ldd	r24, Y+3	; 0x03
    3222:	9c 81       	ldd	r25, Y+4	; 0x04
    3224:	83 30       	cpi	r24, 0x03	; 3
    3226:	91 05       	cpc	r25, r1
    3228:	81 f0       	breq	.+32     	; 0x324a <GPIO_ReadPortValue+0x6a>
    322a:	13 c0       	rjmp	.+38     	; 0x3252 <GPIO_ReadPortValue+0x72>
		case  PORTA_ID :
			PortValue = PINA ;
    322c:	e9 e3       	ldi	r30, 0x39	; 57
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	89 83       	std	Y+1, r24	; 0x01
    3234:	0e c0       	rjmp	.+28     	; 0x3252 <GPIO_ReadPortValue+0x72>
			break;
		case  PORTB_ID :
			PortValue = PINB ;
    3236:	e6 e3       	ldi	r30, 0x36	; 54
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	89 83       	std	Y+1, r24	; 0x01
    323e:	09 c0       	rjmp	.+18     	; 0x3252 <GPIO_ReadPortValue+0x72>
			break;
		case  PORTC_ID :
			PortValue = PINC ;
    3240:	e3 e3       	ldi	r30, 0x33	; 51
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	89 83       	std	Y+1, r24	; 0x01
    3248:	04 c0       	rjmp	.+8      	; 0x3252 <GPIO_ReadPortValue+0x72>
			break;
		case  PORTD_ID :
			PortValue = PIND ;
    324a:	e0 e3       	ldi	r30, 0x30	; 48
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	80 81       	ld	r24, Z
    3250:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return PortValue ;
    3252:	89 81       	ldd	r24, Y+1	; 0x01
}
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	cf 91       	pop	r28
    325e:	df 91       	pop	r29
    3260:	08 95       	ret

00003262 <main>:

float32 calc(float32 num1, uint8 i, float32 num2, uint8 error);
void runcalc();
void Print_Floating(float operation);

int main() {
    3262:	df 93       	push	r29
    3264:	cf 93       	push	r28
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	aa 97       	sbiw	r28, 0x2a	; 42
    326c:	0f b6       	in	r0, 0x3f	; 63
    326e:	f8 94       	cli
    3270:	de bf       	out	0x3e, r29	; 62
    3272:	0f be       	out	0x3f, r0	; 63
    3274:	cd bf       	out	0x3d, r28	; 61
	LCD_LcdInit( PORTA_ID, PORTB_ID, Mode_8_BIT);
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	61 e0       	ldi	r22, 0x01	; 1
    327a:	41 e0       	ldi	r20, 0x01	; 1
    327c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_LcdInit>
	KEYPAD_KeypadInit(PORTC_ID, HALF_INPUT_OUTPUT);
    3280:	82 e0       	ldi	r24, 0x02	; 2
    3282:	60 ef       	ldi	r22, 0xF0	; 240
    3284:	0e 94 3e 13 	call	0x267c	; 0x267c <KEYPAD_KeypadInit>
	uint8 a[] = "Welcome";
    3288:	ce 01       	movw	r24, r28
    328a:	4e 96       	adiw	r24, 0x1e	; 30
    328c:	9f a3       	std	Y+39, r25	; 0x27
    328e:	8e a3       	std	Y+38, r24	; 0x26
    3290:	e0 e6       	ldi	r30, 0x60	; 96
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	f9 a7       	std	Y+41, r31	; 0x29
    3296:	e8 a7       	std	Y+40, r30	; 0x28
    3298:	f8 e0       	ldi	r31, 0x08	; 8
    329a:	fa a7       	std	Y+42, r31	; 0x2a
    329c:	e8 a5       	ldd	r30, Y+40	; 0x28
    329e:	f9 a5       	ldd	r31, Y+41	; 0x29
    32a0:	00 80       	ld	r0, Z
    32a2:	88 a5       	ldd	r24, Y+40	; 0x28
    32a4:	99 a5       	ldd	r25, Y+41	; 0x29
    32a6:	01 96       	adiw	r24, 0x01	; 1
    32a8:	99 a7       	std	Y+41, r25	; 0x29
    32aa:	88 a7       	std	Y+40, r24	; 0x28
    32ac:	ee a1       	ldd	r30, Y+38	; 0x26
    32ae:	ff a1       	ldd	r31, Y+39	; 0x27
    32b0:	00 82       	st	Z, r0
    32b2:	8e a1       	ldd	r24, Y+38	; 0x26
    32b4:	9f a1       	ldd	r25, Y+39	; 0x27
    32b6:	01 96       	adiw	r24, 0x01	; 1
    32b8:	9f a3       	std	Y+39, r25	; 0x27
    32ba:	8e a3       	std	Y+38, r24	; 0x26
    32bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    32be:	91 50       	subi	r25, 0x01	; 1
    32c0:	9a a7       	std	Y+42, r25	; 0x2a
    32c2:	ea a5       	ldd	r30, Y+42	; 0x2a
    32c4:	ee 23       	and	r30, r30
    32c6:	51 f7       	brne	.-44     	; 0x329c <main+0x3a>
//	uint8 b[] = "By :";
//	uint8 c[] = "Ahmed Waleed";
	uint8 i;
	LCD_MoveCursor(1, 4);
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	64 e0       	ldi	r22, 0x04	; 4
    32cc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <LCD_MoveCursor>
	for (i = 0; i < 7; i++) {
    32d0:	1d 8e       	std	Y+29, r1	; 0x1d
    32d2:	87 c0       	rjmp	.+270    	; 0x33e2 <main+0x180>
		LCD_SendData(a[i]);
    32d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32d6:	28 2f       	mov	r18, r24
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	ce 01       	movw	r24, r28
    32dc:	4e 96       	adiw	r24, 0x1e	; 30
    32de:	fc 01       	movw	r30, r24
    32e0:	e2 0f       	add	r30, r18
    32e2:	f3 1f       	adc	r31, r19
    32e4:	80 81       	ld	r24, Z
    32e6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	a8 ec       	ldi	r26, 0xC8	; 200
    32f0:	b2 e4       	ldi	r27, 0x42	; 66
    32f2:	89 8f       	std	Y+25, r24	; 0x19
    32f4:	9a 8f       	std	Y+26, r25	; 0x1a
    32f6:	ab 8f       	std	Y+27, r26	; 0x1b
    32f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fa:	69 8d       	ldd	r22, Y+25	; 0x19
    32fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a e7       	ldi	r20, 0x7A	; 122
    3308:	53 e4       	ldi	r21, 0x43	; 67
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	8d 8b       	std	Y+21, r24	; 0x15
    3314:	9e 8b       	std	Y+22, r25	; 0x16
    3316:	af 8b       	std	Y+23, r26	; 0x17
    3318:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    331a:	6d 89       	ldd	r22, Y+21	; 0x15
    331c:	7e 89       	ldd	r23, Y+22	; 0x16
    331e:	8f 89       	ldd	r24, Y+23	; 0x17
    3320:	98 8d       	ldd	r25, Y+24	; 0x18
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e8       	ldi	r20, 0x80	; 128
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    332e:	88 23       	and	r24, r24
    3330:	2c f4       	brge	.+10     	; 0x333c <main+0xda>
		__ticks = 1;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9c 8b       	std	Y+20, r25	; 0x14
    3338:	8b 8b       	std	Y+19, r24	; 0x13
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <main+0x158>
	else if (__tmp > 65535)
    333c:	6d 89       	ldd	r22, Y+21	; 0x15
    333e:	7e 89       	ldd	r23, Y+22	; 0x16
    3340:	8f 89       	ldd	r24, Y+23	; 0x17
    3342:	98 8d       	ldd	r25, Y+24	; 0x18
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	4c f5       	brge	.+82     	; 0x33a6 <main+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3354:	69 8d       	ldd	r22, Y+25	; 0x19
    3356:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3358:	8b 8d       	ldd	r24, Y+27	; 0x1b
    335a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e2       	ldi	r20, 0x20	; 32
    3362:	51 e4       	ldi	r21, 0x41	; 65
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9c 8b       	std	Y+20, r25	; 0x14
    337a:	8b 8b       	std	Y+19, r24	; 0x13
    337c:	0f c0       	rjmp	.+30     	; 0x339c <main+0x13a>
    337e:	89 e1       	ldi	r24, 0x19	; 25
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9a 8b       	std	Y+18, r25	; 0x12
    3384:	89 8b       	std	Y+17, r24	; 0x11
    3386:	89 89       	ldd	r24, Y+17	; 0x11
    3388:	9a 89       	ldd	r25, Y+18	; 0x12
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <main+0x128>
    338e:	9a 8b       	std	Y+18, r25	; 0x12
    3390:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3392:	8b 89       	ldd	r24, Y+19	; 0x13
    3394:	9c 89       	ldd	r25, Y+20	; 0x14
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	9c 8b       	std	Y+20, r25	; 0x14
    339a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339c:	8b 89       	ldd	r24, Y+19	; 0x13
    339e:	9c 89       	ldd	r25, Y+20	; 0x14
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	69 f7       	brne	.-38     	; 0x337e <main+0x11c>
    33a4:	14 c0       	rjmp	.+40     	; 0x33ce <main+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a6:	6d 89       	ldd	r22, Y+21	; 0x15
    33a8:	7e 89       	ldd	r23, Y+22	; 0x16
    33aa:	8f 89       	ldd	r24, Y+23	; 0x17
    33ac:	98 8d       	ldd	r25, Y+24	; 0x18
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9c 8b       	std	Y+20, r25	; 0x14
    33b8:	8b 8b       	std	Y+19, r24	; 0x13
    33ba:	8b 89       	ldd	r24, Y+19	; 0x13
    33bc:	9c 89       	ldd	r25, Y+20	; 0x14
    33be:	98 8b       	std	Y+16, r25	; 0x10
    33c0:	8f 87       	std	Y+15, r24	; 0x0f
    33c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c4:	98 89       	ldd	r25, Y+16	; 0x10
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <main+0x164>
    33ca:	98 8b       	std	Y+16, r25	; 0x10
    33cc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		LCD_MoveCursor(1, 4 + i + 1);
    33ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33d0:	98 2f       	mov	r25, r24
    33d2:	9b 5f       	subi	r25, 0xFB	; 251
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	69 2f       	mov	r22, r25
    33d8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <LCD_MoveCursor>
	uint8 a[] = "Welcome";
//	uint8 b[] = "By :";
//	uint8 c[] = "Ahmed Waleed";
	uint8 i;
	LCD_MoveCursor(1, 4);
	for (i = 0; i < 7; i++) {
    33dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33de:	8f 5f       	subi	r24, 0xFF	; 255
    33e0:	8d 8f       	std	Y+29, r24	; 0x1d
    33e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33e4:	87 30       	cpi	r24, 0x07	; 7
    33e6:	08 f4       	brcc	.+2      	; 0x33ea <main+0x188>
    33e8:	75 cf       	rjmp	.-278    	; 0x32d4 <main+0x72>
//	for (i = 0; i < 13; i++) {
//		LCD_SendData(c[i]);
//		_delay_ms(100);
//		LCD_MoveCursor(2, 1+ i + 1);
//	}
	LCD_MoveCursor(1, 0);
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	60 e0       	ldi	r22, 0x00	; 0
    33ee:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <LCD_MoveCursor>
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	aa ef       	ldi	r26, 0xFA	; 250
    33f8:	b3 e4       	ldi	r27, 0x43	; 67
    33fa:	8b 87       	std	Y+11, r24	; 0x0b
    33fc:	9c 87       	std	Y+12, r25	; 0x0c
    33fe:	ad 87       	std	Y+13, r26	; 0x0d
    3400:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3402:	6b 85       	ldd	r22, Y+11	; 0x0b
    3404:	7c 85       	ldd	r23, Y+12	; 0x0c
    3406:	8d 85       	ldd	r24, Y+13	; 0x0d
    3408:	9e 85       	ldd	r25, Y+14	; 0x0e
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	4a e7       	ldi	r20, 0x7A	; 122
    3410:	53 e4       	ldi	r21, 0x43	; 67
    3412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	8f 83       	std	Y+7, r24	; 0x07
    341c:	98 87       	std	Y+8, r25	; 0x08
    341e:	a9 87       	std	Y+9, r26	; 0x09
    3420:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3422:	6f 81       	ldd	r22, Y+7	; 0x07
    3424:	78 85       	ldd	r23, Y+8	; 0x08
    3426:	89 85       	ldd	r24, Y+9	; 0x09
    3428:	9a 85       	ldd	r25, Y+10	; 0x0a
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	40 e8       	ldi	r20, 0x80	; 128
    3430:	5f e3       	ldi	r21, 0x3F	; 63
    3432:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3436:	88 23       	and	r24, r24
    3438:	2c f4       	brge	.+10     	; 0x3444 <main+0x1e2>
		__ticks = 1;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	3f c0       	rjmp	.+126    	; 0x34c2 <main+0x260>
	else if (__tmp > 65535)
    3444:	6f 81       	ldd	r22, Y+7	; 0x07
    3446:	78 85       	ldd	r23, Y+8	; 0x08
    3448:	89 85       	ldd	r24, Y+9	; 0x09
    344a:	9a 85       	ldd	r25, Y+10	; 0x0a
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	3f ef       	ldi	r19, 0xFF	; 255
    3450:	4f e7       	ldi	r20, 0x7F	; 127
    3452:	57 e4       	ldi	r21, 0x47	; 71
    3454:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3458:	18 16       	cp	r1, r24
    345a:	4c f5       	brge	.+82     	; 0x34ae <main+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345c:	6b 85       	ldd	r22, Y+11	; 0x0b
    345e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e2       	ldi	r20, 0x20	; 32
    346a:	51 e4       	ldi	r21, 0x41	; 65
    346c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	bc 01       	movw	r22, r24
    3476:	cd 01       	movw	r24, r26
    3478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	9e 83       	std	Y+6, r25	; 0x06
    3482:	8d 83       	std	Y+5, r24	; 0x05
    3484:	0f c0       	rjmp	.+30     	; 0x34a4 <main+0x242>
    3486:	89 e1       	ldi	r24, 0x19	; 25
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	9c 83       	std	Y+4, r25	; 0x04
    348c:	8b 83       	std	Y+3, r24	; 0x03
    348e:	8b 81       	ldd	r24, Y+3	; 0x03
    3490:	9c 81       	ldd	r25, Y+4	; 0x04
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	f1 f7       	brne	.-4      	; 0x3492 <main+0x230>
    3496:	9c 83       	std	Y+4, r25	; 0x04
    3498:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349a:	8d 81       	ldd	r24, Y+5	; 0x05
    349c:	9e 81       	ldd	r25, Y+6	; 0x06
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	9e 83       	std	Y+6, r25	; 0x06
    34a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	9e 81       	ldd	r25, Y+6	; 0x06
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	69 f7       	brne	.-38     	; 0x3486 <main+0x224>
    34ac:	14 c0       	rjmp	.+40     	; 0x34d6 <main+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ae:	6f 81       	ldd	r22, Y+7	; 0x07
    34b0:	78 85       	ldd	r23, Y+8	; 0x08
    34b2:	89 85       	ldd	r24, Y+9	; 0x09
    34b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	9e 83       	std	Y+6, r25	; 0x06
    34c0:	8d 83       	std	Y+5, r24	; 0x05
    34c2:	8d 81       	ldd	r24, Y+5	; 0x05
    34c4:	9e 81       	ldd	r25, Y+6	; 0x06
    34c6:	9a 83       	std	Y+2, r25	; 0x02
    34c8:	89 83       	std	Y+1, r24	; 0x01
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	9a 81       	ldd	r25, Y+2	; 0x02
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <main+0x26c>
    34d2:	9a 83       	std	Y+2, r25	; 0x02
    34d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_ClearLcd();
    34d6:	0e 94 c3 12 	call	0x2586	; 0x2586 <LCD_ClearLcd>
	runcalc();
    34da:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <runcalc>
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	90 e0       	ldi	r25, 0x00	; 0
}
    34e2:	aa 96       	adiw	r28, 0x2a	; 42
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	cf 91       	pop	r28
    34f0:	df 91       	pop	r29
    34f2:	08 95       	ret

000034f4 <runcalc>:

void runcalc() {
    34f4:	ef 92       	push	r14
    34f6:	ff 92       	push	r15
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    34fc:	df 93       	push	r29
    34fe:	cf 93       	push	r28
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
    3504:	66 97       	sbiw	r28, 0x16	; 22
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61

	float32 num1 = 0, num2 = 0, counter = 0, ans = 0;
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	a0 e0       	ldi	r26, 0x00	; 0
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	8b 8b       	std	Y+19, r24	; 0x13
    351a:	9c 8b       	std	Y+20, r25	; 0x14
    351c:	ad 8b       	std	Y+21, r26	; 0x15
    351e:	be 8b       	std	Y+22, r27	; 0x16
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	a0 e0       	ldi	r26, 0x00	; 0
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	8f 87       	std	Y+15, r24	; 0x0f
    352a:	98 8b       	std	Y+16, r25	; 0x10
    352c:	a9 8b       	std	Y+17, r26	; 0x11
    352e:	ba 8b       	std	Y+18, r27	; 0x12
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	a0 e0       	ldi	r26, 0x00	; 0
    3536:	b0 e0       	ldi	r27, 0x00	; 0
    3538:	8b 87       	std	Y+11, r24	; 0x0b
    353a:	9c 87       	std	Y+12, r25	; 0x0c
    353c:	ad 87       	std	Y+13, r26	; 0x0d
    353e:	be 87       	std	Y+14, r27	; 0x0e
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	a0 e0       	ldi	r26, 0x00	; 0
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	8f 83       	std	Y+7, r24	; 0x07
    354a:	98 87       	std	Y+8, r25	; 0x08
    354c:	a9 87       	std	Y+9, r26	; 0x09
    354e:	ba 87       	std	Y+10, r27	; 0x0a
	uint8 c = 0, operator = 0, com1 = 0, com2 = 0, error = 0, ans_flag = 0;
    3550:	1e 82       	std	Y+6, r1	; 0x06
    3552:	1d 82       	std	Y+5, r1	; 0x05
    3554:	1c 82       	std	Y+4, r1	; 0x04
    3556:	1b 82       	std	Y+3, r1	; 0x03
    3558:	1a 82       	std	Y+2, r1	; 0x02
    355a:	19 82       	std	Y+1, r1	; 0x01

	while (1) {
		c = KEYPAD_GetPressedKeyValue(PORTC_ID);
    355c:	82 e0       	ldi	r24, 0x02	; 2
    355e:	0e 94 57 13 	call	0x26ae	; 0x26ae <KEYPAD_GetPressedKeyValue>
    3562:	8e 83       	std	Y+6, r24	; 0x06
		if (c == NULL_LCD)
    3564:	8e 81       	ldd	r24, Y+6	; 0x06
    3566:	8f 3f       	cpi	r24, 0xFF	; 255
    3568:	c9 f3       	breq	.-14     	; 0x355c <runcalc+0x68>
			continue;

		// to clear lcd when c is clicked
		if (c == 'c') {
    356a:	8e 81       	ldd	r24, Y+6	; 0x06
    356c:	83 36       	cpi	r24, 0x63	; 99
    356e:	61 f5       	brne	.+88     	; 0x35c8 <runcalc+0xd4>
			LCD_ClearLcd();
    3570:	0e 94 c3 12 	call	0x2586	; 0x2586 <LCD_ClearLcd>
			num1 = 0, num2 = 0;
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	a0 e0       	ldi	r26, 0x00	; 0
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	8b 8b       	std	Y+19, r24	; 0x13
    357e:	9c 8b       	std	Y+20, r25	; 0x14
    3580:	ad 8b       	std	Y+21, r26	; 0x15
    3582:	be 8b       	std	Y+22, r27	; 0x16
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	a0 e0       	ldi	r26, 0x00	; 0
    358a:	b0 e0       	ldi	r27, 0x00	; 0
    358c:	8f 87       	std	Y+15, r24	; 0x0f
    358e:	98 8b       	std	Y+16, r25	; 0x10
    3590:	a9 8b       	std	Y+17, r26	; 0x11
    3592:	ba 8b       	std	Y+18, r27	; 0x12
			com1 = 0, com2 = 0;
    3594:	1c 82       	std	Y+4, r1	; 0x04
    3596:	1b 82       	std	Y+3, r1	; 0x03
			error = 0, operator = 0;
    3598:	1a 82       	std	Y+2, r1	; 0x02
    359a:	1d 82       	std	Y+5, r1	; 0x05
			counter = 0, neg = 0, neg2 = 0, ans = 0, ans_flag = 0;
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	a0 e0       	ldi	r26, 0x00	; 0
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	8b 87       	std	Y+11, r24	; 0x0b
    35a6:	9c 87       	std	Y+12, r25	; 0x0c
    35a8:	ad 87       	std	Y+13, r26	; 0x0d
    35aa:	be 87       	std	Y+14, r27	; 0x0e
    35ac:	10 92 9c 01 	sts	0x019C, r1
    35b0:	10 92 9d 01 	sts	0x019D, r1
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	a0 e0       	ldi	r26, 0x00	; 0
    35ba:	b0 e0       	ldi	r27, 0x00	; 0
    35bc:	8f 83       	std	Y+7, r24	; 0x07
    35be:	98 87       	std	Y+8, r25	; 0x08
    35c0:	a9 87       	std	Y+9, r26	; 0x09
    35c2:	ba 87       	std	Y+10, r27	; 0x0a
    35c4:	19 82       	std	Y+1, r1	; 0x01
    35c6:	ca cf       	rjmp	.-108    	; 0x355c <runcalc+0x68>
			continue;
		}
		// handling ans

		if ((c == '+' || c == '-' || c == '*' || c == '/')
    35c8:	8e 81       	ldd	r24, Y+6	; 0x06
    35ca:	8b 32       	cpi	r24, 0x2B	; 43
    35cc:	51 f0       	breq	.+20     	; 0x35e2 <runcalc+0xee>
    35ce:	8e 81       	ldd	r24, Y+6	; 0x06
    35d0:	8d 32       	cpi	r24, 0x2D	; 45
    35d2:	39 f0       	breq	.+14     	; 0x35e2 <runcalc+0xee>
    35d4:	8e 81       	ldd	r24, Y+6	; 0x06
    35d6:	8a 32       	cpi	r24, 0x2A	; 42
    35d8:	21 f0       	breq	.+8      	; 0x35e2 <runcalc+0xee>
    35da:	8e 81       	ldd	r24, Y+6	; 0x06
    35dc:	8f 32       	cpi	r24, 0x2F	; 47
    35de:	09 f0       	breq	.+2      	; 0x35e2 <runcalc+0xee>
    35e0:	73 c0       	rjmp	.+230    	; 0x36c8 <runcalc+0x1d4>
    35e2:	6f 81       	ldd	r22, Y+7	; 0x07
    35e4:	78 85       	ldd	r23, Y+8	; 0x08
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ea:	27 eb       	ldi	r18, 0xB7	; 183
    35ec:	33 e4       	ldi	r19, 0x43	; 67
    35ee:	4a eb       	ldi	r20, 0xBA	; 186
    35f0:	51 ed       	ldi	r21, 0xD1	; 209
    35f2:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    35f6:	18 16       	cp	r1, r24
    35f8:	0c f0       	brlt	.+2      	; 0x35fc <runcalc+0x108>
    35fa:	66 c0       	rjmp	.+204    	; 0x36c8 <runcalc+0x1d4>
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	81 30       	cpi	r24, 0x01	; 1
    3600:	09 f0       	breq	.+2      	; 0x3604 <runcalc+0x110>
    3602:	62 c0       	rjmp	.+196    	; 0x36c8 <runcalc+0x1d4>
				&& ans > -100000000000 && ans_flag == 1) {
			LCD_ClearLcd();
    3604:	0e 94 c3 12 	call	0x2586	; 0x2586 <LCD_ClearLcd>
			num1 = 0, num2 = 0;
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	a0 e0       	ldi	r26, 0x00	; 0
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	8b 8b       	std	Y+19, r24	; 0x13
    3612:	9c 8b       	std	Y+20, r25	; 0x14
    3614:	ad 8b       	std	Y+21, r26	; 0x15
    3616:	be 8b       	std	Y+22, r27	; 0x16
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	a0 e0       	ldi	r26, 0x00	; 0
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	8f 87       	std	Y+15, r24	; 0x0f
    3622:	98 8b       	std	Y+16, r25	; 0x10
    3624:	a9 8b       	std	Y+17, r26	; 0x11
    3626:	ba 8b       	std	Y+18, r27	; 0x12
			com1 = 0, com2 = 0;
    3628:	1c 82       	std	Y+4, r1	; 0x04
    362a:	1b 82       	std	Y+3, r1	; 0x03
			error = 0, operator = 0;
    362c:	1a 82       	std	Y+2, r1	; 0x02
    362e:	1d 82       	std	Y+5, r1	; 0x05
			neg = 0, neg2 = 0;
    3630:	10 92 9c 01 	sts	0x019C, r1
    3634:	10 92 9d 01 	sts	0x019D, r1
			operator = c;
    3638:	8e 81       	ldd	r24, Y+6	; 0x06
    363a:	8d 83       	std	Y+5, r24	; 0x05

//			if (ans < 0)
//				neg = 1;
			if (ans != (int) ans) {
    363c:	6f 81       	ldd	r22, Y+7	; 0x07
    363e:	78 85       	ldd	r23, Y+8	; 0x08
    3640:	89 85       	ldd	r24, Y+9	; 0x09
    3642:	9a 85       	ldd	r25, Y+10	; 0x0a
    3644:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	aa 27       	eor	r26, r26
    364e:	97 fd       	sbrc	r25, 7
    3650:	a0 95       	com	r26
    3652:	ba 2f       	mov	r27, r26
    3654:	bc 01       	movw	r22, r24
    3656:	cd 01       	movw	r24, r26
    3658:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	bc 01       	movw	r22, r24
    3662:	cd 01       	movw	r24, r26
    3664:	2f 81       	ldd	r18, Y+7	; 0x07
    3666:	38 85       	ldd	r19, Y+8	; 0x08
    3668:	49 85       	ldd	r20, Y+9	; 0x09
    366a:	5a 85       	ldd	r21, Y+10	; 0x0a
    366c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__nesf2>
    3670:	88 23       	and	r24, r24
    3672:	49 f0       	breq	.+18     	; 0x3686 <runcalc+0x192>
				Print_Floating(ans);
    3674:	8f 81       	ldd	r24, Y+7	; 0x07
    3676:	98 85       	ldd	r25, Y+8	; 0x08
    3678:	a9 85       	ldd	r26, Y+9	; 0x09
    367a:	ba 85       	ldd	r27, Y+10	; 0x0a
    367c:	bc 01       	movw	r22, r24
    367e:	cd 01       	movw	r24, r26
    3680:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <Print_Floating>
    3684:	10 c0       	rjmp	.+32     	; 0x36a6 <runcalc+0x1b2>

			} else {
				LCD_DisplayNumber((int) ans);
    3686:	6f 81       	ldd	r22, Y+7	; 0x07
    3688:	78 85       	ldd	r23, Y+8	; 0x08
    368a:	89 85       	ldd	r24, Y+9	; 0x09
    368c:	9a 85       	ldd	r25, Y+10	; 0x0a
    368e:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	aa 27       	eor	r26, r26
    3698:	97 fd       	sbrc	r25, 7
    369a:	a0 95       	com	r26
    369c:	ba 2f       	mov	r27, r26
    369e:	bc 01       	movw	r22, r24
    36a0:	cd 01       	movw	r24, r26
    36a2:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_DisplayNumber>
			}
			LCD_SendData(c);
    36a6:	8e 81       	ldd	r24, Y+6	; 0x06
    36a8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
			num1 = ans;
    36ac:	8f 81       	ldd	r24, Y+7	; 0x07
    36ae:	98 85       	ldd	r25, Y+8	; 0x08
    36b0:	a9 85       	ldd	r26, Y+9	; 0x09
    36b2:	ba 85       	ldd	r27, Y+10	; 0x0a
    36b4:	8b 8b       	std	Y+19, r24	; 0x13
    36b6:	9c 8b       	std	Y+20, r25	; 0x14
    36b8:	ad 8b       	std	Y+21, r26	; 0x15
    36ba:	be 8b       	std	Y+22, r27	; 0x16
			com1 = 1;
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	8c 83       	std	Y+4, r24	; 0x04
			c = KEYPAD_GetPressedKeyValue(PORTC_ID);
    36c0:	82 e0       	ldi	r24, 0x02	; 2
    36c2:	0e 94 57 13 	call	0x26ae	; 0x26ae <KEYPAD_GetPressedKeyValue>
    36c6:	8e 83       	std	Y+6, r24	; 0x06

		}

		// to avoid starting with / or *
		if ((c == '*' || c == '/') && counter == 0) {
    36c8:	8e 81       	ldd	r24, Y+6	; 0x06
    36ca:	8a 32       	cpi	r24, 0x2A	; 42
    36cc:	19 f0       	breq	.+6      	; 0x36d4 <runcalc+0x1e0>
    36ce:	8e 81       	ldd	r24, Y+6	; 0x06
    36d0:	8f 32       	cpi	r24, 0x2F	; 47
    36d2:	71 f4       	brne	.+28     	; 0x36f0 <runcalc+0x1fc>
    36d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36da:	9e 85       	ldd	r25, Y+14	; 0x0e
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e0       	ldi	r20, 0x00	; 0
    36e2:	50 e0       	ldi	r21, 0x00	; 0
    36e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    36e8:	88 23       	and	r24, r24
    36ea:	11 f4       	brne	.+4      	; 0x36f0 <runcalc+0x1fc>
			error = 1;
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	8a 83       	std	Y+2, r24	; 0x02
		}
		// to check if the number is positive or negative
		if ((c == '-' || c == '+') && counter == 0) {
    36f0:	8e 81       	ldd	r24, Y+6	; 0x06
    36f2:	8d 32       	cpi	r24, 0x2D	; 45
    36f4:	19 f0       	breq	.+6      	; 0x36fc <runcalc+0x208>
    36f6:	8e 81       	ldd	r24, Y+6	; 0x06
    36f8:	8b 32       	cpi	r24, 0x2B	; 43
    36fa:	b1 f4       	brne	.+44     	; 0x3728 <runcalc+0x234>
    36fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3700:	8d 85       	ldd	r24, Y+13	; 0x0d
    3702:	9e 85       	ldd	r25, Y+14	; 0x0e
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e0       	ldi	r20, 0x00	; 0
    370a:	50 e0       	ldi	r21, 0x00	; 0
    370c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3710:	88 23       	and	r24, r24
    3712:	51 f4       	brne	.+20     	; 0x3728 <runcalc+0x234>
			if (c == '-')
    3714:	8e 81       	ldd	r24, Y+6	; 0x06
    3716:	8d 32       	cpi	r24, 0x2D	; 45
    3718:	19 f4       	brne	.+6      	; 0x3720 <runcalc+0x22c>
				neg = 1;
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	80 93 9c 01 	sts	0x019C, r24
			LCD_SendData(c);
    3720:	8e 81       	ldd	r24, Y+6	; 0x06
    3722:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
    3726:	1a cf       	rjmp	.-460    	; 0x355c <runcalc+0x68>
			continue;
		}

		// Getting first number
		if (com1 == 0) {
    3728:	8c 81       	ldd	r24, Y+4	; 0x04
    372a:	88 23       	and	r24, r24
    372c:	09 f0       	breq	.+2      	; 0x3730 <runcalc+0x23c>
    372e:	a0 c0       	rjmp	.+320    	; 0x3870 <runcalc+0x37c>
			while (1) {
				if ((c == '+' || c == '-' || c == '*' || c == '/')
    3730:	8e 81       	ldd	r24, Y+6	; 0x06
    3732:	8b 32       	cpi	r24, 0x2B	; 43
    3734:	51 f0       	breq	.+20     	; 0x374a <runcalc+0x256>
    3736:	8e 81       	ldd	r24, Y+6	; 0x06
    3738:	8d 32       	cpi	r24, 0x2D	; 45
    373a:	39 f0       	breq	.+14     	; 0x374a <runcalc+0x256>
    373c:	8e 81       	ldd	r24, Y+6	; 0x06
    373e:	8a 32       	cpi	r24, 0x2A	; 42
    3740:	21 f0       	breq	.+8      	; 0x374a <runcalc+0x256>
    3742:	8e 81       	ldd	r24, Y+6	; 0x06
    3744:	8f 32       	cpi	r24, 0x2F	; 47
    3746:	09 f0       	breq	.+2      	; 0x374a <runcalc+0x256>
    3748:	52 c0       	rjmp	.+164    	; 0x37ee <runcalc+0x2fa>
    374a:	6b 85       	ldd	r22, Y+11	; 0x0b
    374c:	7c 85       	ldd	r23, Y+12	; 0x0c
    374e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3750:	9e 85       	ldd	r25, Y+14	; 0x0e
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e0       	ldi	r20, 0x00	; 0
    3758:	50 e0       	ldi	r21, 0x00	; 0
    375a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__nesf2>
    375e:	88 23       	and	r24, r24
    3760:	09 f4       	brne	.+2      	; 0x3764 <runcalc+0x270>
    3762:	45 c0       	rjmp	.+138    	; 0x37ee <runcalc+0x2fa>
						&& counter != 0) {
					LCD_SendData(c);
    3764:	8e 81       	ldd	r24, Y+6	; 0x06
    3766:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
					operator = c;
    376a:	8e 81       	ldd	r24, Y+6	; 0x06
    376c:	8d 83       	std	Y+5, r24	; 0x05
					com1 = 1;
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	8c 83       	std	Y+4, r24	; 0x04
					c = KEYPAD_GetPressedKeyValue(PORTC_ID);
    3772:	82 e0       	ldi	r24, 0x02	; 2
    3774:	0e 94 57 13 	call	0x26ae	; 0x26ae <KEYPAD_GetPressedKeyValue>
    3778:	8e 83       	std	Y+6, r24	; 0x06
    377a:	04 c0       	rjmp	.+8      	; 0x3784 <runcalc+0x290>
					while (c == NULL_LCD) {
						c = KEYPAD_GetPressedKeyValue(PORTC_ID);
    377c:	82 e0       	ldi	r24, 0x02	; 2
    377e:	0e 94 57 13 	call	0x26ae	; 0x26ae <KEYPAD_GetPressedKeyValue>
    3782:	8e 83       	std	Y+6, r24	; 0x06
						&& counter != 0) {
					LCD_SendData(c);
					operator = c;
					com1 = 1;
					c = KEYPAD_GetPressedKeyValue(PORTC_ID);
					while (c == NULL_LCD) {
    3784:	8e 81       	ldd	r24, Y+6	; 0x06
    3786:	8f 3f       	cpi	r24, 0xFF	; 255
    3788:	c9 f3       	breq	.-14     	; 0x377c <runcalc+0x288>
						c = KEYPAD_GetPressedKeyValue(PORTC_ID);
					}
					// to check if number two positive or negative
					if (operator == '*' || operator == '/' || c == '-'
    378a:	8d 81       	ldd	r24, Y+5	; 0x05
    378c:	8a 32       	cpi	r24, 0x2A	; 42
    378e:	51 f0       	breq	.+20     	; 0x37a4 <runcalc+0x2b0>
    3790:	8d 81       	ldd	r24, Y+5	; 0x05
    3792:	8f 32       	cpi	r24, 0x2F	; 47
    3794:	39 f0       	breq	.+14     	; 0x37a4 <runcalc+0x2b0>
    3796:	8e 81       	ldd	r24, Y+6	; 0x06
    3798:	8d 32       	cpi	r24, 0x2D	; 45
    379a:	21 f0       	breq	.+8      	; 0x37a4 <runcalc+0x2b0>
    379c:	8e 81       	ldd	r24, Y+6	; 0x06
    379e:	8b 32       	cpi	r24, 0x2B	; 43
    37a0:	09 f0       	breq	.+2      	; 0x37a4 <runcalc+0x2b0>
    37a2:	66 c0       	rjmp	.+204    	; 0x3870 <runcalc+0x37c>
							|| c == '+') {
						if (c == '-' || c == '+') {
    37a4:	8e 81       	ldd	r24, Y+6	; 0x06
    37a6:	8d 32       	cpi	r24, 0x2D	; 45
    37a8:	21 f0       	breq	.+8      	; 0x37b2 <runcalc+0x2be>
    37aa:	8e 81       	ldd	r24, Y+6	; 0x06
    37ac:	8b 32       	cpi	r24, 0x2B	; 43
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <runcalc+0x2be>
    37b0:	5f c0       	rjmp	.+190    	; 0x3870 <runcalc+0x37c>
							if (c == '-') {
    37b2:	8e 81       	ldd	r24, Y+6	; 0x06
    37b4:	8d 32       	cpi	r24, 0x2D	; 45
    37b6:	39 f4       	brne	.+14     	; 0x37c6 <runcalc+0x2d2>
								neg2 = 1;
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	80 93 9d 01 	sts	0x019D, r24
								LCD_SendData(c);
    37be:	8e 81       	ldd	r24, Y+6	; 0x06
    37c0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
    37c4:	0f c0       	rjmp	.+30     	; 0x37e4 <runcalc+0x2f0>
							} else if (c == '+') {
    37c6:	8e 81       	ldd	r24, Y+6	; 0x06
    37c8:	8b 32       	cpi	r24, 0x2B	; 43
    37ca:	21 f4       	brne	.+8      	; 0x37d4 <runcalc+0x2e0>
								LCD_SendData(c);
    37cc:	8e 81       	ldd	r24, Y+6	; 0x06
    37ce:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
    37d2:	08 c0       	rjmp	.+16     	; 0x37e4 <runcalc+0x2f0>
							}
							else if(c=='*'||c=='/'){
    37d4:	8e 81       	ldd	r24, Y+6	; 0x06
    37d6:	8a 32       	cpi	r24, 0x2A	; 42
    37d8:	19 f0       	breq	.+6      	; 0x37e0 <runcalc+0x2ec>
    37da:	8e 81       	ldd	r24, Y+6	; 0x06
    37dc:	8f 32       	cpi	r24, 0x2F	; 47
    37de:	11 f4       	brne	.+4      	; 0x37e4 <runcalc+0x2f0>
								error = 1;}
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	8a 83       	std	Y+2, r24	; 0x02
							c = KEYPAD_GetPressedKeyValue(PORTC_ID);
    37e4:	82 e0       	ldi	r24, 0x02	; 2
    37e6:	0e 94 57 13 	call	0x26ae	; 0x26ae <KEYPAD_GetPressedKeyValue>
    37ea:	8e 83       	std	Y+6, r24	; 0x06
    37ec:	41 c0       	rjmp	.+130    	; 0x3870 <runcalc+0x37c>
						}
					}
					break;
				}
				counter++;
    37ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	40 e8       	ldi	r20, 0x80	; 128
    37fc:	5f e3       	ldi	r21, 0x3F	; 63
    37fe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	8b 87       	std	Y+11, r24	; 0x0b
    3808:	9c 87       	std	Y+12, r25	; 0x0c
    380a:	ad 87       	std	Y+13, r26	; 0x0d
    380c:	be 87       	std	Y+14, r27	; 0x0e
				LCD_SendData(c);
    380e:	8e 81       	ldd	r24, Y+6	; 0x06
    3810:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
				num1 = (c - '0') + (num1 * 10);
    3814:	8e 81       	ldd	r24, Y+6	; 0x06
    3816:	88 2f       	mov	r24, r24
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	c0 97       	sbiw	r24, 0x30	; 48
    381c:	aa 27       	eor	r26, r26
    381e:	97 fd       	sbrc	r25, 7
    3820:	a0 95       	com	r26
    3822:	ba 2f       	mov	r27, r26
    3824:	bc 01       	movw	r22, r24
    3826:	cd 01       	movw	r24, r26
    3828:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    382c:	7b 01       	movw	r14, r22
    382e:	8c 01       	movw	r16, r24
    3830:	6b 89       	ldd	r22, Y+19	; 0x13
    3832:	7c 89       	ldd	r23, Y+20	; 0x14
    3834:	8d 89       	ldd	r24, Y+21	; 0x15
    3836:	9e 89       	ldd	r25, Y+22	; 0x16
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	9c 01       	movw	r18, r24
    384a:	ad 01       	movw	r20, r26
    384c:	c8 01       	movw	r24, r16
    384e:	b7 01       	movw	r22, r14
    3850:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	8b 8b       	std	Y+19, r24	; 0x13
    385a:	9c 8b       	std	Y+20, r25	; 0x14
    385c:	ad 8b       	std	Y+21, r26	; 0x15
    385e:	be 8b       	std	Y+22, r27	; 0x16
				c = KEYPAD_GetPressedKeyValue(PORTC_ID);
    3860:	82 e0       	ldi	r24, 0x02	; 2
    3862:	0e 94 57 13 	call	0x26ae	; 0x26ae <KEYPAD_GetPressedKeyValue>
    3866:	8e 83       	std	Y+6, r24	; 0x06
				if (c == NULL_LCD)
    3868:	8e 81       	ldd	r24, Y+6	; 0x06
    386a:	8f 3f       	cpi	r24, 0xFF	; 255
    386c:	09 f0       	breq	.+2      	; 0x3870 <runcalc+0x37c>
    386e:	60 cf       	rjmp	.-320    	; 0x3730 <runcalc+0x23c>
					break;
			}
		}
		if (operator == '*' || operator == '/') {
    3870:	8d 81       	ldd	r24, Y+5	; 0x05
    3872:	8a 32       	cpi	r24, 0x2A	; 42
    3874:	19 f0       	breq	.+6      	; 0x387c <runcalc+0x388>
    3876:	8d 81       	ldd	r24, Y+5	; 0x05
    3878:	8f 32       	cpi	r24, 0x2F	; 47
    387a:	19 f5       	brne	.+70     	; 0x38c2 <runcalc+0x3ce>
			if (c == '-' || c == '+') {
    387c:	8e 81       	ldd	r24, Y+6	; 0x06
    387e:	8d 32       	cpi	r24, 0x2D	; 45
    3880:	19 f0       	breq	.+6      	; 0x3888 <runcalc+0x394>
    3882:	8e 81       	ldd	r24, Y+6	; 0x06
    3884:	8b 32       	cpi	r24, 0x2B	; 43
    3886:	a9 f4       	brne	.+42     	; 0x38b2 <runcalc+0x3be>
				if (c == '-') {
    3888:	8e 81       	ldd	r24, Y+6	; 0x06
    388a:	8d 32       	cpi	r24, 0x2D	; 45
    388c:	39 f4       	brne	.+14     	; 0x389c <runcalc+0x3a8>
					neg2 = 1;
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	80 93 9d 01 	sts	0x019D, r24
					LCD_SendData(c);
    3894:	8e 81       	ldd	r24, Y+6	; 0x06
    3896:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
    389a:	06 c0       	rjmp	.+12     	; 0x38a8 <runcalc+0x3b4>
				} else if (c == '+') {
    389c:	8e 81       	ldd	r24, Y+6	; 0x06
    389e:	8b 32       	cpi	r24, 0x2B	; 43
    38a0:	19 f4       	brne	.+6      	; 0x38a8 <runcalc+0x3b4>
					LCD_SendData(c);
    38a2:	8e 81       	ldd	r24, Y+6	; 0x06
    38a4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
				}

				c = KEYPAD_GetPressedKeyValue(PORTC_ID);
    38a8:	82 e0       	ldi	r24, 0x02	; 2
    38aa:	0e 94 57 13 	call	0x26ae	; 0x26ae <KEYPAD_GetPressedKeyValue>
    38ae:	8e 83       	std	Y+6, r24	; 0x06
    38b0:	08 c0       	rjmp	.+16     	; 0x38c2 <runcalc+0x3ce>
			}
			else if(c=='*'||c=='/'){
    38b2:	8e 81       	ldd	r24, Y+6	; 0x06
    38b4:	8a 32       	cpi	r24, 0x2A	; 42
    38b6:	19 f0       	breq	.+6      	; 0x38be <runcalc+0x3ca>
    38b8:	8e 81       	ldd	r24, Y+6	; 0x06
    38ba:	8f 32       	cpi	r24, 0x2F	; 47
    38bc:	11 f4       	brne	.+4      	; 0x38c2 <runcalc+0x3ce>
				error = 1;}
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	8a 83       	std	Y+2, r24	; 0x02
		}
		// Getting number 2
		if (com1 == 1 && com2 == 0) {
    38c2:	8c 81       	ldd	r24, Y+4	; 0x04
    38c4:	81 30       	cpi	r24, 0x01	; 1
    38c6:	09 f0       	breq	.+2      	; 0x38ca <runcalc+0x3d6>
    38c8:	49 ce       	rjmp	.-878    	; 0x355c <runcalc+0x68>
    38ca:	8b 81       	ldd	r24, Y+3	; 0x03
    38cc:	88 23       	and	r24, r24
    38ce:	09 f0       	breq	.+2      	; 0x38d2 <runcalc+0x3de>
    38d0:	45 ce       	rjmp	.-886    	; 0x355c <runcalc+0x68>
			while (1) {
				if (c == '=') {
    38d2:	8e 81       	ldd	r24, Y+6	; 0x06
    38d4:	8d 33       	cpi	r24, 0x3D	; 61
    38d6:	01 f5       	brne	.+64     	; 0x3918 <runcalc+0x424>
					LCD_SendData(c);
    38d8:	8e 81       	ldd	r24, Y+6	; 0x06
    38da:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
					LCD_MoveCursor(2, 0);
    38de:	82 e0       	ldi	r24, 0x02	; 2
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <LCD_MoveCursor>
					ans = calc(num1, operator, num2, error);
    38e6:	8b 89       	ldd	r24, Y+19	; 0x13
    38e8:	9c 89       	ldd	r25, Y+20	; 0x14
    38ea:	ad 89       	ldd	r26, Y+21	; 0x15
    38ec:	be 89       	ldd	r27, Y+22	; 0x16
    38ee:	0f 85       	ldd	r16, Y+15	; 0x0f
    38f0:	18 89       	ldd	r17, Y+16	; 0x10
    38f2:	29 89       	ldd	r18, Y+17	; 0x11
    38f4:	3a 89       	ldd	r19, Y+18	; 0x12
    38f6:	bc 01       	movw	r22, r24
    38f8:	cd 01       	movw	r24, r26
    38fa:	4d 81       	ldd	r20, Y+5	; 0x05
    38fc:	ea 80       	ldd	r14, Y+2	; 0x02
    38fe:	0e 94 be 1c 	call	0x397c	; 0x397c <calc>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	8f 83       	std	Y+7, r24	; 0x07
    3908:	98 87       	std	Y+8, r25	; 0x08
    390a:	a9 87       	std	Y+9, r26	; 0x09
    390c:	ba 87       	std	Y+10, r27	; 0x0a
					ans_flag = 1;
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	89 83       	std	Y+1, r24	; 0x01
					com2 = 1;
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	8b 83       	std	Y+3, r24	; 0x03
    3916:	22 ce       	rjmp	.-956    	; 0x355c <runcalc+0x68>
					break;
				}

				if (c == NULL_LCD)
    3918:	8e 81       	ldd	r24, Y+6	; 0x06
    391a:	8f 3f       	cpi	r24, 0xFF	; 255
    391c:	09 f4       	brne	.+2      	; 0x3920 <runcalc+0x42c>
    391e:	1e ce       	rjmp	.-964    	; 0x355c <runcalc+0x68>
					break;
				LCD_SendData(c);
    3920:	8e 81       	ldd	r24, Y+6	; 0x06
    3922:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
				num2 = (c - '0') + (num2 * 10);
    3926:	8e 81       	ldd	r24, Y+6	; 0x06
    3928:	88 2f       	mov	r24, r24
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	c0 97       	sbiw	r24, 0x30	; 48
    392e:	aa 27       	eor	r26, r26
    3930:	97 fd       	sbrc	r25, 7
    3932:	a0 95       	com	r26
    3934:	ba 2f       	mov	r27, r26
    3936:	bc 01       	movw	r22, r24
    3938:	cd 01       	movw	r24, r26
    393a:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    393e:	7b 01       	movw	r14, r22
    3940:	8c 01       	movw	r16, r24
    3942:	6f 85       	ldd	r22, Y+15	; 0x0f
    3944:	78 89       	ldd	r23, Y+16	; 0x10
    3946:	89 89       	ldd	r24, Y+17	; 0x11
    3948:	9a 89       	ldd	r25, Y+18	; 0x12
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	40 e2       	ldi	r20, 0x20	; 32
    3950:	51 e4       	ldi	r21, 0x41	; 65
    3952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	9c 01       	movw	r18, r24
    395c:	ad 01       	movw	r20, r26
    395e:	c8 01       	movw	r24, r16
    3960:	b7 01       	movw	r22, r14
    3962:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	8f 87       	std	Y+15, r24	; 0x0f
    396c:	98 8b       	std	Y+16, r25	; 0x10
    396e:	a9 8b       	std	Y+17, r26	; 0x11
    3970:	ba 8b       	std	Y+18, r27	; 0x12
				c = KEYPAD_GetPressedKeyValue(PORTC_ID);
    3972:	82 e0       	ldi	r24, 0x02	; 2
    3974:	0e 94 57 13 	call	0x26ae	; 0x26ae <KEYPAD_GetPressedKeyValue>
    3978:	8e 83       	std	Y+6, r24	; 0x06
    397a:	ab cf       	rjmp	.-170    	; 0x38d2 <runcalc+0x3de>

0000397c <calc>:
		}
	}

}

float32 calc(float32 num1, uint8 i, float32 num2, uint8 error) {
    397c:	ef 92       	push	r14
    397e:	ff 92       	push	r15
    3980:	0f 93       	push	r16
    3982:	1f 93       	push	r17
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
    398c:	60 97       	sbiw	r28, 0x10	; 16
    398e:	0f b6       	in	r0, 0x3f	; 63
    3990:	f8 94       	cli
    3992:	de bf       	out	0x3e, r29	; 62
    3994:	0f be       	out	0x3f, r0	; 63
    3996:	cd bf       	out	0x3d, r28	; 61
    3998:	69 83       	std	Y+1, r22	; 0x01
    399a:	7a 83       	std	Y+2, r23	; 0x02
    399c:	8b 83       	std	Y+3, r24	; 0x03
    399e:	9c 83       	std	Y+4, r25	; 0x04
    39a0:	4d 83       	std	Y+5, r20	; 0x05
    39a2:	0e 83       	std	Y+6, r16	; 0x06
    39a4:	1f 83       	std	Y+7, r17	; 0x07
    39a6:	28 87       	std	Y+8, r18	; 0x08
    39a8:	39 87       	std	Y+9, r19	; 0x09
    39aa:	ea 86       	std	Y+10, r14	; 0x0a
	if (neg == 1) {
    39ac:	80 91 9c 01 	lds	r24, 0x019C
    39b0:	81 30       	cpi	r24, 0x01	; 1
    39b2:	49 f4       	brne	.+18     	; 0x39c6 <calc+0x4a>
		num1 *= (-1);
    39b4:	89 81       	ldd	r24, Y+1	; 0x01
    39b6:	9a 81       	ldd	r25, Y+2	; 0x02
    39b8:	ab 81       	ldd	r26, Y+3	; 0x03
    39ba:	bc 81       	ldd	r27, Y+4	; 0x04
    39bc:	b0 58       	subi	r27, 0x80	; 128
    39be:	89 83       	std	Y+1, r24	; 0x01
    39c0:	9a 83       	std	Y+2, r25	; 0x02
    39c2:	ab 83       	std	Y+3, r26	; 0x03
    39c4:	bc 83       	std	Y+4, r27	; 0x04
	}
	if (neg2 == 1) {
    39c6:	80 91 9d 01 	lds	r24, 0x019D
    39ca:	81 30       	cpi	r24, 0x01	; 1
    39cc:	49 f4       	brne	.+18     	; 0x39e0 <calc+0x64>
		num2 *= -1;
    39ce:	8e 81       	ldd	r24, Y+6	; 0x06
    39d0:	9f 81       	ldd	r25, Y+7	; 0x07
    39d2:	a8 85       	ldd	r26, Y+8	; 0x08
    39d4:	b9 85       	ldd	r27, Y+9	; 0x09
    39d6:	b0 58       	subi	r27, 0x80	; 128
    39d8:	8e 83       	std	Y+6, r24	; 0x06
    39da:	9f 83       	std	Y+7, r25	; 0x07
    39dc:	a8 87       	std	Y+8, r26	; 0x08
    39de:	b9 87       	std	Y+9, r27	; 0x09
	}
	switch (i) {
    39e0:	8d 81       	ldd	r24, Y+5	; 0x05
    39e2:	28 2f       	mov	r18, r24
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	38 8b       	std	Y+16, r19	; 0x10
    39e8:	2f 87       	std	Y+15, r18	; 0x0f
    39ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ec:	98 89       	ldd	r25, Y+16	; 0x10
    39ee:	8b 32       	cpi	r24, 0x2B	; 43
    39f0:	91 05       	cpc	r25, r1
    39f2:	c9 f0       	breq	.+50     	; 0x3a26 <calc+0xaa>
    39f4:	af 85       	ldd	r26, Y+15	; 0x0f
    39f6:	b8 89       	ldd	r27, Y+16	; 0x10
    39f8:	ac 32       	cpi	r26, 0x2C	; 44
    39fa:	b1 05       	cpc	r27, r1
    39fc:	3c f4       	brge	.+14     	; 0x3a0c <calc+0x90>
    39fe:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a00:	38 89       	ldd	r19, Y+16	; 0x10
    3a02:	2a 32       	cpi	r18, 0x2A	; 42
    3a04:	31 05       	cpc	r19, r1
    3a06:	09 f4       	brne	.+2      	; 0x3a0a <calc+0x8e>
    3a08:	19 c1       	rjmp	.+562    	; 0x3c3c <calc+0x2c0>
    3a0a:	00 c2       	rjmp	.+1024   	; 0x3e0c <calc+0x490>
    3a0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a0e:	98 89       	ldd	r25, Y+16	; 0x10
    3a10:	8d 32       	cpi	r24, 0x2D	; 45
    3a12:	91 05       	cpc	r25, r1
    3a14:	09 f4       	brne	.+2      	; 0x3a18 <calc+0x9c>
    3a16:	80 c0       	rjmp	.+256    	; 0x3b18 <calc+0x19c>
    3a18:	af 85       	ldd	r26, Y+15	; 0x0f
    3a1a:	b8 89       	ldd	r27, Y+16	; 0x10
    3a1c:	af 32       	cpi	r26, 0x2F	; 47
    3a1e:	b1 05       	cpc	r27, r1
    3a20:	09 f4       	brne	.+2      	; 0x3a24 <calc+0xa8>
    3a22:	aa c1       	rjmp	.+852    	; 0x3d78 <calc+0x3fc>
    3a24:	f3 c1       	rjmp	.+998    	; 0x3e0c <calc+0x490>
	case '+':

		if (error == 1) {
    3a26:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a28:	81 30       	cpi	r24, 0x01	; 1
    3a2a:	69 f4       	brne	.+26     	; 0x3a46 <calc+0xca>
			LCD_DisplayString((uint8*) "Error");
    3a2c:	88 e6       	ldi	r24, 0x68	; 104
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	0e 94 13 12 	call	0x2426	; 0x2426 <LCD_DisplayString>
			return -100000000000;
    3a34:	87 eb       	ldi	r24, 0xB7	; 183
    3a36:	93 e4       	ldi	r25, 0x43	; 67
    3a38:	aa eb       	ldi	r26, 0xBA	; 186
    3a3a:	b1 ed       	ldi	r27, 0xD1	; 209
    3a3c:	8b 87       	std	Y+11, r24	; 0x0b
    3a3e:	9c 87       	std	Y+12, r25	; 0x0c
    3a40:	ad 87       	std	Y+13, r26	; 0x0d
    3a42:	be 87       	std	Y+14, r27	; 0x0e
    3a44:	eb c1       	rjmp	.+982    	; 0x3e1c <calc+0x4a0>
		} else {
			if (num1 + num2 != (int) num1 + num2) {
    3a46:	69 81       	ldd	r22, Y+1	; 0x01
    3a48:	7a 81       	ldd	r23, Y+2	; 0x02
    3a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4e:	2e 81       	ldd	r18, Y+6	; 0x06
    3a50:	3f 81       	ldd	r19, Y+7	; 0x07
    3a52:	48 85       	ldd	r20, Y+8	; 0x08
    3a54:	59 85       	ldd	r21, Y+9	; 0x09
    3a56:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	7c 01       	movw	r14, r24
    3a60:	8d 01       	movw	r16, r26
    3a62:	69 81       	ldd	r22, Y+1	; 0x01
    3a64:	7a 81       	ldd	r23, Y+2	; 0x02
    3a66:	8b 81       	ldd	r24, Y+3	; 0x03
    3a68:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6a:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	aa 27       	eor	r26, r26
    3a74:	97 fd       	sbrc	r25, 7
    3a76:	a0 95       	com	r26
    3a78:	ba 2f       	mov	r27, r26
    3a7a:	bc 01       	movw	r22, r24
    3a7c:	cd 01       	movw	r24, r26
    3a7e:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	bc 01       	movw	r22, r24
    3a88:	cd 01       	movw	r24, r26
    3a8a:	2e 81       	ldd	r18, Y+6	; 0x06
    3a8c:	3f 81       	ldd	r19, Y+7	; 0x07
    3a8e:	48 85       	ldd	r20, Y+8	; 0x08
    3a90:	59 85       	ldd	r21, Y+9	; 0x09
    3a92:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	9c 01       	movw	r18, r24
    3a9c:	ad 01       	movw	r20, r26
    3a9e:	c8 01       	movw	r24, r16
    3aa0:	b7 01       	movw	r22, r14
    3aa2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__nesf2>
    3aa6:	88 23       	and	r24, r24
    3aa8:	81 f0       	breq	.+32     	; 0x3aca <calc+0x14e>
				//handling floating point numbers
				Print_Floating(num1 + num2);
    3aaa:	69 81       	ldd	r22, Y+1	; 0x01
    3aac:	7a 81       	ldd	r23, Y+2	; 0x02
    3aae:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab2:	2e 81       	ldd	r18, Y+6	; 0x06
    3ab4:	3f 81       	ldd	r19, Y+7	; 0x07
    3ab6:	48 85       	ldd	r20, Y+8	; 0x08
    3ab8:	59 85       	ldd	r21, Y+9	; 0x09
    3aba:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <Print_Floating>
			}
			LCD_DisplayNumber(num1 + num2);
    3aca:	69 81       	ldd	r22, Y+1	; 0x01
    3acc:	7a 81       	ldd	r23, Y+2	; 0x02
    3ace:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad2:	2e 81       	ldd	r18, Y+6	; 0x06
    3ad4:	3f 81       	ldd	r19, Y+7	; 0x07
    3ad6:	48 85       	ldd	r20, Y+8	; 0x08
    3ad8:	59 85       	ldd	r21, Y+9	; 0x09
    3ada:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	bc 01       	movw	r22, r24
    3ae4:	cd 01       	movw	r24, r26
    3ae6:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	bc 01       	movw	r22, r24
    3af0:	cd 01       	movw	r24, r26
    3af2:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_DisplayNumber>
		}
		return num1 + num2;
    3af6:	69 81       	ldd	r22, Y+1	; 0x01
    3af8:	7a 81       	ldd	r23, Y+2	; 0x02
    3afa:	8b 81       	ldd	r24, Y+3	; 0x03
    3afc:	9c 81       	ldd	r25, Y+4	; 0x04
    3afe:	2e 81       	ldd	r18, Y+6	; 0x06
    3b00:	3f 81       	ldd	r19, Y+7	; 0x07
    3b02:	48 85       	ldd	r20, Y+8	; 0x08
    3b04:	59 85       	ldd	r21, Y+9	; 0x09
    3b06:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	8b 87       	std	Y+11, r24	; 0x0b
    3b10:	9c 87       	std	Y+12, r25	; 0x0c
    3b12:	ad 87       	std	Y+13, r26	; 0x0d
    3b14:	be 87       	std	Y+14, r27	; 0x0e
    3b16:	82 c1       	rjmp	.+772    	; 0x3e1c <calc+0x4a0>
		break;

	case '-':

		if (error == 1) {
    3b18:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b1a:	81 30       	cpi	r24, 0x01	; 1
    3b1c:	69 f4       	brne	.+26     	; 0x3b38 <calc+0x1bc>
			LCD_DisplayString((uint8*) "Error");
    3b1e:	88 e6       	ldi	r24, 0x68	; 104
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	0e 94 13 12 	call	0x2426	; 0x2426 <LCD_DisplayString>
			return -100000000000;
    3b26:	87 eb       	ldi	r24, 0xB7	; 183
    3b28:	93 e4       	ldi	r25, 0x43	; 67
    3b2a:	aa eb       	ldi	r26, 0xBA	; 186
    3b2c:	b1 ed       	ldi	r27, 0xD1	; 209
    3b2e:	8b 87       	std	Y+11, r24	; 0x0b
    3b30:	9c 87       	std	Y+12, r25	; 0x0c
    3b32:	ad 87       	std	Y+13, r26	; 0x0d
    3b34:	be 87       	std	Y+14, r27	; 0x0e
    3b36:	72 c1       	rjmp	.+740    	; 0x3e1c <calc+0x4a0>
		} else if (num1 == num2) {
    3b38:	69 81       	ldd	r22, Y+1	; 0x01
    3b3a:	7a 81       	ldd	r23, Y+2	; 0x02
    3b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b40:	2e 81       	ldd	r18, Y+6	; 0x06
    3b42:	3f 81       	ldd	r19, Y+7	; 0x07
    3b44:	48 85       	ldd	r20, Y+8	; 0x08
    3b46:	59 85       	ldd	r21, Y+9	; 0x09
    3b48:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3b4c:	88 23       	and	r24, r24
    3b4e:	61 f4       	brne	.+24     	; 0x3b68 <calc+0x1ec>
			LCD_SendData('0');
    3b50:	80 e3       	ldi	r24, 0x30	; 48
    3b52:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
			return 0;
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	a0 e0       	ldi	r26, 0x00	; 0
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	8b 87       	std	Y+11, r24	; 0x0b
    3b60:	9c 87       	std	Y+12, r25	; 0x0c
    3b62:	ad 87       	std	Y+13, r26	; 0x0d
    3b64:	be 87       	std	Y+14, r27	; 0x0e
    3b66:	5a c1       	rjmp	.+692    	; 0x3e1c <calc+0x4a0>
		} else {
			if (num1 - num2 != (int) num1 - num2) {
    3b68:	69 81       	ldd	r22, Y+1	; 0x01
    3b6a:	7a 81       	ldd	r23, Y+2	; 0x02
    3b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b70:	2e 81       	ldd	r18, Y+6	; 0x06
    3b72:	3f 81       	ldd	r19, Y+7	; 0x07
    3b74:	48 85       	ldd	r20, Y+8	; 0x08
    3b76:	59 85       	ldd	r21, Y+9	; 0x09
    3b78:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	7c 01       	movw	r14, r24
    3b82:	8d 01       	movw	r16, r26
    3b84:	69 81       	ldd	r22, Y+1	; 0x01
    3b86:	7a 81       	ldd	r23, Y+2	; 0x02
    3b88:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b8c:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	aa 27       	eor	r26, r26
    3b96:	97 fd       	sbrc	r25, 7
    3b98:	a0 95       	com	r26
    3b9a:	ba 2f       	mov	r27, r26
    3b9c:	bc 01       	movw	r22, r24
    3b9e:	cd 01       	movw	r24, r26
    3ba0:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	bc 01       	movw	r22, r24
    3baa:	cd 01       	movw	r24, r26
    3bac:	2e 81       	ldd	r18, Y+6	; 0x06
    3bae:	3f 81       	ldd	r19, Y+7	; 0x07
    3bb0:	48 85       	ldd	r20, Y+8	; 0x08
    3bb2:	59 85       	ldd	r21, Y+9	; 0x09
    3bb4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	9c 01       	movw	r18, r24
    3bbe:	ad 01       	movw	r20, r26
    3bc0:	c8 01       	movw	r24, r16
    3bc2:	b7 01       	movw	r22, r14
    3bc4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__nesf2>
    3bc8:	88 23       	and	r24, r24
    3bca:	89 f0       	breq	.+34     	; 0x3bee <calc+0x272>
				//handling floating point numbers
				Print_Floating(num1 - num2);
    3bcc:	69 81       	ldd	r22, Y+1	; 0x01
    3bce:	7a 81       	ldd	r23, Y+2	; 0x02
    3bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd4:	2e 81       	ldd	r18, Y+6	; 0x06
    3bd6:	3f 81       	ldd	r19, Y+7	; 0x07
    3bd8:	48 85       	ldd	r20, Y+8	; 0x08
    3bda:	59 85       	ldd	r21, Y+9	; 0x09
    3bdc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	bc 01       	movw	r22, r24
    3be6:	cd 01       	movw	r24, r26
    3be8:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <Print_Floating>
    3bec:	16 c0       	rjmp	.+44     	; 0x3c1a <calc+0x29e>
			} else
				LCD_DisplayNumber(num1 - num2);
    3bee:	69 81       	ldd	r22, Y+1	; 0x01
    3bf0:	7a 81       	ldd	r23, Y+2	; 0x02
    3bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf6:	2e 81       	ldd	r18, Y+6	; 0x06
    3bf8:	3f 81       	ldd	r19, Y+7	; 0x07
    3bfa:	48 85       	ldd	r20, Y+8	; 0x08
    3bfc:	59 85       	ldd	r21, Y+9	; 0x09
    3bfe:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	bc 01       	movw	r22, r24
    3c08:	cd 01       	movw	r24, r26
    3c0a:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	bc 01       	movw	r22, r24
    3c14:	cd 01       	movw	r24, r26
    3c16:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_DisplayNumber>
			return num1 - num2;
    3c1a:	69 81       	ldd	r22, Y+1	; 0x01
    3c1c:	7a 81       	ldd	r23, Y+2	; 0x02
    3c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c20:	9c 81       	ldd	r25, Y+4	; 0x04
    3c22:	2e 81       	ldd	r18, Y+6	; 0x06
    3c24:	3f 81       	ldd	r19, Y+7	; 0x07
    3c26:	48 85       	ldd	r20, Y+8	; 0x08
    3c28:	59 85       	ldd	r21, Y+9	; 0x09
    3c2a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	8b 87       	std	Y+11, r24	; 0x0b
    3c34:	9c 87       	std	Y+12, r25	; 0x0c
    3c36:	ad 87       	std	Y+13, r26	; 0x0d
    3c38:	be 87       	std	Y+14, r27	; 0x0e
    3c3a:	f0 c0       	rjmp	.+480    	; 0x3e1c <calc+0x4a0>
		}
		break;

	case '*':

		if (error == 1) {
    3c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c3e:	81 30       	cpi	r24, 0x01	; 1
    3c40:	69 f4       	brne	.+26     	; 0x3c5c <calc+0x2e0>
			LCD_DisplayString((uint8*) "Error");
    3c42:	88 e6       	ldi	r24, 0x68	; 104
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	0e 94 13 12 	call	0x2426	; 0x2426 <LCD_DisplayString>
			return -100000000000;
    3c4a:	87 eb       	ldi	r24, 0xB7	; 183
    3c4c:	93 e4       	ldi	r25, 0x43	; 67
    3c4e:	aa eb       	ldi	r26, 0xBA	; 186
    3c50:	b1 ed       	ldi	r27, 0xD1	; 209
    3c52:	8b 87       	std	Y+11, r24	; 0x0b
    3c54:	9c 87       	std	Y+12, r25	; 0x0c
    3c56:	ad 87       	std	Y+13, r26	; 0x0d
    3c58:	be 87       	std	Y+14, r27	; 0x0e
    3c5a:	e0 c0       	rjmp	.+448    	; 0x3e1c <calc+0x4a0>

		} else if (num1 * num2 < 10000000) {
    3c5c:	69 81       	ldd	r22, Y+1	; 0x01
    3c5e:	7a 81       	ldd	r23, Y+2	; 0x02
    3c60:	8b 81       	ldd	r24, Y+3	; 0x03
    3c62:	9c 81       	ldd	r25, Y+4	; 0x04
    3c64:	2e 81       	ldd	r18, Y+6	; 0x06
    3c66:	3f 81       	ldd	r19, Y+7	; 0x07
    3c68:	48 85       	ldd	r20, Y+8	; 0x08
    3c6a:	59 85       	ldd	r21, Y+9	; 0x09
    3c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	bc 01       	movw	r22, r24
    3c76:	cd 01       	movw	r24, r26
    3c78:	20 e8       	ldi	r18, 0x80	; 128
    3c7a:	36 e9       	ldi	r19, 0x96	; 150
    3c7c:	48 e1       	ldi	r20, 0x18	; 24
    3c7e:	5b e4       	ldi	r21, 0x4B	; 75
    3c80:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3c84:	88 23       	and	r24, r24
    3c86:	0c f0       	brlt	.+2      	; 0x3c8a <calc+0x30e>
    3c88:	6a c0       	rjmp	.+212    	; 0x3d5e <calc+0x3e2>
			if (num1 * num2 == (int) num1 * num2) {
    3c8a:	69 81       	ldd	r22, Y+1	; 0x01
    3c8c:	7a 81       	ldd	r23, Y+2	; 0x02
    3c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c90:	9c 81       	ldd	r25, Y+4	; 0x04
    3c92:	2e 81       	ldd	r18, Y+6	; 0x06
    3c94:	3f 81       	ldd	r19, Y+7	; 0x07
    3c96:	48 85       	ldd	r20, Y+8	; 0x08
    3c98:	59 85       	ldd	r21, Y+9	; 0x09
    3c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	7c 01       	movw	r14, r24
    3ca4:	8d 01       	movw	r16, r26
    3ca6:	69 81       	ldd	r22, Y+1	; 0x01
    3ca8:	7a 81       	ldd	r23, Y+2	; 0x02
    3caa:	8b 81       	ldd	r24, Y+3	; 0x03
    3cac:	9c 81       	ldd	r25, Y+4	; 0x04
    3cae:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	aa 27       	eor	r26, r26
    3cb8:	97 fd       	sbrc	r25, 7
    3cba:	a0 95       	com	r26
    3cbc:	ba 2f       	mov	r27, r26
    3cbe:	bc 01       	movw	r22, r24
    3cc0:	cd 01       	movw	r24, r26
    3cc2:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	bc 01       	movw	r22, r24
    3ccc:	cd 01       	movw	r24, r26
    3cce:	2e 81       	ldd	r18, Y+6	; 0x06
    3cd0:	3f 81       	ldd	r19, Y+7	; 0x07
    3cd2:	48 85       	ldd	r20, Y+8	; 0x08
    3cd4:	59 85       	ldd	r21, Y+9	; 0x09
    3cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	9c 01       	movw	r18, r24
    3ce0:	ad 01       	movw	r20, r26
    3ce2:	c8 01       	movw	r24, r16
    3ce4:	b7 01       	movw	r22, r14
    3ce6:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3cea:	88 23       	and	r24, r24
    3cec:	b9 f4       	brne	.+46     	; 0x3d1c <calc+0x3a0>
				LCD_DisplayNumber(num1 * num2);
    3cee:	69 81       	ldd	r22, Y+1	; 0x01
    3cf0:	7a 81       	ldd	r23, Y+2	; 0x02
    3cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf6:	2e 81       	ldd	r18, Y+6	; 0x06
    3cf8:	3f 81       	ldd	r19, Y+7	; 0x07
    3cfa:	48 85       	ldd	r20, Y+8	; 0x08
    3cfc:	59 85       	ldd	r21, Y+9	; 0x09
    3cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	bc 01       	movw	r22, r24
    3d08:	cd 01       	movw	r24, r26
    3d0a:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	bc 01       	movw	r22, r24
    3d14:	cd 01       	movw	r24, r26
    3d16:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_DisplayNumber>
    3d1a:	10 c0       	rjmp	.+32     	; 0x3d3c <calc+0x3c0>
			} else {
				//handling floating point numbers
				Print_Floating(num1 * num2);
    3d1c:	69 81       	ldd	r22, Y+1	; 0x01
    3d1e:	7a 81       	ldd	r23, Y+2	; 0x02
    3d20:	8b 81       	ldd	r24, Y+3	; 0x03
    3d22:	9c 81       	ldd	r25, Y+4	; 0x04
    3d24:	2e 81       	ldd	r18, Y+6	; 0x06
    3d26:	3f 81       	ldd	r19, Y+7	; 0x07
    3d28:	48 85       	ldd	r20, Y+8	; 0x08
    3d2a:	59 85       	ldd	r21, Y+9	; 0x09
    3d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	bc 01       	movw	r22, r24
    3d36:	cd 01       	movw	r24, r26
    3d38:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <Print_Floating>
			}
			return num1 * num2;
    3d3c:	69 81       	ldd	r22, Y+1	; 0x01
    3d3e:	7a 81       	ldd	r23, Y+2	; 0x02
    3d40:	8b 81       	ldd	r24, Y+3	; 0x03
    3d42:	9c 81       	ldd	r25, Y+4	; 0x04
    3d44:	2e 81       	ldd	r18, Y+6	; 0x06
    3d46:	3f 81       	ldd	r19, Y+7	; 0x07
    3d48:	48 85       	ldd	r20, Y+8	; 0x08
    3d4a:	59 85       	ldd	r21, Y+9	; 0x09
    3d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	8b 87       	std	Y+11, r24	; 0x0b
    3d56:	9c 87       	std	Y+12, r25	; 0x0c
    3d58:	ad 87       	std	Y+13, r26	; 0x0d
    3d5a:	be 87       	std	Y+14, r27	; 0x0e
    3d5c:	5f c0       	rjmp	.+190    	; 0x3e1c <calc+0x4a0>
		}

		else {
			LCD_DisplayString((uint8*) "EXCEED LIMIT");
    3d5e:	8e e6       	ldi	r24, 0x6E	; 110
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	0e 94 13 12 	call	0x2426	; 0x2426 <LCD_DisplayString>
			return -100000000000;
    3d66:	87 eb       	ldi	r24, 0xB7	; 183
    3d68:	93 e4       	ldi	r25, 0x43	; 67
    3d6a:	aa eb       	ldi	r26, 0xBA	; 186
    3d6c:	b1 ed       	ldi	r27, 0xD1	; 209
    3d6e:	8b 87       	std	Y+11, r24	; 0x0b
    3d70:	9c 87       	std	Y+12, r25	; 0x0c
    3d72:	ad 87       	std	Y+13, r26	; 0x0d
    3d74:	be 87       	std	Y+14, r27	; 0x0e
    3d76:	52 c0       	rjmp	.+164    	; 0x3e1c <calc+0x4a0>
		}
		break;

	case '/':

		if (error == 1) {
    3d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d7a:	81 30       	cpi	r24, 0x01	; 1
    3d7c:	69 f4       	brne	.+26     	; 0x3d98 <calc+0x41c>
			LCD_DisplayString((uint8*) "Error");
    3d7e:	88 e6       	ldi	r24, 0x68	; 104
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	0e 94 13 12 	call	0x2426	; 0x2426 <LCD_DisplayString>
			return -100000000000;
    3d86:	87 eb       	ldi	r24, 0xB7	; 183
    3d88:	93 e4       	ldi	r25, 0x43	; 67
    3d8a:	aa eb       	ldi	r26, 0xBA	; 186
    3d8c:	b1 ed       	ldi	r27, 0xD1	; 209
    3d8e:	8b 87       	std	Y+11, r24	; 0x0b
    3d90:	9c 87       	std	Y+12, r25	; 0x0c
    3d92:	ad 87       	std	Y+13, r26	; 0x0d
    3d94:	be 87       	std	Y+14, r27	; 0x0e
    3d96:	42 c0       	rjmp	.+132    	; 0x3e1c <calc+0x4a0>
		} else if (num2 == 0) {
    3d98:	6e 81       	ldd	r22, Y+6	; 0x06
    3d9a:	7f 81       	ldd	r23, Y+7	; 0x07
    3d9c:	88 85       	ldd	r24, Y+8	; 0x08
    3d9e:	99 85       	ldd	r25, Y+9	; 0x09
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	40 e0       	ldi	r20, 0x00	; 0
    3da6:	50 e0       	ldi	r21, 0x00	; 0
    3da8:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3dac:	88 23       	and	r24, r24
    3dae:	69 f4       	brne	.+26     	; 0x3dca <calc+0x44e>
			LCD_DisplayString((uint8*) "INFINITY");
    3db0:	8b e7       	ldi	r24, 0x7B	; 123
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	0e 94 13 12 	call	0x2426	; 0x2426 <LCD_DisplayString>
			return -100000000000;
    3db8:	87 eb       	ldi	r24, 0xB7	; 183
    3dba:	93 e4       	ldi	r25, 0x43	; 67
    3dbc:	aa eb       	ldi	r26, 0xBA	; 186
    3dbe:	b1 ed       	ldi	r27, 0xD1	; 209
    3dc0:	8b 87       	std	Y+11, r24	; 0x0b
    3dc2:	9c 87       	std	Y+12, r25	; 0x0c
    3dc4:	ad 87       	std	Y+13, r26	; 0x0d
    3dc6:	be 87       	std	Y+14, r27	; 0x0e
    3dc8:	29 c0       	rjmp	.+82     	; 0x3e1c <calc+0x4a0>
		} else {
			//handling floating point numbers
			Print_Floating(num1 / num2);
    3dca:	69 81       	ldd	r22, Y+1	; 0x01
    3dcc:	7a 81       	ldd	r23, Y+2	; 0x02
    3dce:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd2:	2e 81       	ldd	r18, Y+6	; 0x06
    3dd4:	3f 81       	ldd	r19, Y+7	; 0x07
    3dd6:	48 85       	ldd	r20, Y+8	; 0x08
    3dd8:	59 85       	ldd	r21, Y+9	; 0x09
    3dda:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3dde:	dc 01       	movw	r26, r24
    3de0:	cb 01       	movw	r24, r22
    3de2:	bc 01       	movw	r22, r24
    3de4:	cd 01       	movw	r24, r26
    3de6:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <Print_Floating>
			return num1 / num2;
    3dea:	69 81       	ldd	r22, Y+1	; 0x01
    3dec:	7a 81       	ldd	r23, Y+2	; 0x02
    3dee:	8b 81       	ldd	r24, Y+3	; 0x03
    3df0:	9c 81       	ldd	r25, Y+4	; 0x04
    3df2:	2e 81       	ldd	r18, Y+6	; 0x06
    3df4:	3f 81       	ldd	r19, Y+7	; 0x07
    3df6:	48 85       	ldd	r20, Y+8	; 0x08
    3df8:	59 85       	ldd	r21, Y+9	; 0x09
    3dfa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	8b 87       	std	Y+11, r24	; 0x0b
    3e04:	9c 87       	std	Y+12, r25	; 0x0c
    3e06:	ad 87       	std	Y+13, r26	; 0x0d
    3e08:	be 87       	std	Y+14, r27	; 0x0e
    3e0a:	08 c0       	rjmp	.+16     	; 0x3e1c <calc+0x4a0>
		}
		break;

	}
	return 0;
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	a0 e0       	ldi	r26, 0x00	; 0
    3e12:	b0 e0       	ldi	r27, 0x00	; 0
    3e14:	8b 87       	std	Y+11, r24	; 0x0b
    3e16:	9c 87       	std	Y+12, r25	; 0x0c
    3e18:	ad 87       	std	Y+13, r26	; 0x0d
    3e1a:	be 87       	std	Y+14, r27	; 0x0e
    3e1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e20:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e22:	be 85       	ldd	r27, Y+14	; 0x0e
}
    3e24:	bc 01       	movw	r22, r24
    3e26:	cd 01       	movw	r24, r26
    3e28:	60 96       	adiw	r28, 0x10	; 16
    3e2a:	0f b6       	in	r0, 0x3f	; 63
    3e2c:	f8 94       	cli
    3e2e:	de bf       	out	0x3e, r29	; 62
    3e30:	0f be       	out	0x3f, r0	; 63
    3e32:	cd bf       	out	0x3d, r28	; 61
    3e34:	cf 91       	pop	r28
    3e36:	df 91       	pop	r29
    3e38:	1f 91       	pop	r17
    3e3a:	0f 91       	pop	r16
    3e3c:	ff 90       	pop	r15
    3e3e:	ef 90       	pop	r14
    3e40:	08 95       	ret

00003e42 <Print_Floating>:

void Print_Floating(float operation) {
    3e42:	df 93       	push	r29
    3e44:	cf 93       	push	r28
    3e46:	00 d0       	rcall	.+0      	; 0x3e48 <Print_Floating+0x6>
    3e48:	00 d0       	rcall	.+0      	; 0x3e4a <Print_Floating+0x8>
    3e4a:	00 d0       	rcall	.+0      	; 0x3e4c <Print_Floating+0xa>
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	69 83       	std	Y+1, r22	; 0x01
    3e52:	7a 83       	std	Y+2, r23	; 0x02
    3e54:	8b 83       	std	Y+3, r24	; 0x03
    3e56:	9c 83       	std	Y+4, r25	; 0x04
	if (operation < 0 && operation > -1) {
    3e58:	1e 82       	std	Y+6, r1	; 0x06
    3e5a:	69 81       	ldd	r22, Y+1	; 0x01
    3e5c:	7a 81       	ldd	r23, Y+2	; 0x02
    3e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e60:	9c 81       	ldd	r25, Y+4	; 0x04
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	40 e0       	ldi	r20, 0x00	; 0
    3e68:	50 e0       	ldi	r21, 0x00	; 0
    3e6a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3e6e:	88 23       	and	r24, r24
    3e70:	14 f4       	brge	.+4      	; 0x3e76 <Print_Floating+0x34>
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	8e 83       	std	Y+6, r24	; 0x06
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7a:	89 27       	eor	r24, r25
    3e7c:	88 23       	and	r24, r24
    3e7e:	d9 f4       	brne	.+54     	; 0x3eb6 <Print_Floating+0x74>
    3e80:	1d 82       	std	Y+5, r1	; 0x05
    3e82:	69 81       	ldd	r22, Y+1	; 0x01
    3e84:	7a 81       	ldd	r23, Y+2	; 0x02
    3e86:	8b 81       	ldd	r24, Y+3	; 0x03
    3e88:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e8       	ldi	r20, 0x80	; 128
    3e90:	5f eb       	ldi	r21, 0xBF	; 191
    3e92:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3e96:	18 16       	cp	r1, r24
    3e98:	14 f4       	brge	.+4      	; 0x3e9e <Print_Floating+0x5c>
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	8d 83       	std	Y+5, r24	; 0x05
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ea2:	89 27       	eor	r24, r25
    3ea4:	88 23       	and	r24, r24
    3ea6:	39 f4       	brne	.+14     	; 0x3eb6 <Print_Floating+0x74>
		LCD_SendData('-');
    3ea8:	8d e2       	ldi	r24, 0x2D	; 45
    3eaa:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
		LCD_SendData('0');
    3eae:	80 e3       	ldi	r24, 0x30	; 48
    3eb0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
    3eb4:	10 c0       	rjmp	.+32     	; 0x3ed6 <Print_Floating+0x94>
	} else {
		LCD_DisplayNumber((int) (operation));
    3eb6:	69 81       	ldd	r22, Y+1	; 0x01
    3eb8:	7a 81       	ldd	r23, Y+2	; 0x02
    3eba:	8b 81       	ldd	r24, Y+3	; 0x03
    3ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ebe:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	aa 27       	eor	r26, r26
    3ec8:	97 fd       	sbrc	r25, 7
    3eca:	a0 95       	com	r26
    3ecc:	ba 2f       	mov	r27, r26
    3ece:	bc 01       	movw	r22, r24
    3ed0:	cd 01       	movw	r24, r26
    3ed2:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_DisplayNumber>
	}

	LCD_SendData('.');
    3ed6:	8e e2       	ldi	r24, 0x2E	; 46
    3ed8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
	if ((operation) - (int) (operation) == 0.0000000) {
    3edc:	69 81       	ldd	r22, Y+1	; 0x01
    3ede:	7a 81       	ldd	r23, Y+2	; 0x02
    3ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee4:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
    3eec:	aa 27       	eor	r26, r26
    3eee:	97 fd       	sbrc	r25, 7
    3ef0:	a0 95       	com	r26
    3ef2:	ba 2f       	mov	r27, r26
    3ef4:	bc 01       	movw	r22, r24
    3ef6:	cd 01       	movw	r24, r26
    3ef8:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3efc:	9b 01       	movw	r18, r22
    3efe:	ac 01       	movw	r20, r24
    3f00:	69 81       	ldd	r22, Y+1	; 0x01
    3f02:	7a 81       	ldd	r23, Y+2	; 0x02
    3f04:	8b 81       	ldd	r24, Y+3	; 0x03
    3f06:	9c 81       	ldd	r25, Y+4	; 0x04
    3f08:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	bc 01       	movw	r22, r24
    3f12:	cd 01       	movw	r24, r26
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	40 e0       	ldi	r20, 0x00	; 0
    3f1a:	50 e0       	ldi	r21, 0x00	; 0
    3f1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3f20:	88 23       	and	r24, r24
    3f22:	21 f4       	brne	.+8      	; 0x3f2c <Print_Floating+0xea>
		LCD_SendData('0');
    3f24:	80 e3       	ldi	r24, 0x30	; 48
    3f26:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_SendData>
    3f2a:	69 c0       	rjmp	.+210    	; 0x3ffe <Print_Floating+0x1bc>
	} else if (operation < 0)
    3f2c:	69 81       	ldd	r22, Y+1	; 0x01
    3f2e:	7a 81       	ldd	r23, Y+2	; 0x02
    3f30:	8b 81       	ldd	r24, Y+3	; 0x03
    3f32:	9c 81       	ldd	r25, Y+4	; 0x04
    3f34:	20 e0       	ldi	r18, 0x00	; 0
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	40 e0       	ldi	r20, 0x00	; 0
    3f3a:	50 e0       	ldi	r21, 0x00	; 0
    3f3c:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3f40:	88 23       	and	r24, r24
    3f42:	7c f5       	brge	.+94     	; 0x3fa2 <Print_Floating+0x160>
		LCD_DisplayNumber(((operation) - (int) (operation)) * -1000);
    3f44:	69 81       	ldd	r22, Y+1	; 0x01
    3f46:	7a 81       	ldd	r23, Y+2	; 0x02
    3f48:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f4c:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	aa 27       	eor	r26, r26
    3f56:	97 fd       	sbrc	r25, 7
    3f58:	a0 95       	com	r26
    3f5a:	ba 2f       	mov	r27, r26
    3f5c:	bc 01       	movw	r22, r24
    3f5e:	cd 01       	movw	r24, r26
    3f60:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3f64:	9b 01       	movw	r18, r22
    3f66:	ac 01       	movw	r20, r24
    3f68:	69 81       	ldd	r22, Y+1	; 0x01
    3f6a:	7a 81       	ldd	r23, Y+2	; 0x02
    3f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f70:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	bc 01       	movw	r22, r24
    3f7a:	cd 01       	movw	r24, r26
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	4a e7       	ldi	r20, 0x7A	; 122
    3f82:	54 ec       	ldi	r21, 0xC4	; 196
    3f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	cd 01       	movw	r24, r26
    3f90:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	bc 01       	movw	r22, r24
    3f9a:	cd 01       	movw	r24, r26
    3f9c:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_DisplayNumber>
    3fa0:	2e c0       	rjmp	.+92     	; 0x3ffe <Print_Floating+0x1bc>
	else
		LCD_DisplayNumber(((operation) - (int) (operation)) * 1000);
    3fa2:	69 81       	ldd	r22, Y+1	; 0x01
    3fa4:	7a 81       	ldd	r23, Y+2	; 0x02
    3fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    3faa:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	aa 27       	eor	r26, r26
    3fb4:	97 fd       	sbrc	r25, 7
    3fb6:	a0 95       	com	r26
    3fb8:	ba 2f       	mov	r27, r26
    3fba:	bc 01       	movw	r22, r24
    3fbc:	cd 01       	movw	r24, r26
    3fbe:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3fc2:	9b 01       	movw	r18, r22
    3fc4:	ac 01       	movw	r20, r24
    3fc6:	69 81       	ldd	r22, Y+1	; 0x01
    3fc8:	7a 81       	ldd	r23, Y+2	; 0x02
    3fca:	8b 81       	ldd	r24, Y+3	; 0x03
    3fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fce:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	bc 01       	movw	r22, r24
    3fd8:	cd 01       	movw	r24, r26
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	4a e7       	ldi	r20, 0x7A	; 122
    3fe0:	54 e4       	ldi	r21, 0x44	; 68
    3fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	bc 01       	movw	r22, r24
    3fec:	cd 01       	movw	r24, r26
    3fee:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	bc 01       	movw	r22, r24
    3ff8:	cd 01       	movw	r24, r26
    3ffa:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_DisplayNumber>

}
    3ffe:	26 96       	adiw	r28, 0x06	; 6
    4000:	0f b6       	in	r0, 0x3f	; 63
    4002:	f8 94       	cli
    4004:	de bf       	out	0x3e, r29	; 62
    4006:	0f be       	out	0x3f, r0	; 63
    4008:	cd bf       	out	0x3d, r28	; 61
    400a:	cf 91       	pop	r28
    400c:	df 91       	pop	r29
    400e:	08 95       	ret

00004010 <__divmodsi4>:
    4010:	97 fb       	bst	r25, 7
    4012:	09 2e       	mov	r0, r25
    4014:	05 26       	eor	r0, r21
    4016:	0e d0       	rcall	.+28     	; 0x4034 <__divmodsi4_neg1>
    4018:	57 fd       	sbrc	r21, 7
    401a:	04 d0       	rcall	.+8      	; 0x4024 <__divmodsi4_neg2>
    401c:	14 d0       	rcall	.+40     	; 0x4046 <__udivmodsi4>
    401e:	0a d0       	rcall	.+20     	; 0x4034 <__divmodsi4_neg1>
    4020:	00 1c       	adc	r0, r0
    4022:	38 f4       	brcc	.+14     	; 0x4032 <__divmodsi4_exit>

00004024 <__divmodsi4_neg2>:
    4024:	50 95       	com	r21
    4026:	40 95       	com	r20
    4028:	30 95       	com	r19
    402a:	21 95       	neg	r18
    402c:	3f 4f       	sbci	r19, 0xFF	; 255
    402e:	4f 4f       	sbci	r20, 0xFF	; 255
    4030:	5f 4f       	sbci	r21, 0xFF	; 255

00004032 <__divmodsi4_exit>:
    4032:	08 95       	ret

00004034 <__divmodsi4_neg1>:
    4034:	f6 f7       	brtc	.-4      	; 0x4032 <__divmodsi4_exit>
    4036:	90 95       	com	r25
    4038:	80 95       	com	r24
    403a:	70 95       	com	r23
    403c:	61 95       	neg	r22
    403e:	7f 4f       	sbci	r23, 0xFF	; 255
    4040:	8f 4f       	sbci	r24, 0xFF	; 255
    4042:	9f 4f       	sbci	r25, 0xFF	; 255
    4044:	08 95       	ret

00004046 <__udivmodsi4>:
    4046:	a1 e2       	ldi	r26, 0x21	; 33
    4048:	1a 2e       	mov	r1, r26
    404a:	aa 1b       	sub	r26, r26
    404c:	bb 1b       	sub	r27, r27
    404e:	fd 01       	movw	r30, r26
    4050:	0d c0       	rjmp	.+26     	; 0x406c <__udivmodsi4_ep>

00004052 <__udivmodsi4_loop>:
    4052:	aa 1f       	adc	r26, r26
    4054:	bb 1f       	adc	r27, r27
    4056:	ee 1f       	adc	r30, r30
    4058:	ff 1f       	adc	r31, r31
    405a:	a2 17       	cp	r26, r18
    405c:	b3 07       	cpc	r27, r19
    405e:	e4 07       	cpc	r30, r20
    4060:	f5 07       	cpc	r31, r21
    4062:	20 f0       	brcs	.+8      	; 0x406c <__udivmodsi4_ep>
    4064:	a2 1b       	sub	r26, r18
    4066:	b3 0b       	sbc	r27, r19
    4068:	e4 0b       	sbc	r30, r20
    406a:	f5 0b       	sbc	r31, r21

0000406c <__udivmodsi4_ep>:
    406c:	66 1f       	adc	r22, r22
    406e:	77 1f       	adc	r23, r23
    4070:	88 1f       	adc	r24, r24
    4072:	99 1f       	adc	r25, r25
    4074:	1a 94       	dec	r1
    4076:	69 f7       	brne	.-38     	; 0x4052 <__udivmodsi4_loop>
    4078:	60 95       	com	r22
    407a:	70 95       	com	r23
    407c:	80 95       	com	r24
    407e:	90 95       	com	r25
    4080:	9b 01       	movw	r18, r22
    4082:	ac 01       	movw	r20, r24
    4084:	bd 01       	movw	r22, r26
    4086:	cf 01       	movw	r24, r30
    4088:	08 95       	ret

0000408a <__prologue_saves__>:
    408a:	2f 92       	push	r2
    408c:	3f 92       	push	r3
    408e:	4f 92       	push	r4
    4090:	5f 92       	push	r5
    4092:	6f 92       	push	r6
    4094:	7f 92       	push	r7
    4096:	8f 92       	push	r8
    4098:	9f 92       	push	r9
    409a:	af 92       	push	r10
    409c:	bf 92       	push	r11
    409e:	cf 92       	push	r12
    40a0:	df 92       	push	r13
    40a2:	ef 92       	push	r14
    40a4:	ff 92       	push	r15
    40a6:	0f 93       	push	r16
    40a8:	1f 93       	push	r17
    40aa:	cf 93       	push	r28
    40ac:	df 93       	push	r29
    40ae:	cd b7       	in	r28, 0x3d	; 61
    40b0:	de b7       	in	r29, 0x3e	; 62
    40b2:	ca 1b       	sub	r28, r26
    40b4:	db 0b       	sbc	r29, r27
    40b6:	0f b6       	in	r0, 0x3f	; 63
    40b8:	f8 94       	cli
    40ba:	de bf       	out	0x3e, r29	; 62
    40bc:	0f be       	out	0x3f, r0	; 63
    40be:	cd bf       	out	0x3d, r28	; 61
    40c0:	09 94       	ijmp

000040c2 <__epilogue_restores__>:
    40c2:	2a 88       	ldd	r2, Y+18	; 0x12
    40c4:	39 88       	ldd	r3, Y+17	; 0x11
    40c6:	48 88       	ldd	r4, Y+16	; 0x10
    40c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    40ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    40cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    40ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    40d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    40d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    40d4:	b9 84       	ldd	r11, Y+9	; 0x09
    40d6:	c8 84       	ldd	r12, Y+8	; 0x08
    40d8:	df 80       	ldd	r13, Y+7	; 0x07
    40da:	ee 80       	ldd	r14, Y+6	; 0x06
    40dc:	fd 80       	ldd	r15, Y+5	; 0x05
    40de:	0c 81       	ldd	r16, Y+4	; 0x04
    40e0:	1b 81       	ldd	r17, Y+3	; 0x03
    40e2:	aa 81       	ldd	r26, Y+2	; 0x02
    40e4:	b9 81       	ldd	r27, Y+1	; 0x01
    40e6:	ce 0f       	add	r28, r30
    40e8:	d1 1d       	adc	r29, r1
    40ea:	0f b6       	in	r0, 0x3f	; 63
    40ec:	f8 94       	cli
    40ee:	de bf       	out	0x3e, r29	; 62
    40f0:	0f be       	out	0x3f, r0	; 63
    40f2:	cd bf       	out	0x3d, r28	; 61
    40f4:	ed 01       	movw	r28, r26
    40f6:	08 95       	ret

000040f8 <_exit>:
    40f8:	f8 94       	cli

000040fa <__stop_program>:
    40fa:	ff cf       	rjmp	.-2      	; 0x40fa <__stop_program>
